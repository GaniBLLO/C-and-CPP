
Test_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000266c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  08002778  08002778  00012778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080028bc  080028bc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080028bc  080028bc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080028bc  080028bc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080028bc  080028bc  000128bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080028c0  080028c0  000128c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080028c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  2000000c  080028d0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  080028d0  00020074  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007ab1  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001443  00000000  00000000  00027ae6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000930  00000000  00000000  00028f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000888  00000000  00000000  00029860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000161a1  00000000  00000000  0002a0e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ad0b  00000000  00000000  00040289  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081a6a  00000000  00000000  0004af94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cc9fe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025a8  00000000  00000000  000cca50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002760 	.word	0x08002760

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002760 	.word	0x08002760

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fa33 	bl	80005bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f837 	bl	80001c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f8fb 	bl	8000354 <MX_GPIO_Init>
  MX_TIM1_Init();
 800015e:	f000 f875 	bl	800024c <MX_TIM1_Init>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000162:	2108      	movs	r1, #8
 8000164:	4815      	ldr	r0, [pc, #84]	; (80001bc <main+0x70>)
 8000166:	f001 fc89 	bl	8001a7c <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  forever
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_TogglePin(LED_GPIO_Port,LED_Pin);
 800016a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800016e:	4814      	ldr	r0, [pc, #80]	; (80001c0 <main+0x74>)
 8000170:	f000 fe40 	bl	8000df4 <HAL_GPIO_TogglePin>
	  HAL_Delay(200);
 8000174:	20c8      	movs	r0, #200	; 0xc8
 8000176:	f000 fa83 	bl	8000680 <HAL_Delay>
	  for(int i = 0; i< 255; ++i)
 800017a:	2300      	movs	r3, #0
 800017c:	607b      	str	r3, [r7, #4]
 800017e:	e008      	b.n	8000192 <main+0x46>
		  {
			  TIM1->CCR3 = i;
 8000180:	4a10      	ldr	r2, [pc, #64]	; (80001c4 <main+0x78>)
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	63d3      	str	r3, [r2, #60]	; 0x3c
			  HAL_Delay(1);
 8000186:	2001      	movs	r0, #1
 8000188:	f000 fa7a 	bl	8000680 <HAL_Delay>
	  for(int i = 0; i< 255; ++i)
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	3301      	adds	r3, #1
 8000190:	607b      	str	r3, [r7, #4]
 8000192:	687b      	ldr	r3, [r7, #4]
 8000194:	2bfe      	cmp	r3, #254	; 0xfe
 8000196:	ddf3      	ble.n	8000180 <main+0x34>
		  }
	  for(int i = 0; i< 255; ++i)
 8000198:	2300      	movs	r3, #0
 800019a:	603b      	str	r3, [r7, #0]
 800019c:	e00a      	b.n	80001b4 <main+0x68>
		  {
		  	  TIM1->CCR3 = 255 - i;
 800019e:	683b      	ldr	r3, [r7, #0]
 80001a0:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 80001a4:	4b07      	ldr	r3, [pc, #28]	; (80001c4 <main+0x78>)
 80001a6:	63da      	str	r2, [r3, #60]	; 0x3c
		  	  HAL_Delay(1);
 80001a8:	2001      	movs	r0, #1
 80001aa:	f000 fa69 	bl	8000680 <HAL_Delay>
	  for(int i = 0; i< 255; ++i)
 80001ae:	683b      	ldr	r3, [r7, #0]
 80001b0:	3301      	adds	r3, #1
 80001b2:	603b      	str	r3, [r7, #0]
 80001b4:	683b      	ldr	r3, [r7, #0]
 80001b6:	2bfe      	cmp	r3, #254	; 0xfe
 80001b8:	ddf1      	ble.n	800019e <main+0x52>
	  HAL_GPIO_TogglePin(LED_GPIO_Port,LED_Pin);
 80001ba:	e7d6      	b.n	800016a <main+0x1e>
 80001bc:	20000028 	.word	0x20000028
 80001c0:	40010c00 	.word	0x40010c00
 80001c4:	40012c00 	.word	0x40012c00

080001c8 <SystemClock_Config>:
  /* USER CODE END 3 */
}


void SystemClock_Config(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b090      	sub	sp, #64	; 0x40
 80001cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ce:	f107 0318 	add.w	r3, r7, #24
 80001d2:	2228      	movs	r2, #40	; 0x28
 80001d4:	2100      	movs	r1, #0
 80001d6:	4618      	mov	r0, r3
 80001d8:	f002 faba 	bl	8002750 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001dc:	1d3b      	adds	r3, r7, #4
 80001de:	2200      	movs	r2, #0
 80001e0:	601a      	str	r2, [r3, #0]
 80001e2:	605a      	str	r2, [r3, #4]
 80001e4:	609a      	str	r2, [r3, #8]
 80001e6:	60da      	str	r2, [r3, #12]
 80001e8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001ea:	2302      	movs	r3, #2
 80001ec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001ee:	2301      	movs	r3, #1
 80001f0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001f2:	2310      	movs	r3, #16
 80001f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001f6:	2302      	movs	r3, #2
 80001f8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001fa:	2300      	movs	r3, #0
 80001fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL14;
 80001fe:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8000202:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000204:	f107 0318 	add.w	r3, r7, #24
 8000208:	4618      	mov	r0, r3
 800020a:	f000 fe1b 	bl	8000e44 <HAL_RCC_OscConfig>
 800020e:	4603      	mov	r3, r0
 8000210:	2b00      	cmp	r3, #0
 8000212:	d001      	beq.n	8000218 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000214:	f000 f8ea 	bl	80003ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000218:	230f      	movs	r3, #15
 800021a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800021c:	2302      	movs	r3, #2
 800021e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000220:	2300      	movs	r3, #0
 8000222:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000224:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000228:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800022a:	2300      	movs	r3, #0
 800022c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800022e:	1d3b      	adds	r3, r7, #4
 8000230:	2102      	movs	r1, #2
 8000232:	4618      	mov	r0, r3
 8000234:	f001 f974 	bl	8001520 <HAL_RCC_ClockConfig>
 8000238:	4603      	mov	r3, r0
 800023a:	2b00      	cmp	r3, #0
 800023c:	d001      	beq.n	8000242 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800023e:	f000 f8d5 	bl	80003ec <Error_Handler>
  }
}
 8000242:	bf00      	nop
 8000244:	3740      	adds	r7, #64	; 0x40
 8000246:	46bd      	mov	sp, r7
 8000248:	bd80      	pop	{r7, pc}
	...

0800024c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	b092      	sub	sp, #72	; 0x48
 8000250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000252:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000256:	2200      	movs	r2, #0
 8000258:	601a      	str	r2, [r3, #0]
 800025a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800025c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000260:	2200      	movs	r2, #0
 8000262:	601a      	str	r2, [r3, #0]
 8000264:	605a      	str	r2, [r3, #4]
 8000266:	609a      	str	r2, [r3, #8]
 8000268:	60da      	str	r2, [r3, #12]
 800026a:	611a      	str	r2, [r3, #16]
 800026c:	615a      	str	r2, [r3, #20]
 800026e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000270:	1d3b      	adds	r3, r7, #4
 8000272:	2220      	movs	r2, #32
 8000274:	2100      	movs	r1, #0
 8000276:	4618      	mov	r0, r3
 8000278:	f002 fa6a 	bl	8002750 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800027c:	4b33      	ldr	r3, [pc, #204]	; (800034c <MX_TIM1_Init+0x100>)
 800027e:	4a34      	ldr	r2, [pc, #208]	; (8000350 <MX_TIM1_Init+0x104>)
 8000280:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64;
 8000282:	4b32      	ldr	r3, [pc, #200]	; (800034c <MX_TIM1_Init+0x100>)
 8000284:	2240      	movs	r2, #64	; 0x40
 8000286:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000288:	4b30      	ldr	r3, [pc, #192]	; (800034c <MX_TIM1_Init+0x100>)
 800028a:	2200      	movs	r2, #0
 800028c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 256;
 800028e:	4b2f      	ldr	r3, [pc, #188]	; (800034c <MX_TIM1_Init+0x100>)
 8000290:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000294:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000296:	4b2d      	ldr	r3, [pc, #180]	; (800034c <MX_TIM1_Init+0x100>)
 8000298:	2200      	movs	r2, #0
 800029a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800029c:	4b2b      	ldr	r3, [pc, #172]	; (800034c <MX_TIM1_Init+0x100>)
 800029e:	2200      	movs	r2, #0
 80002a0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002a2:	4b2a      	ldr	r3, [pc, #168]	; (800034c <MX_TIM1_Init+0x100>)
 80002a4:	2200      	movs	r2, #0
 80002a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80002a8:	4828      	ldr	r0, [pc, #160]	; (800034c <MX_TIM1_Init+0x100>)
 80002aa:	f001 fb45 	bl	8001938 <HAL_TIM_PWM_Init>
 80002ae:	4603      	mov	r3, r0
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d001      	beq.n	80002b8 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80002b4:	f000 f89a 	bl	80003ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002b8:	2300      	movs	r3, #0
 80002ba:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80002bc:	2300      	movs	r3, #0
 80002be:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80002c0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80002c4:	4619      	mov	r1, r3
 80002c6:	4821      	ldr	r0, [pc, #132]	; (800034c <MX_TIM1_Init+0x100>)
 80002c8:	f002 f8ba 	bl	8002440 <HAL_TIMEx_MasterConfigSynchronization>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d001      	beq.n	80002d6 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80002d2:	f000 f88b 	bl	80003ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80002d6:	2360      	movs	r3, #96	; 0x60
 80002d8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 15;
 80002da:	230f      	movs	r3, #15
 80002dc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80002de:	2300      	movs	r3, #0
 80002e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80002e2:	2300      	movs	r3, #0
 80002e4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80002e6:	2300      	movs	r3, #0
 80002e8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80002ea:	2300      	movs	r3, #0
 80002ec:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80002ee:	2300      	movs	r3, #0
 80002f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80002f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80002f6:	2208      	movs	r2, #8
 80002f8:	4619      	mov	r1, r3
 80002fa:	4814      	ldr	r0, [pc, #80]	; (800034c <MX_TIM1_Init+0x100>)
 80002fc:	f001 fc94 	bl	8001c28 <HAL_TIM_PWM_ConfigChannel>
 8000300:	4603      	mov	r3, r0
 8000302:	2b00      	cmp	r3, #0
 8000304:	d001      	beq.n	800030a <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8000306:	f000 f871 	bl	80003ec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800030a:	2300      	movs	r3, #0
 800030c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800030e:	2300      	movs	r3, #0
 8000310:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000312:	2300      	movs	r3, #0
 8000314:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000316:	2300      	movs	r3, #0
 8000318:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800031a:	2300      	movs	r3, #0
 800031c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800031e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000322:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000324:	2300      	movs	r3, #0
 8000326:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000328:	1d3b      	adds	r3, r7, #4
 800032a:	4619      	mov	r1, r3
 800032c:	4807      	ldr	r0, [pc, #28]	; (800034c <MX_TIM1_Init+0x100>)
 800032e:	f002 f925 	bl	800257c <HAL_TIMEx_ConfigBreakDeadTime>
 8000332:	4603      	mov	r3, r0
 8000334:	2b00      	cmp	r3, #0
 8000336:	d001      	beq.n	800033c <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8000338:	f000 f858 	bl	80003ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800033c:	4803      	ldr	r0, [pc, #12]	; (800034c <MX_TIM1_Init+0x100>)
 800033e:	f000 f8b5 	bl	80004ac <HAL_TIM_MspPostInit>

}
 8000342:	bf00      	nop
 8000344:	3748      	adds	r7, #72	; 0x48
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	20000028 	.word	0x20000028
 8000350:	40012c00 	.word	0x40012c00

08000354 <MX_GPIO_Init>:




static void MX_GPIO_Init(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b088      	sub	sp, #32
 8000358:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800035a:	f107 0310 	add.w	r3, r7, #16
 800035e:	2200      	movs	r2, #0
 8000360:	601a      	str	r2, [r3, #0]
 8000362:	605a      	str	r2, [r3, #4]
 8000364:	609a      	str	r2, [r3, #8]
 8000366:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000368:	4b1e      	ldr	r3, [pc, #120]	; (80003e4 <MX_GPIO_Init+0x90>)
 800036a:	699b      	ldr	r3, [r3, #24]
 800036c:	4a1d      	ldr	r2, [pc, #116]	; (80003e4 <MX_GPIO_Init+0x90>)
 800036e:	f043 0320 	orr.w	r3, r3, #32
 8000372:	6193      	str	r3, [r2, #24]
 8000374:	4b1b      	ldr	r3, [pc, #108]	; (80003e4 <MX_GPIO_Init+0x90>)
 8000376:	699b      	ldr	r3, [r3, #24]
 8000378:	f003 0320 	and.w	r3, r3, #32
 800037c:	60fb      	str	r3, [r7, #12]
 800037e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000380:	4b18      	ldr	r3, [pc, #96]	; (80003e4 <MX_GPIO_Init+0x90>)
 8000382:	699b      	ldr	r3, [r3, #24]
 8000384:	4a17      	ldr	r2, [pc, #92]	; (80003e4 <MX_GPIO_Init+0x90>)
 8000386:	f043 0308 	orr.w	r3, r3, #8
 800038a:	6193      	str	r3, [r2, #24]
 800038c:	4b15      	ldr	r3, [pc, #84]	; (80003e4 <MX_GPIO_Init+0x90>)
 800038e:	699b      	ldr	r3, [r3, #24]
 8000390:	f003 0308 	and.w	r3, r3, #8
 8000394:	60bb      	str	r3, [r7, #8]
 8000396:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000398:	4b12      	ldr	r3, [pc, #72]	; (80003e4 <MX_GPIO_Init+0x90>)
 800039a:	699b      	ldr	r3, [r3, #24]
 800039c:	4a11      	ldr	r2, [pc, #68]	; (80003e4 <MX_GPIO_Init+0x90>)
 800039e:	f043 0304 	orr.w	r3, r3, #4
 80003a2:	6193      	str	r3, [r2, #24]
 80003a4:	4b0f      	ldr	r3, [pc, #60]	; (80003e4 <MX_GPIO_Init+0x90>)
 80003a6:	699b      	ldr	r3, [r3, #24]
 80003a8:	f003 0304 	and.w	r3, r3, #4
 80003ac:	607b      	str	r3, [r7, #4]
 80003ae:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80003b0:	2200      	movs	r2, #0
 80003b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003b6:	480c      	ldr	r0, [pc, #48]	; (80003e8 <MX_GPIO_Init+0x94>)
 80003b8:	f000 fcea 	bl	8000d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80003bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80003c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003c2:	2301      	movs	r3, #1
 80003c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c6:	2300      	movs	r3, #0
 80003c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ca:	2302      	movs	r3, #2
 80003cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80003ce:	f107 0310 	add.w	r3, r7, #16
 80003d2:	4619      	mov	r1, r3
 80003d4:	4804      	ldr	r0, [pc, #16]	; (80003e8 <MX_GPIO_Init+0x94>)
 80003d6:	f000 fa7f 	bl	80008d8 <HAL_GPIO_Init>

}
 80003da:	bf00      	nop
 80003dc:	3720      	adds	r7, #32
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	40021000 	.word	0x40021000
 80003e8:	40010c00 	.word	0x40010c00

080003ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003f0:	b672      	cpsid	i
}
 80003f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003f4:	e7fe      	b.n	80003f4 <Error_Handler+0x8>

080003f6 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 80003f6:	b480      	push	{r7}
 80003f8:	b083      	sub	sp, #12
 80003fa:	af00      	add	r7, sp, #0
 80003fc:	6078      	str	r0, [r7, #4]
 80003fe:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000400:	bf00      	nop
 8000402:	370c      	adds	r7, #12
 8000404:	46bd      	mov	sp, r7
 8000406:	bc80      	pop	{r7}
 8000408:	4770      	bx	lr
	...

0800040c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800040c:	b480      	push	{r7}
 800040e:	b085      	sub	sp, #20
 8000410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000412:	4b15      	ldr	r3, [pc, #84]	; (8000468 <HAL_MspInit+0x5c>)
 8000414:	699b      	ldr	r3, [r3, #24]
 8000416:	4a14      	ldr	r2, [pc, #80]	; (8000468 <HAL_MspInit+0x5c>)
 8000418:	f043 0301 	orr.w	r3, r3, #1
 800041c:	6193      	str	r3, [r2, #24]
 800041e:	4b12      	ldr	r3, [pc, #72]	; (8000468 <HAL_MspInit+0x5c>)
 8000420:	699b      	ldr	r3, [r3, #24]
 8000422:	f003 0301 	and.w	r3, r3, #1
 8000426:	60bb      	str	r3, [r7, #8]
 8000428:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800042a:	4b0f      	ldr	r3, [pc, #60]	; (8000468 <HAL_MspInit+0x5c>)
 800042c:	69db      	ldr	r3, [r3, #28]
 800042e:	4a0e      	ldr	r2, [pc, #56]	; (8000468 <HAL_MspInit+0x5c>)
 8000430:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000434:	61d3      	str	r3, [r2, #28]
 8000436:	4b0c      	ldr	r3, [pc, #48]	; (8000468 <HAL_MspInit+0x5c>)
 8000438:	69db      	ldr	r3, [r3, #28]
 800043a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800043e:	607b      	str	r3, [r7, #4]
 8000440:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000442:	4b0a      	ldr	r3, [pc, #40]	; (800046c <HAL_MspInit+0x60>)
 8000444:	685b      	ldr	r3, [r3, #4]
 8000446:	60fb      	str	r3, [r7, #12]
 8000448:	68fb      	ldr	r3, [r7, #12]
 800044a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800044e:	60fb      	str	r3, [r7, #12]
 8000450:	68fb      	ldr	r3, [r7, #12]
 8000452:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000456:	60fb      	str	r3, [r7, #12]
 8000458:	4a04      	ldr	r2, [pc, #16]	; (800046c <HAL_MspInit+0x60>)
 800045a:	68fb      	ldr	r3, [r7, #12]
 800045c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800045e:	bf00      	nop
 8000460:	3714      	adds	r7, #20
 8000462:	46bd      	mov	sp, r7
 8000464:	bc80      	pop	{r7}
 8000466:	4770      	bx	lr
 8000468:	40021000 	.word	0x40021000
 800046c:	40010000 	.word	0x40010000

08000470 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000470:	b480      	push	{r7}
 8000472:	b085      	sub	sp, #20
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	4a09      	ldr	r2, [pc, #36]	; (80004a4 <HAL_TIM_PWM_MspInit+0x34>)
 800047e:	4293      	cmp	r3, r2
 8000480:	d10b      	bne.n	800049a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000482:	4b09      	ldr	r3, [pc, #36]	; (80004a8 <HAL_TIM_PWM_MspInit+0x38>)
 8000484:	699b      	ldr	r3, [r3, #24]
 8000486:	4a08      	ldr	r2, [pc, #32]	; (80004a8 <HAL_TIM_PWM_MspInit+0x38>)
 8000488:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800048c:	6193      	str	r3, [r2, #24]
 800048e:	4b06      	ldr	r3, [pc, #24]	; (80004a8 <HAL_TIM_PWM_MspInit+0x38>)
 8000490:	699b      	ldr	r3, [r3, #24]
 8000492:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000496:	60fb      	str	r3, [r7, #12]
 8000498:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800049a:	bf00      	nop
 800049c:	3714      	adds	r7, #20
 800049e:	46bd      	mov	sp, r7
 80004a0:	bc80      	pop	{r7}
 80004a2:	4770      	bx	lr
 80004a4:	40012c00 	.word	0x40012c00
 80004a8:	40021000 	.word	0x40021000

080004ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b088      	sub	sp, #32
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b4:	f107 0310 	add.w	r3, r7, #16
 80004b8:	2200      	movs	r2, #0
 80004ba:	601a      	str	r2, [r3, #0]
 80004bc:	605a      	str	r2, [r3, #4]
 80004be:	609a      	str	r2, [r3, #8]
 80004c0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	4a10      	ldr	r2, [pc, #64]	; (8000508 <HAL_TIM_MspPostInit+0x5c>)
 80004c8:	4293      	cmp	r3, r2
 80004ca:	d118      	bne.n	80004fe <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004cc:	4b0f      	ldr	r3, [pc, #60]	; (800050c <HAL_TIM_MspPostInit+0x60>)
 80004ce:	699b      	ldr	r3, [r3, #24]
 80004d0:	4a0e      	ldr	r2, [pc, #56]	; (800050c <HAL_TIM_MspPostInit+0x60>)
 80004d2:	f043 0304 	orr.w	r3, r3, #4
 80004d6:	6193      	str	r3, [r2, #24]
 80004d8:	4b0c      	ldr	r3, [pc, #48]	; (800050c <HAL_TIM_MspPostInit+0x60>)
 80004da:	699b      	ldr	r3, [r3, #24]
 80004dc:	f003 0304 	and.w	r3, r3, #4
 80004e0:	60fb      	str	r3, [r7, #12]
 80004e2:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80004e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004e8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004ea:	2302      	movs	r3, #2
 80004ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ee:	2302      	movs	r3, #2
 80004f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004f2:	f107 0310 	add.w	r3, r7, #16
 80004f6:	4619      	mov	r1, r3
 80004f8:	4805      	ldr	r0, [pc, #20]	; (8000510 <HAL_TIM_MspPostInit+0x64>)
 80004fa:	f000 f9ed 	bl	80008d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80004fe:	bf00      	nop
 8000500:	3720      	adds	r7, #32
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40012c00 	.word	0x40012c00
 800050c:	40021000 	.word	0x40021000
 8000510:	40010800 	.word	0x40010800

08000514 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000518:	e7fe      	b.n	8000518 <NMI_Handler+0x4>

0800051a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800051a:	b480      	push	{r7}
 800051c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800051e:	e7fe      	b.n	800051e <HardFault_Handler+0x4>

08000520 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000524:	e7fe      	b.n	8000524 <MemManage_Handler+0x4>

08000526 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000526:	b480      	push	{r7}
 8000528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800052a:	e7fe      	b.n	800052a <BusFault_Handler+0x4>

0800052c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000530:	e7fe      	b.n	8000530 <UsageFault_Handler+0x4>

08000532 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000532:	b480      	push	{r7}
 8000534:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000536:	bf00      	nop
 8000538:	46bd      	mov	sp, r7
 800053a:	bc80      	pop	{r7}
 800053c:	4770      	bx	lr

0800053e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800053e:	b480      	push	{r7}
 8000540:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000542:	bf00      	nop
 8000544:	46bd      	mov	sp, r7
 8000546:	bc80      	pop	{r7}
 8000548:	4770      	bx	lr

0800054a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800054a:	b480      	push	{r7}
 800054c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800054e:	bf00      	nop
 8000550:	46bd      	mov	sp, r7
 8000552:	bc80      	pop	{r7}
 8000554:	4770      	bx	lr

08000556 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000556:	b580      	push	{r7, lr}
 8000558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800055a:	f000 f875 	bl	8000648 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800055e:	bf00      	nop
 8000560:	bd80      	pop	{r7, pc}

08000562 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000562:	b480      	push	{r7}
 8000564:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000566:	bf00      	nop
 8000568:	46bd      	mov	sp, r7
 800056a:	bc80      	pop	{r7}
 800056c:	4770      	bx	lr
	...

08000570 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000570:	480c      	ldr	r0, [pc, #48]	; (80005a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000572:	490d      	ldr	r1, [pc, #52]	; (80005a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000574:	4a0d      	ldr	r2, [pc, #52]	; (80005ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000576:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000578:	e002      	b.n	8000580 <LoopCopyDataInit>

0800057a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800057a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800057c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800057e:	3304      	adds	r3, #4

08000580 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000580:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000582:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000584:	d3f9      	bcc.n	800057a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000586:	4a0a      	ldr	r2, [pc, #40]	; (80005b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000588:	4c0a      	ldr	r4, [pc, #40]	; (80005b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800058a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800058c:	e001      	b.n	8000592 <LoopFillZerobss>

0800058e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800058e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000590:	3204      	adds	r2, #4

08000592 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000592:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000594:	d3fb      	bcc.n	800058e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000596:	f7ff ffe4 	bl	8000562 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800059a:	f002 f8b5 	bl	8002708 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800059e:	f7ff fdd5 	bl	800014c <main>
  bx lr
 80005a2:	4770      	bx	lr
  ldr r0, =_sdata
 80005a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005a8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80005ac:	080028c4 	.word	0x080028c4
  ldr r2, =_sbss
 80005b0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80005b4:	20000074 	.word	0x20000074

080005b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005b8:	e7fe      	b.n	80005b8 <ADC1_2_IRQHandler>
	...

080005bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005c0:	4b08      	ldr	r3, [pc, #32]	; (80005e4 <HAL_Init+0x28>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a07      	ldr	r2, [pc, #28]	; (80005e4 <HAL_Init+0x28>)
 80005c6:	f043 0310 	orr.w	r3, r3, #16
 80005ca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005cc:	2003      	movs	r0, #3
 80005ce:	f000 f92b 	bl	8000828 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005d2:	200f      	movs	r0, #15
 80005d4:	f000 f808 	bl	80005e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005d8:	f7ff ff18 	bl	800040c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005dc:	2300      	movs	r3, #0
}
 80005de:	4618      	mov	r0, r3
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40022000 	.word	0x40022000

080005e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005f0:	4b12      	ldr	r3, [pc, #72]	; (800063c <HAL_InitTick+0x54>)
 80005f2:	681a      	ldr	r2, [r3, #0]
 80005f4:	4b12      	ldr	r3, [pc, #72]	; (8000640 <HAL_InitTick+0x58>)
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	4619      	mov	r1, r3
 80005fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000602:	fbb2 f3f3 	udiv	r3, r2, r3
 8000606:	4618      	mov	r0, r3
 8000608:	f000 f95a 	bl	80008c0 <HAL_SYSTICK_Config>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000612:	2301      	movs	r3, #1
 8000614:	e00e      	b.n	8000634 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	2b0f      	cmp	r3, #15
 800061a:	d80a      	bhi.n	8000632 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800061c:	2200      	movs	r2, #0
 800061e:	6879      	ldr	r1, [r7, #4]
 8000620:	f04f 30ff 	mov.w	r0, #4294967295
 8000624:	f000 f920 	bl	8000868 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000628:	4a06      	ldr	r2, [pc, #24]	; (8000644 <HAL_InitTick+0x5c>)
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800062e:	2300      	movs	r3, #0
 8000630:	e000      	b.n	8000634 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000632:	2301      	movs	r3, #1
}
 8000634:	4618      	mov	r0, r3
 8000636:	3708      	adds	r7, #8
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20000000 	.word	0x20000000
 8000640:	20000008 	.word	0x20000008
 8000644:	20000004 	.word	0x20000004

08000648 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800064c:	4b05      	ldr	r3, [pc, #20]	; (8000664 <HAL_IncTick+0x1c>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	461a      	mov	r2, r3
 8000652:	4b05      	ldr	r3, [pc, #20]	; (8000668 <HAL_IncTick+0x20>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	4413      	add	r3, r2
 8000658:	4a03      	ldr	r2, [pc, #12]	; (8000668 <HAL_IncTick+0x20>)
 800065a:	6013      	str	r3, [r2, #0]
}
 800065c:	bf00      	nop
 800065e:	46bd      	mov	sp, r7
 8000660:	bc80      	pop	{r7}
 8000662:	4770      	bx	lr
 8000664:	20000008 	.word	0x20000008
 8000668:	20000070 	.word	0x20000070

0800066c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  return uwTick;
 8000670:	4b02      	ldr	r3, [pc, #8]	; (800067c <HAL_GetTick+0x10>)
 8000672:	681b      	ldr	r3, [r3, #0]
}
 8000674:	4618      	mov	r0, r3
 8000676:	46bd      	mov	sp, r7
 8000678:	bc80      	pop	{r7}
 800067a:	4770      	bx	lr
 800067c:	20000070 	.word	0x20000070

08000680 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000688:	f7ff fff0 	bl	800066c <HAL_GetTick>
 800068c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000698:	d005      	beq.n	80006a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800069a:	4b0a      	ldr	r3, [pc, #40]	; (80006c4 <HAL_Delay+0x44>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	461a      	mov	r2, r3
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	4413      	add	r3, r2
 80006a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006a6:	bf00      	nop
 80006a8:	f7ff ffe0 	bl	800066c <HAL_GetTick>
 80006ac:	4602      	mov	r2, r0
 80006ae:	68bb      	ldr	r3, [r7, #8]
 80006b0:	1ad3      	subs	r3, r2, r3
 80006b2:	68fa      	ldr	r2, [r7, #12]
 80006b4:	429a      	cmp	r2, r3
 80006b6:	d8f7      	bhi.n	80006a8 <HAL_Delay+0x28>
  {
  }
}
 80006b8:	bf00      	nop
 80006ba:	bf00      	nop
 80006bc:	3710      	adds	r7, #16
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	20000008 	.word	0x20000008

080006c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b085      	sub	sp, #20
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	f003 0307 	and.w	r3, r3, #7
 80006d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006d8:	4b0c      	ldr	r3, [pc, #48]	; (800070c <__NVIC_SetPriorityGrouping+0x44>)
 80006da:	68db      	ldr	r3, [r3, #12]
 80006dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006de:	68ba      	ldr	r2, [r7, #8]
 80006e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006e4:	4013      	ands	r3, r2
 80006e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006fa:	4a04      	ldr	r2, [pc, #16]	; (800070c <__NVIC_SetPriorityGrouping+0x44>)
 80006fc:	68bb      	ldr	r3, [r7, #8]
 80006fe:	60d3      	str	r3, [r2, #12]
}
 8000700:	bf00      	nop
 8000702:	3714      	adds	r7, #20
 8000704:	46bd      	mov	sp, r7
 8000706:	bc80      	pop	{r7}
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	e000ed00 	.word	0xe000ed00

08000710 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000714:	4b04      	ldr	r3, [pc, #16]	; (8000728 <__NVIC_GetPriorityGrouping+0x18>)
 8000716:	68db      	ldr	r3, [r3, #12]
 8000718:	0a1b      	lsrs	r3, r3, #8
 800071a:	f003 0307 	and.w	r3, r3, #7
}
 800071e:	4618      	mov	r0, r3
 8000720:	46bd      	mov	sp, r7
 8000722:	bc80      	pop	{r7}
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	e000ed00 	.word	0xe000ed00

0800072c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
 8000732:	4603      	mov	r3, r0
 8000734:	6039      	str	r1, [r7, #0]
 8000736:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800073c:	2b00      	cmp	r3, #0
 800073e:	db0a      	blt.n	8000756 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000740:	683b      	ldr	r3, [r7, #0]
 8000742:	b2da      	uxtb	r2, r3
 8000744:	490c      	ldr	r1, [pc, #48]	; (8000778 <__NVIC_SetPriority+0x4c>)
 8000746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800074a:	0112      	lsls	r2, r2, #4
 800074c:	b2d2      	uxtb	r2, r2
 800074e:	440b      	add	r3, r1
 8000750:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000754:	e00a      	b.n	800076c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	b2da      	uxtb	r2, r3
 800075a:	4908      	ldr	r1, [pc, #32]	; (800077c <__NVIC_SetPriority+0x50>)
 800075c:	79fb      	ldrb	r3, [r7, #7]
 800075e:	f003 030f 	and.w	r3, r3, #15
 8000762:	3b04      	subs	r3, #4
 8000764:	0112      	lsls	r2, r2, #4
 8000766:	b2d2      	uxtb	r2, r2
 8000768:	440b      	add	r3, r1
 800076a:	761a      	strb	r2, [r3, #24]
}
 800076c:	bf00      	nop
 800076e:	370c      	adds	r7, #12
 8000770:	46bd      	mov	sp, r7
 8000772:	bc80      	pop	{r7}
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	e000e100 	.word	0xe000e100
 800077c:	e000ed00 	.word	0xe000ed00

08000780 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000780:	b480      	push	{r7}
 8000782:	b089      	sub	sp, #36	; 0x24
 8000784:	af00      	add	r7, sp, #0
 8000786:	60f8      	str	r0, [r7, #12]
 8000788:	60b9      	str	r1, [r7, #8]
 800078a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	f003 0307 	and.w	r3, r3, #7
 8000792:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000794:	69fb      	ldr	r3, [r7, #28]
 8000796:	f1c3 0307 	rsb	r3, r3, #7
 800079a:	2b04      	cmp	r3, #4
 800079c:	bf28      	it	cs
 800079e:	2304      	movcs	r3, #4
 80007a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007a2:	69fb      	ldr	r3, [r7, #28]
 80007a4:	3304      	adds	r3, #4
 80007a6:	2b06      	cmp	r3, #6
 80007a8:	d902      	bls.n	80007b0 <NVIC_EncodePriority+0x30>
 80007aa:	69fb      	ldr	r3, [r7, #28]
 80007ac:	3b03      	subs	r3, #3
 80007ae:	e000      	b.n	80007b2 <NVIC_EncodePriority+0x32>
 80007b0:	2300      	movs	r3, #0
 80007b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007b4:	f04f 32ff 	mov.w	r2, #4294967295
 80007b8:	69bb      	ldr	r3, [r7, #24]
 80007ba:	fa02 f303 	lsl.w	r3, r2, r3
 80007be:	43da      	mvns	r2, r3
 80007c0:	68bb      	ldr	r3, [r7, #8]
 80007c2:	401a      	ands	r2, r3
 80007c4:	697b      	ldr	r3, [r7, #20]
 80007c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007c8:	f04f 31ff 	mov.w	r1, #4294967295
 80007cc:	697b      	ldr	r3, [r7, #20]
 80007ce:	fa01 f303 	lsl.w	r3, r1, r3
 80007d2:	43d9      	mvns	r1, r3
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007d8:	4313      	orrs	r3, r2
         );
}
 80007da:	4618      	mov	r0, r3
 80007dc:	3724      	adds	r7, #36	; 0x24
 80007de:	46bd      	mov	sp, r7
 80007e0:	bc80      	pop	{r7}
 80007e2:	4770      	bx	lr

080007e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	3b01      	subs	r3, #1
 80007f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007f4:	d301      	bcc.n	80007fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007f6:	2301      	movs	r3, #1
 80007f8:	e00f      	b.n	800081a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007fa:	4a0a      	ldr	r2, [pc, #40]	; (8000824 <SysTick_Config+0x40>)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	3b01      	subs	r3, #1
 8000800:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000802:	210f      	movs	r1, #15
 8000804:	f04f 30ff 	mov.w	r0, #4294967295
 8000808:	f7ff ff90 	bl	800072c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800080c:	4b05      	ldr	r3, [pc, #20]	; (8000824 <SysTick_Config+0x40>)
 800080e:	2200      	movs	r2, #0
 8000810:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000812:	4b04      	ldr	r3, [pc, #16]	; (8000824 <SysTick_Config+0x40>)
 8000814:	2207      	movs	r2, #7
 8000816:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000818:	2300      	movs	r3, #0
}
 800081a:	4618      	mov	r0, r3
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	e000e010 	.word	0xe000e010

08000828 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	2b07      	cmp	r3, #7
 8000834:	d00f      	beq.n	8000856 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	2b06      	cmp	r3, #6
 800083a:	d00c      	beq.n	8000856 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	2b05      	cmp	r3, #5
 8000840:	d009      	beq.n	8000856 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	2b04      	cmp	r3, #4
 8000846:	d006      	beq.n	8000856 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	2b03      	cmp	r3, #3
 800084c:	d003      	beq.n	8000856 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800084e:	2192      	movs	r1, #146	; 0x92
 8000850:	4804      	ldr	r0, [pc, #16]	; (8000864 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8000852:	f7ff fdd0 	bl	80003f6 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000856:	6878      	ldr	r0, [r7, #4]
 8000858:	f7ff ff36 	bl	80006c8 <__NVIC_SetPriorityGrouping>
}
 800085c:	bf00      	nop
 800085e:	3708      	adds	r7, #8
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	08002778 	.word	0x08002778

08000868 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000868:	b580      	push	{r7, lr}
 800086a:	b086      	sub	sp, #24
 800086c:	af00      	add	r7, sp, #0
 800086e:	4603      	mov	r3, r0
 8000870:	60b9      	str	r1, [r7, #8]
 8000872:	607a      	str	r2, [r7, #4]
 8000874:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000876:	2300      	movs	r3, #0
 8000878:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	2b0f      	cmp	r3, #15
 800087e:	d903      	bls.n	8000888 <HAL_NVIC_SetPriority+0x20>
 8000880:	21aa      	movs	r1, #170	; 0xaa
 8000882:	480e      	ldr	r0, [pc, #56]	; (80008bc <HAL_NVIC_SetPriority+0x54>)
 8000884:	f7ff fdb7 	bl	80003f6 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000888:	68bb      	ldr	r3, [r7, #8]
 800088a:	2b0f      	cmp	r3, #15
 800088c:	d903      	bls.n	8000896 <HAL_NVIC_SetPriority+0x2e>
 800088e:	21ab      	movs	r1, #171	; 0xab
 8000890:	480a      	ldr	r0, [pc, #40]	; (80008bc <HAL_NVIC_SetPriority+0x54>)
 8000892:	f7ff fdb0 	bl	80003f6 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000896:	f7ff ff3b 	bl	8000710 <__NVIC_GetPriorityGrouping>
 800089a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800089c:	687a      	ldr	r2, [r7, #4]
 800089e:	68b9      	ldr	r1, [r7, #8]
 80008a0:	6978      	ldr	r0, [r7, #20]
 80008a2:	f7ff ff6d 	bl	8000780 <NVIC_EncodePriority>
 80008a6:	4602      	mov	r2, r0
 80008a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008ac:	4611      	mov	r1, r2
 80008ae:	4618      	mov	r0, r3
 80008b0:	f7ff ff3c 	bl	800072c <__NVIC_SetPriority>
}
 80008b4:	bf00      	nop
 80008b6:	3718      	adds	r7, #24
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	08002778 	.word	0x08002778

080008c0 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008c8:	6878      	ldr	r0, [r7, #4]
 80008ca:	f7ff ff8b 	bl	80007e4 <SysTick_Config>
 80008ce:	4603      	mov	r3, r0
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	3708      	adds	r7, #8
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b08a      	sub	sp, #40	; 0x28
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
 80008e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008e2:	2300      	movs	r3, #0
 80008e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80008e6:	2300      	movs	r3, #0
 80008e8:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	4a92      	ldr	r2, [pc, #584]	; (8000b38 <HAL_GPIO_Init+0x260>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d00f      	beq.n	8000912 <HAL_GPIO_Init+0x3a>
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	4a91      	ldr	r2, [pc, #580]	; (8000b3c <HAL_GPIO_Init+0x264>)
 80008f6:	4293      	cmp	r3, r2
 80008f8:	d00b      	beq.n	8000912 <HAL_GPIO_Init+0x3a>
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	4a90      	ldr	r2, [pc, #576]	; (8000b40 <HAL_GPIO_Init+0x268>)
 80008fe:	4293      	cmp	r3, r2
 8000900:	d007      	beq.n	8000912 <HAL_GPIO_Init+0x3a>
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	4a8f      	ldr	r2, [pc, #572]	; (8000b44 <HAL_GPIO_Init+0x26c>)
 8000906:	4293      	cmp	r3, r2
 8000908:	d003      	beq.n	8000912 <HAL_GPIO_Init+0x3a>
 800090a:	21bd      	movs	r1, #189	; 0xbd
 800090c:	488e      	ldr	r0, [pc, #568]	; (8000b48 <HAL_GPIO_Init+0x270>)
 800090e:	f7ff fd72 	bl	80003f6 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	b29b      	uxth	r3, r3
 8000918:	2b00      	cmp	r3, #0
 800091a:	d005      	beq.n	8000928 <HAL_GPIO_Init+0x50>
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	0c1b      	lsrs	r3, r3, #16
 8000922:	041b      	lsls	r3, r3, #16
 8000924:	2b00      	cmp	r3, #0
 8000926:	d003      	beq.n	8000930 <HAL_GPIO_Init+0x58>
 8000928:	21be      	movs	r1, #190	; 0xbe
 800092a:	4887      	ldr	r0, [pc, #540]	; (8000b48 <HAL_GPIO_Init+0x270>)
 800092c:	f7ff fd63 	bl	80003f6 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	685b      	ldr	r3, [r3, #4]
 8000934:	2b00      	cmp	r3, #0
 8000936:	f000 8210 	beq.w	8000d5a <HAL_GPIO_Init+0x482>
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	2b01      	cmp	r3, #1
 8000940:	f000 820b 	beq.w	8000d5a <HAL_GPIO_Init+0x482>
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	685b      	ldr	r3, [r3, #4]
 8000948:	2b11      	cmp	r3, #17
 800094a:	f000 8206 	beq.w	8000d5a <HAL_GPIO_Init+0x482>
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	685b      	ldr	r3, [r3, #4]
 8000952:	2b02      	cmp	r3, #2
 8000954:	f000 8201 	beq.w	8000d5a <HAL_GPIO_Init+0x482>
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	685b      	ldr	r3, [r3, #4]
 800095c:	2b12      	cmp	r3, #18
 800095e:	f000 81fc 	beq.w	8000d5a <HAL_GPIO_Init+0x482>
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	685b      	ldr	r3, [r3, #4]
 8000966:	4a79      	ldr	r2, [pc, #484]	; (8000b4c <HAL_GPIO_Init+0x274>)
 8000968:	4293      	cmp	r3, r2
 800096a:	f000 81f6 	beq.w	8000d5a <HAL_GPIO_Init+0x482>
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	685b      	ldr	r3, [r3, #4]
 8000972:	4a77      	ldr	r2, [pc, #476]	; (8000b50 <HAL_GPIO_Init+0x278>)
 8000974:	4293      	cmp	r3, r2
 8000976:	f000 81f0 	beq.w	8000d5a <HAL_GPIO_Init+0x482>
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	685b      	ldr	r3, [r3, #4]
 800097e:	4a75      	ldr	r2, [pc, #468]	; (8000b54 <HAL_GPIO_Init+0x27c>)
 8000980:	4293      	cmp	r3, r2
 8000982:	f000 81ea 	beq.w	8000d5a <HAL_GPIO_Init+0x482>
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	685b      	ldr	r3, [r3, #4]
 800098a:	4a73      	ldr	r2, [pc, #460]	; (8000b58 <HAL_GPIO_Init+0x280>)
 800098c:	4293      	cmp	r3, r2
 800098e:	f000 81e4 	beq.w	8000d5a <HAL_GPIO_Init+0x482>
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	4a71      	ldr	r2, [pc, #452]	; (8000b5c <HAL_GPIO_Init+0x284>)
 8000998:	4293      	cmp	r3, r2
 800099a:	f000 81de 	beq.w	8000d5a <HAL_GPIO_Init+0x482>
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	685b      	ldr	r3, [r3, #4]
 80009a2:	4a6f      	ldr	r2, [pc, #444]	; (8000b60 <HAL_GPIO_Init+0x288>)
 80009a4:	4293      	cmp	r3, r2
 80009a6:	f000 81d8 	beq.w	8000d5a <HAL_GPIO_Init+0x482>
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	685b      	ldr	r3, [r3, #4]
 80009ae:	2b03      	cmp	r3, #3
 80009b0:	f000 81d3 	beq.w	8000d5a <HAL_GPIO_Init+0x482>
 80009b4:	21bf      	movs	r1, #191	; 0xbf
 80009b6:	4864      	ldr	r0, [pc, #400]	; (8000b48 <HAL_GPIO_Init+0x270>)
 80009b8:	f7ff fd1d 	bl	80003f6 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009bc:	e1cd      	b.n	8000d5a <HAL_GPIO_Init+0x482>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80009be:	2201      	movs	r2, #1
 80009c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009c2:	fa02 f303 	lsl.w	r3, r2, r3
 80009c6:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	69fa      	ldr	r2, [r7, #28]
 80009ce:	4013      	ands	r3, r2
 80009d0:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80009d2:	69ba      	ldr	r2, [r7, #24]
 80009d4:	69fb      	ldr	r3, [r7, #28]
 80009d6:	429a      	cmp	r2, r3
 80009d8:	f040 81bc 	bne.w	8000d54 <HAL_GPIO_Init+0x47c>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	4a56      	ldr	r2, [pc, #344]	; (8000b38 <HAL_GPIO_Init+0x260>)
 80009e0:	4293      	cmp	r3, r2
 80009e2:	d00f      	beq.n	8000a04 <HAL_GPIO_Init+0x12c>
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	4a55      	ldr	r2, [pc, #340]	; (8000b3c <HAL_GPIO_Init+0x264>)
 80009e8:	4293      	cmp	r3, r2
 80009ea:	d00b      	beq.n	8000a04 <HAL_GPIO_Init+0x12c>
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	4a54      	ldr	r2, [pc, #336]	; (8000b40 <HAL_GPIO_Init+0x268>)
 80009f0:	4293      	cmp	r3, r2
 80009f2:	d007      	beq.n	8000a04 <HAL_GPIO_Init+0x12c>
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	4a53      	ldr	r2, [pc, #332]	; (8000b44 <HAL_GPIO_Init+0x26c>)
 80009f8:	4293      	cmp	r3, r2
 80009fa:	d003      	beq.n	8000a04 <HAL_GPIO_Init+0x12c>
 80009fc:	21cd      	movs	r1, #205	; 0xcd
 80009fe:	4852      	ldr	r0, [pc, #328]	; (8000b48 <HAL_GPIO_Init+0x270>)
 8000a00:	f7ff fcf9 	bl	80003f6 <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	685b      	ldr	r3, [r3, #4]
 8000a08:	4a55      	ldr	r2, [pc, #340]	; (8000b60 <HAL_GPIO_Init+0x288>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	f000 80bf 	beq.w	8000b8e <HAL_GPIO_Init+0x2b6>
 8000a10:	4a53      	ldr	r2, [pc, #332]	; (8000b60 <HAL_GPIO_Init+0x288>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	f200 80e5 	bhi.w	8000be2 <HAL_GPIO_Init+0x30a>
 8000a18:	4a4e      	ldr	r2, [pc, #312]	; (8000b54 <HAL_GPIO_Init+0x27c>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	f000 80b7 	beq.w	8000b8e <HAL_GPIO_Init+0x2b6>
 8000a20:	4a4c      	ldr	r2, [pc, #304]	; (8000b54 <HAL_GPIO_Init+0x27c>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	f200 80dd 	bhi.w	8000be2 <HAL_GPIO_Init+0x30a>
 8000a28:	4a4c      	ldr	r2, [pc, #304]	; (8000b5c <HAL_GPIO_Init+0x284>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	f000 80af 	beq.w	8000b8e <HAL_GPIO_Init+0x2b6>
 8000a30:	4a4a      	ldr	r2, [pc, #296]	; (8000b5c <HAL_GPIO_Init+0x284>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	f200 80d5 	bhi.w	8000be2 <HAL_GPIO_Init+0x30a>
 8000a38:	4a45      	ldr	r2, [pc, #276]	; (8000b50 <HAL_GPIO_Init+0x278>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	f000 80a7 	beq.w	8000b8e <HAL_GPIO_Init+0x2b6>
 8000a40:	4a43      	ldr	r2, [pc, #268]	; (8000b50 <HAL_GPIO_Init+0x278>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	f200 80cd 	bhi.w	8000be2 <HAL_GPIO_Init+0x30a>
 8000a48:	4a43      	ldr	r2, [pc, #268]	; (8000b58 <HAL_GPIO_Init+0x280>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	f000 809f 	beq.w	8000b8e <HAL_GPIO_Init+0x2b6>
 8000a50:	4a41      	ldr	r2, [pc, #260]	; (8000b58 <HAL_GPIO_Init+0x280>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	f200 80c5 	bhi.w	8000be2 <HAL_GPIO_Init+0x30a>
 8000a58:	2b12      	cmp	r3, #18
 8000a5a:	d82b      	bhi.n	8000ab4 <HAL_GPIO_Init+0x1dc>
 8000a5c:	2b12      	cmp	r3, #18
 8000a5e:	f200 80c0 	bhi.w	8000be2 <HAL_GPIO_Init+0x30a>
 8000a62:	a201      	add	r2, pc, #4	; (adr r2, 8000a68 <HAL_GPIO_Init+0x190>)
 8000a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a68:	08000b8f 	.word	0x08000b8f
 8000a6c:	08000abd 	.word	0x08000abd
 8000a70:	08000b0f 	.word	0x08000b0f
 8000a74:	08000bdd 	.word	0x08000bdd
 8000a78:	08000be3 	.word	0x08000be3
 8000a7c:	08000be3 	.word	0x08000be3
 8000a80:	08000be3 	.word	0x08000be3
 8000a84:	08000be3 	.word	0x08000be3
 8000a88:	08000be3 	.word	0x08000be3
 8000a8c:	08000be3 	.word	0x08000be3
 8000a90:	08000be3 	.word	0x08000be3
 8000a94:	08000be3 	.word	0x08000be3
 8000a98:	08000be3 	.word	0x08000be3
 8000a9c:	08000be3 	.word	0x08000be3
 8000aa0:	08000be3 	.word	0x08000be3
 8000aa4:	08000be3 	.word	0x08000be3
 8000aa8:	08000be3 	.word	0x08000be3
 8000aac:	08000ae5 	.word	0x08000ae5
 8000ab0:	08000b65 	.word	0x08000b65
 8000ab4:	4a25      	ldr	r2, [pc, #148]	; (8000b4c <HAL_GPIO_Init+0x274>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d069      	beq.n	8000b8e <HAL_GPIO_Init+0x2b6>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000aba:	e092      	b.n	8000be2 <HAL_GPIO_Init+0x30a>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	68db      	ldr	r3, [r3, #12]
 8000ac0:	2b02      	cmp	r3, #2
 8000ac2:	d00b      	beq.n	8000adc <HAL_GPIO_Init+0x204>
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	68db      	ldr	r3, [r3, #12]
 8000ac8:	2b01      	cmp	r3, #1
 8000aca:	d007      	beq.n	8000adc <HAL_GPIO_Init+0x204>
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	68db      	ldr	r3, [r3, #12]
 8000ad0:	2b03      	cmp	r3, #3
 8000ad2:	d003      	beq.n	8000adc <HAL_GPIO_Init+0x204>
 8000ad4:	21d5      	movs	r1, #213	; 0xd5
 8000ad6:	481c      	ldr	r0, [pc, #112]	; (8000b48 <HAL_GPIO_Init+0x270>)
 8000ad8:	f7ff fc8d 	bl	80003f6 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	68db      	ldr	r3, [r3, #12]
 8000ae0:	623b      	str	r3, [r7, #32]
          break;
 8000ae2:	e07f      	b.n	8000be4 <HAL_GPIO_Init+0x30c>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	68db      	ldr	r3, [r3, #12]
 8000ae8:	2b02      	cmp	r3, #2
 8000aea:	d00b      	beq.n	8000b04 <HAL_GPIO_Init+0x22c>
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	68db      	ldr	r3, [r3, #12]
 8000af0:	2b01      	cmp	r3, #1
 8000af2:	d007      	beq.n	8000b04 <HAL_GPIO_Init+0x22c>
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	68db      	ldr	r3, [r3, #12]
 8000af8:	2b03      	cmp	r3, #3
 8000afa:	d003      	beq.n	8000b04 <HAL_GPIO_Init+0x22c>
 8000afc:	21dc      	movs	r1, #220	; 0xdc
 8000afe:	4812      	ldr	r0, [pc, #72]	; (8000b48 <HAL_GPIO_Init+0x270>)
 8000b00:	f7ff fc79 	bl	80003f6 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	68db      	ldr	r3, [r3, #12]
 8000b08:	3304      	adds	r3, #4
 8000b0a:	623b      	str	r3, [r7, #32]
          break;
 8000b0c:	e06a      	b.n	8000be4 <HAL_GPIO_Init+0x30c>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	68db      	ldr	r3, [r3, #12]
 8000b12:	2b02      	cmp	r3, #2
 8000b14:	d00b      	beq.n	8000b2e <HAL_GPIO_Init+0x256>
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	68db      	ldr	r3, [r3, #12]
 8000b1a:	2b01      	cmp	r3, #1
 8000b1c:	d007      	beq.n	8000b2e <HAL_GPIO_Init+0x256>
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	68db      	ldr	r3, [r3, #12]
 8000b22:	2b03      	cmp	r3, #3
 8000b24:	d003      	beq.n	8000b2e <HAL_GPIO_Init+0x256>
 8000b26:	21e3      	movs	r1, #227	; 0xe3
 8000b28:	4807      	ldr	r0, [pc, #28]	; (8000b48 <HAL_GPIO_Init+0x270>)
 8000b2a:	f7ff fc64 	bl	80003f6 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	68db      	ldr	r3, [r3, #12]
 8000b32:	3308      	adds	r3, #8
 8000b34:	623b      	str	r3, [r7, #32]
          break;
 8000b36:	e055      	b.n	8000be4 <HAL_GPIO_Init+0x30c>
 8000b38:	40010800 	.word	0x40010800
 8000b3c:	40010c00 	.word	0x40010c00
 8000b40:	40011000 	.word	0x40011000
 8000b44:	40011400 	.word	0x40011400
 8000b48:	080027b4 	.word	0x080027b4
 8000b4c:	10110000 	.word	0x10110000
 8000b50:	10210000 	.word	0x10210000
 8000b54:	10310000 	.word	0x10310000
 8000b58:	10120000 	.word	0x10120000
 8000b5c:	10220000 	.word	0x10220000
 8000b60:	10320000 	.word	0x10320000
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	68db      	ldr	r3, [r3, #12]
 8000b68:	2b02      	cmp	r3, #2
 8000b6a:	d00b      	beq.n	8000b84 <HAL_GPIO_Init+0x2ac>
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	68db      	ldr	r3, [r3, #12]
 8000b70:	2b01      	cmp	r3, #1
 8000b72:	d007      	beq.n	8000b84 <HAL_GPIO_Init+0x2ac>
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	68db      	ldr	r3, [r3, #12]
 8000b78:	2b03      	cmp	r3, #3
 8000b7a:	d003      	beq.n	8000b84 <HAL_GPIO_Init+0x2ac>
 8000b7c:	21ea      	movs	r1, #234	; 0xea
 8000b7e:	487d      	ldr	r0, [pc, #500]	; (8000d74 <HAL_GPIO_Init+0x49c>)
 8000b80:	f7ff fc39 	bl	80003f6 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	68db      	ldr	r3, [r3, #12]
 8000b88:	330c      	adds	r3, #12
 8000b8a:	623b      	str	r3, [r7, #32]
          break;
 8000b8c:	e02a      	b.n	8000be4 <HAL_GPIO_Init+0x30c>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	689b      	ldr	r3, [r3, #8]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d00b      	beq.n	8000bae <HAL_GPIO_Init+0x2d6>
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	689b      	ldr	r3, [r3, #8]
 8000b9a:	2b01      	cmp	r3, #1
 8000b9c:	d007      	beq.n	8000bae <HAL_GPIO_Init+0x2d6>
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	689b      	ldr	r3, [r3, #8]
 8000ba2:	2b02      	cmp	r3, #2
 8000ba4:	d003      	beq.n	8000bae <HAL_GPIO_Init+0x2d6>
 8000ba6:	21f7      	movs	r1, #247	; 0xf7
 8000ba8:	4872      	ldr	r0, [pc, #456]	; (8000d74 <HAL_GPIO_Init+0x49c>)
 8000baa:	f7ff fc24 	bl	80003f6 <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	689b      	ldr	r3, [r3, #8]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d102      	bne.n	8000bbc <HAL_GPIO_Init+0x2e4>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000bb6:	2304      	movs	r3, #4
 8000bb8:	623b      	str	r3, [r7, #32]
          break;
 8000bba:	e013      	b.n	8000be4 <HAL_GPIO_Init+0x30c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	689b      	ldr	r3, [r3, #8]
 8000bc0:	2b01      	cmp	r3, #1
 8000bc2:	d105      	bne.n	8000bd0 <HAL_GPIO_Init+0x2f8>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bc4:	2308      	movs	r3, #8
 8000bc6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	69fa      	ldr	r2, [r7, #28]
 8000bcc:	611a      	str	r2, [r3, #16]
          break;
 8000bce:	e009      	b.n	8000be4 <HAL_GPIO_Init+0x30c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bd0:	2308      	movs	r3, #8
 8000bd2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	69fa      	ldr	r2, [r7, #28]
 8000bd8:	615a      	str	r2, [r3, #20]
          break;
 8000bda:	e003      	b.n	8000be4 <HAL_GPIO_Init+0x30c>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	623b      	str	r3, [r7, #32]
          break;
 8000be0:	e000      	b.n	8000be4 <HAL_GPIO_Init+0x30c>
          break;
 8000be2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000be4:	69bb      	ldr	r3, [r7, #24]
 8000be6:	2bff      	cmp	r3, #255	; 0xff
 8000be8:	d801      	bhi.n	8000bee <HAL_GPIO_Init+0x316>
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	e001      	b.n	8000bf2 <HAL_GPIO_Init+0x31a>
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	3304      	adds	r3, #4
 8000bf2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000bf4:	69bb      	ldr	r3, [r7, #24]
 8000bf6:	2bff      	cmp	r3, #255	; 0xff
 8000bf8:	d802      	bhi.n	8000c00 <HAL_GPIO_Init+0x328>
 8000bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bfc:	009b      	lsls	r3, r3, #2
 8000bfe:	e002      	b.n	8000c06 <HAL_GPIO_Init+0x32e>
 8000c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c02:	3b08      	subs	r3, #8
 8000c04:	009b      	lsls	r3, r3, #2
 8000c06:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	210f      	movs	r1, #15
 8000c0e:	693b      	ldr	r3, [r7, #16]
 8000c10:	fa01 f303 	lsl.w	r3, r1, r3
 8000c14:	43db      	mvns	r3, r3
 8000c16:	401a      	ands	r2, r3
 8000c18:	6a39      	ldr	r1, [r7, #32]
 8000c1a:	693b      	ldr	r3, [r7, #16]
 8000c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c20:	431a      	orrs	r2, r3
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	f000 8090 	beq.w	8000d54 <HAL_GPIO_Init+0x47c>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c34:	4b50      	ldr	r3, [pc, #320]	; (8000d78 <HAL_GPIO_Init+0x4a0>)
 8000c36:	699b      	ldr	r3, [r3, #24]
 8000c38:	4a4f      	ldr	r2, [pc, #316]	; (8000d78 <HAL_GPIO_Init+0x4a0>)
 8000c3a:	f043 0301 	orr.w	r3, r3, #1
 8000c3e:	6193      	str	r3, [r2, #24]
 8000c40:	4b4d      	ldr	r3, [pc, #308]	; (8000d78 <HAL_GPIO_Init+0x4a0>)
 8000c42:	699b      	ldr	r3, [r3, #24]
 8000c44:	f003 0301 	and.w	r3, r3, #1
 8000c48:	60bb      	str	r3, [r7, #8]
 8000c4a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c4c:	4a4b      	ldr	r2, [pc, #300]	; (8000d7c <HAL_GPIO_Init+0x4a4>)
 8000c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c50:	089b      	lsrs	r3, r3, #2
 8000c52:	3302      	adds	r3, #2
 8000c54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c58:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c5c:	f003 0303 	and.w	r3, r3, #3
 8000c60:	009b      	lsls	r3, r3, #2
 8000c62:	220f      	movs	r2, #15
 8000c64:	fa02 f303 	lsl.w	r3, r2, r3
 8000c68:	43db      	mvns	r3, r3
 8000c6a:	68fa      	ldr	r2, [r7, #12]
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	4a43      	ldr	r2, [pc, #268]	; (8000d80 <HAL_GPIO_Init+0x4a8>)
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d00d      	beq.n	8000c94 <HAL_GPIO_Init+0x3bc>
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	4a42      	ldr	r2, [pc, #264]	; (8000d84 <HAL_GPIO_Init+0x4ac>)
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	d007      	beq.n	8000c90 <HAL_GPIO_Init+0x3b8>
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	4a41      	ldr	r2, [pc, #260]	; (8000d88 <HAL_GPIO_Init+0x4b0>)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d101      	bne.n	8000c8c <HAL_GPIO_Init+0x3b4>
 8000c88:	2302      	movs	r3, #2
 8000c8a:	e004      	b.n	8000c96 <HAL_GPIO_Init+0x3be>
 8000c8c:	2303      	movs	r3, #3
 8000c8e:	e002      	b.n	8000c96 <HAL_GPIO_Init+0x3be>
 8000c90:	2301      	movs	r3, #1
 8000c92:	e000      	b.n	8000c96 <HAL_GPIO_Init+0x3be>
 8000c94:	2300      	movs	r3, #0
 8000c96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c98:	f002 0203 	and.w	r2, r2, #3
 8000c9c:	0092      	lsls	r2, r2, #2
 8000c9e:	4093      	lsls	r3, r2
 8000ca0:	68fa      	ldr	r2, [r7, #12]
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000ca6:	4935      	ldr	r1, [pc, #212]	; (8000d7c <HAL_GPIO_Init+0x4a4>)
 8000ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000caa:	089b      	lsrs	r3, r3, #2
 8000cac:	3302      	adds	r3, #2
 8000cae:	68fa      	ldr	r2, [r7, #12]
 8000cb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d006      	beq.n	8000cce <HAL_GPIO_Init+0x3f6>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000cc0:	4b32      	ldr	r3, [pc, #200]	; (8000d8c <HAL_GPIO_Init+0x4b4>)
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	4931      	ldr	r1, [pc, #196]	; (8000d8c <HAL_GPIO_Init+0x4b4>)
 8000cc6:	69bb      	ldr	r3, [r7, #24]
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	600b      	str	r3, [r1, #0]
 8000ccc:	e006      	b.n	8000cdc <HAL_GPIO_Init+0x404>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000cce:	4b2f      	ldr	r3, [pc, #188]	; (8000d8c <HAL_GPIO_Init+0x4b4>)
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	69bb      	ldr	r3, [r7, #24]
 8000cd4:	43db      	mvns	r3, r3
 8000cd6:	492d      	ldr	r1, [pc, #180]	; (8000d8c <HAL_GPIO_Init+0x4b4>)
 8000cd8:	4013      	ands	r3, r2
 8000cda:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d006      	beq.n	8000cf6 <HAL_GPIO_Init+0x41e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ce8:	4b28      	ldr	r3, [pc, #160]	; (8000d8c <HAL_GPIO_Init+0x4b4>)
 8000cea:	685a      	ldr	r2, [r3, #4]
 8000cec:	4927      	ldr	r1, [pc, #156]	; (8000d8c <HAL_GPIO_Init+0x4b4>)
 8000cee:	69bb      	ldr	r3, [r7, #24]
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	604b      	str	r3, [r1, #4]
 8000cf4:	e006      	b.n	8000d04 <HAL_GPIO_Init+0x42c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000cf6:	4b25      	ldr	r3, [pc, #148]	; (8000d8c <HAL_GPIO_Init+0x4b4>)
 8000cf8:	685a      	ldr	r2, [r3, #4]
 8000cfa:	69bb      	ldr	r3, [r7, #24]
 8000cfc:	43db      	mvns	r3, r3
 8000cfe:	4923      	ldr	r1, [pc, #140]	; (8000d8c <HAL_GPIO_Init+0x4b4>)
 8000d00:	4013      	ands	r3, r2
 8000d02:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d006      	beq.n	8000d1e <HAL_GPIO_Init+0x446>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d10:	4b1e      	ldr	r3, [pc, #120]	; (8000d8c <HAL_GPIO_Init+0x4b4>)
 8000d12:	689a      	ldr	r2, [r3, #8]
 8000d14:	491d      	ldr	r1, [pc, #116]	; (8000d8c <HAL_GPIO_Init+0x4b4>)
 8000d16:	69bb      	ldr	r3, [r7, #24]
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	608b      	str	r3, [r1, #8]
 8000d1c:	e006      	b.n	8000d2c <HAL_GPIO_Init+0x454>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d1e:	4b1b      	ldr	r3, [pc, #108]	; (8000d8c <HAL_GPIO_Init+0x4b4>)
 8000d20:	689a      	ldr	r2, [r3, #8]
 8000d22:	69bb      	ldr	r3, [r7, #24]
 8000d24:	43db      	mvns	r3, r3
 8000d26:	4919      	ldr	r1, [pc, #100]	; (8000d8c <HAL_GPIO_Init+0x4b4>)
 8000d28:	4013      	ands	r3, r2
 8000d2a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d006      	beq.n	8000d46 <HAL_GPIO_Init+0x46e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d38:	4b14      	ldr	r3, [pc, #80]	; (8000d8c <HAL_GPIO_Init+0x4b4>)
 8000d3a:	68da      	ldr	r2, [r3, #12]
 8000d3c:	4913      	ldr	r1, [pc, #76]	; (8000d8c <HAL_GPIO_Init+0x4b4>)
 8000d3e:	69bb      	ldr	r3, [r7, #24]
 8000d40:	4313      	orrs	r3, r2
 8000d42:	60cb      	str	r3, [r1, #12]
 8000d44:	e006      	b.n	8000d54 <HAL_GPIO_Init+0x47c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d46:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <HAL_GPIO_Init+0x4b4>)
 8000d48:	68da      	ldr	r2, [r3, #12]
 8000d4a:	69bb      	ldr	r3, [r7, #24]
 8000d4c:	43db      	mvns	r3, r3
 8000d4e:	490f      	ldr	r1, [pc, #60]	; (8000d8c <HAL_GPIO_Init+0x4b4>)
 8000d50:	4013      	ands	r3, r2
 8000d52:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d56:	3301      	adds	r3, #1
 8000d58:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d60:	fa22 f303 	lsr.w	r3, r2, r3
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	f47f ae2a 	bne.w	80009be <HAL_GPIO_Init+0xe6>
  }
}
 8000d6a:	bf00      	nop
 8000d6c:	bf00      	nop
 8000d6e:	3728      	adds	r7, #40	; 0x28
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	080027b4 	.word	0x080027b4
 8000d78:	40021000 	.word	0x40021000
 8000d7c:	40010000 	.word	0x40010000
 8000d80:	40010800 	.word	0x40010800
 8000d84:	40010c00 	.word	0x40010c00
 8000d88:	40011000 	.word	0x40011000
 8000d8c:	40010400 	.word	0x40010400

08000d90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	460b      	mov	r3, r1
 8000d9a:	807b      	strh	r3, [r7, #2]
 8000d9c:	4613      	mov	r3, r2
 8000d9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8000da0:	887b      	ldrh	r3, [r7, #2]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d004      	beq.n	8000db0 <HAL_GPIO_WritePin+0x20>
 8000da6:	887b      	ldrh	r3, [r7, #2]
 8000da8:	0c1b      	lsrs	r3, r3, #16
 8000daa:	041b      	lsls	r3, r3, #16
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d004      	beq.n	8000dba <HAL_GPIO_WritePin+0x2a>
 8000db0:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8000db4:	480e      	ldr	r0, [pc, #56]	; (8000df0 <HAL_GPIO_WritePin+0x60>)
 8000db6:	f7ff fb1e 	bl	80003f6 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8000dba:	787b      	ldrb	r3, [r7, #1]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d007      	beq.n	8000dd0 <HAL_GPIO_WritePin+0x40>
 8000dc0:	787b      	ldrb	r3, [r7, #1]
 8000dc2:	2b01      	cmp	r3, #1
 8000dc4:	d004      	beq.n	8000dd0 <HAL_GPIO_WritePin+0x40>
 8000dc6:	f240 11d5 	movw	r1, #469	; 0x1d5
 8000dca:	4809      	ldr	r0, [pc, #36]	; (8000df0 <HAL_GPIO_WritePin+0x60>)
 8000dcc:	f7ff fb13 	bl	80003f6 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8000dd0:	787b      	ldrb	r3, [r7, #1]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d003      	beq.n	8000dde <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000dd6:	887a      	ldrh	r2, [r7, #2]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000ddc:	e003      	b.n	8000de6 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000dde:	887b      	ldrh	r3, [r7, #2]
 8000de0:	041a      	lsls	r2, r3, #16
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	611a      	str	r2, [r3, #16]
}
 8000de6:	bf00      	nop
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	080027b4 	.word	0x080027b4

08000df4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	460b      	mov	r3, r1
 8000dfe:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8000e00:	887b      	ldrh	r3, [r7, #2]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d004      	beq.n	8000e10 <HAL_GPIO_TogglePin+0x1c>
 8000e06:	887b      	ldrh	r3, [r7, #2]
 8000e08:	0c1b      	lsrs	r3, r3, #16
 8000e0a:	041b      	lsls	r3, r3, #16
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d004      	beq.n	8000e1a <HAL_GPIO_TogglePin+0x26>
 8000e10:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 8000e14:	480a      	ldr	r0, [pc, #40]	; (8000e40 <HAL_GPIO_TogglePin+0x4c>)
 8000e16:	f7ff faee 	bl	80003f6 <assert_failed>

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	68db      	ldr	r3, [r3, #12]
 8000e1e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000e20:	887a      	ldrh	r2, [r7, #2]
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	4013      	ands	r3, r2
 8000e26:	041a      	lsls	r2, r3, #16
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	43d9      	mvns	r1, r3
 8000e2c:	887b      	ldrh	r3, [r7, #2]
 8000e2e:	400b      	ands	r3, r1
 8000e30:	431a      	orrs	r2, r3
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	611a      	str	r2, [r3, #16]
}
 8000e36:	bf00      	nop
 8000e38:	3710      	adds	r7, #16
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	080027b4 	.word	0x080027b4

08000e44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b086      	sub	sp, #24
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d101      	bne.n	8000e56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e52:	2301      	movs	r3, #1
 8000e54:	e35a      	b.n	800150c <HAL_RCC_OscConfig+0x6c8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d01c      	beq.n	8000e98 <HAL_RCC_OscConfig+0x54>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f003 0301 	and.w	r3, r3, #1
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d116      	bne.n	8000e98 <HAL_RCC_OscConfig+0x54>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f003 0302 	and.w	r3, r3, #2
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d110      	bne.n	8000e98 <HAL_RCC_OscConfig+0x54>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f003 0308 	and.w	r3, r3, #8
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d10a      	bne.n	8000e98 <HAL_RCC_OscConfig+0x54>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f003 0304 	and.w	r3, r3, #4
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d104      	bne.n	8000e98 <HAL_RCC_OscConfig+0x54>
 8000e8e:	f240 1167 	movw	r1, #359	; 0x167
 8000e92:	488f      	ldr	r0, [pc, #572]	; (80010d0 <HAL_RCC_OscConfig+0x28c>)
 8000e94:	f7ff faaf 	bl	80003f6 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f003 0301 	and.w	r3, r3, #1
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	f000 809a 	beq.w	8000fda <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d00e      	beq.n	8000ecc <HAL_RCC_OscConfig+0x88>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000eb6:	d009      	beq.n	8000ecc <HAL_RCC_OscConfig+0x88>
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ec0:	d004      	beq.n	8000ecc <HAL_RCC_OscConfig+0x88>
 8000ec2:	f240 116d 	movw	r1, #365	; 0x16d
 8000ec6:	4882      	ldr	r0, [pc, #520]	; (80010d0 <HAL_RCC_OscConfig+0x28c>)
 8000ec8:	f7ff fa95 	bl	80003f6 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ecc:	4b81      	ldr	r3, [pc, #516]	; (80010d4 <HAL_RCC_OscConfig+0x290>)
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f003 030c 	and.w	r3, r3, #12
 8000ed4:	2b04      	cmp	r3, #4
 8000ed6:	d00c      	beq.n	8000ef2 <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ed8:	4b7e      	ldr	r3, [pc, #504]	; (80010d4 <HAL_RCC_OscConfig+0x290>)
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	f003 030c 	and.w	r3, r3, #12
 8000ee0:	2b08      	cmp	r3, #8
 8000ee2:	d112      	bne.n	8000f0a <HAL_RCC_OscConfig+0xc6>
 8000ee4:	4b7b      	ldr	r3, [pc, #492]	; (80010d4 <HAL_RCC_OscConfig+0x290>)
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ef0:	d10b      	bne.n	8000f0a <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ef2:	4b78      	ldr	r3, [pc, #480]	; (80010d4 <HAL_RCC_OscConfig+0x290>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d06c      	beq.n	8000fd8 <HAL_RCC_OscConfig+0x194>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d168      	bne.n	8000fd8 <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	e300      	b.n	800150c <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f12:	d106      	bne.n	8000f22 <HAL_RCC_OscConfig+0xde>
 8000f14:	4b6f      	ldr	r3, [pc, #444]	; (80010d4 <HAL_RCC_OscConfig+0x290>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a6e      	ldr	r2, [pc, #440]	; (80010d4 <HAL_RCC_OscConfig+0x290>)
 8000f1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f1e:	6013      	str	r3, [r2, #0]
 8000f20:	e02e      	b.n	8000f80 <HAL_RCC_OscConfig+0x13c>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d10c      	bne.n	8000f44 <HAL_RCC_OscConfig+0x100>
 8000f2a:	4b6a      	ldr	r3, [pc, #424]	; (80010d4 <HAL_RCC_OscConfig+0x290>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a69      	ldr	r2, [pc, #420]	; (80010d4 <HAL_RCC_OscConfig+0x290>)
 8000f30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f34:	6013      	str	r3, [r2, #0]
 8000f36:	4b67      	ldr	r3, [pc, #412]	; (80010d4 <HAL_RCC_OscConfig+0x290>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a66      	ldr	r2, [pc, #408]	; (80010d4 <HAL_RCC_OscConfig+0x290>)
 8000f3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f40:	6013      	str	r3, [r2, #0]
 8000f42:	e01d      	b.n	8000f80 <HAL_RCC_OscConfig+0x13c>
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f4c:	d10c      	bne.n	8000f68 <HAL_RCC_OscConfig+0x124>
 8000f4e:	4b61      	ldr	r3, [pc, #388]	; (80010d4 <HAL_RCC_OscConfig+0x290>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a60      	ldr	r2, [pc, #384]	; (80010d4 <HAL_RCC_OscConfig+0x290>)
 8000f54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f58:	6013      	str	r3, [r2, #0]
 8000f5a:	4b5e      	ldr	r3, [pc, #376]	; (80010d4 <HAL_RCC_OscConfig+0x290>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a5d      	ldr	r2, [pc, #372]	; (80010d4 <HAL_RCC_OscConfig+0x290>)
 8000f60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f64:	6013      	str	r3, [r2, #0]
 8000f66:	e00b      	b.n	8000f80 <HAL_RCC_OscConfig+0x13c>
 8000f68:	4b5a      	ldr	r3, [pc, #360]	; (80010d4 <HAL_RCC_OscConfig+0x290>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a59      	ldr	r2, [pc, #356]	; (80010d4 <HAL_RCC_OscConfig+0x290>)
 8000f6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f72:	6013      	str	r3, [r2, #0]
 8000f74:	4b57      	ldr	r3, [pc, #348]	; (80010d4 <HAL_RCC_OscConfig+0x290>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a56      	ldr	r2, [pc, #344]	; (80010d4 <HAL_RCC_OscConfig+0x290>)
 8000f7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f7e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d013      	beq.n	8000fb0 <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f88:	f7ff fb70 	bl	800066c <HAL_GetTick>
 8000f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f8e:	e008      	b.n	8000fa2 <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f90:	f7ff fb6c 	bl	800066c <HAL_GetTick>
 8000f94:	4602      	mov	r2, r0
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	1ad3      	subs	r3, r2, r3
 8000f9a:	2b64      	cmp	r3, #100	; 0x64
 8000f9c:	d901      	bls.n	8000fa2 <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 8000f9e:	2303      	movs	r3, #3
 8000fa0:	e2b4      	b.n	800150c <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fa2:	4b4c      	ldr	r3, [pc, #304]	; (80010d4 <HAL_RCC_OscConfig+0x290>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d0f0      	beq.n	8000f90 <HAL_RCC_OscConfig+0x14c>
 8000fae:	e014      	b.n	8000fda <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fb0:	f7ff fb5c 	bl	800066c <HAL_GetTick>
 8000fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fb6:	e008      	b.n	8000fca <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fb8:	f7ff fb58 	bl	800066c <HAL_GetTick>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	2b64      	cmp	r3, #100	; 0x64
 8000fc4:	d901      	bls.n	8000fca <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000fc6:	2303      	movs	r3, #3
 8000fc8:	e2a0      	b.n	800150c <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fca:	4b42      	ldr	r3, [pc, #264]	; (80010d4 <HAL_RCC_OscConfig+0x290>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d1f0      	bne.n	8000fb8 <HAL_RCC_OscConfig+0x174>
 8000fd6:	e000      	b.n	8000fda <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f003 0302 	and.w	r3, r3, #2
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	f000 8080 	beq.w	80010e8 <HAL_RCC_OscConfig+0x2a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	691b      	ldr	r3, [r3, #16]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d008      	beq.n	8001002 <HAL_RCC_OscConfig+0x1be>
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	691b      	ldr	r3, [r3, #16]
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d004      	beq.n	8001002 <HAL_RCC_OscConfig+0x1be>
 8000ff8:	f240 11a1 	movw	r1, #417	; 0x1a1
 8000ffc:	4834      	ldr	r0, [pc, #208]	; (80010d0 <HAL_RCC_OscConfig+0x28c>)
 8000ffe:	f7ff f9fa 	bl	80003f6 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	695b      	ldr	r3, [r3, #20]
 8001006:	2b1f      	cmp	r3, #31
 8001008:	d904      	bls.n	8001014 <HAL_RCC_OscConfig+0x1d0>
 800100a:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 800100e:	4830      	ldr	r0, [pc, #192]	; (80010d0 <HAL_RCC_OscConfig+0x28c>)
 8001010:	f7ff f9f1 	bl	80003f6 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001014:	4b2f      	ldr	r3, [pc, #188]	; (80010d4 <HAL_RCC_OscConfig+0x290>)
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f003 030c 	and.w	r3, r3, #12
 800101c:	2b00      	cmp	r3, #0
 800101e:	d00b      	beq.n	8001038 <HAL_RCC_OscConfig+0x1f4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001020:	4b2c      	ldr	r3, [pc, #176]	; (80010d4 <HAL_RCC_OscConfig+0x290>)
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f003 030c 	and.w	r3, r3, #12
 8001028:	2b08      	cmp	r3, #8
 800102a:	d11c      	bne.n	8001066 <HAL_RCC_OscConfig+0x222>
 800102c:	4b29      	ldr	r3, [pc, #164]	; (80010d4 <HAL_RCC_OscConfig+0x290>)
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001034:	2b00      	cmp	r3, #0
 8001036:	d116      	bne.n	8001066 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001038:	4b26      	ldr	r3, [pc, #152]	; (80010d4 <HAL_RCC_OscConfig+0x290>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f003 0302 	and.w	r3, r3, #2
 8001040:	2b00      	cmp	r3, #0
 8001042:	d005      	beq.n	8001050 <HAL_RCC_OscConfig+0x20c>
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	691b      	ldr	r3, [r3, #16]
 8001048:	2b01      	cmp	r3, #1
 800104a:	d001      	beq.n	8001050 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800104c:	2301      	movs	r3, #1
 800104e:	e25d      	b.n	800150c <HAL_RCC_OscConfig+0x6c8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001050:	4b20      	ldr	r3, [pc, #128]	; (80010d4 <HAL_RCC_OscConfig+0x290>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	695b      	ldr	r3, [r3, #20]
 800105c:	00db      	lsls	r3, r3, #3
 800105e:	491d      	ldr	r1, [pc, #116]	; (80010d4 <HAL_RCC_OscConfig+0x290>)
 8001060:	4313      	orrs	r3, r2
 8001062:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001064:	e040      	b.n	80010e8 <HAL_RCC_OscConfig+0x2a4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	691b      	ldr	r3, [r3, #16]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d020      	beq.n	80010b0 <HAL_RCC_OscConfig+0x26c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800106e:	4b1a      	ldr	r3, [pc, #104]	; (80010d8 <HAL_RCC_OscConfig+0x294>)
 8001070:	2201      	movs	r2, #1
 8001072:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001074:	f7ff fafa 	bl	800066c <HAL_GetTick>
 8001078:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800107a:	e008      	b.n	800108e <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800107c:	f7ff faf6 	bl	800066c <HAL_GetTick>
 8001080:	4602      	mov	r2, r0
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	2b02      	cmp	r3, #2
 8001088:	d901      	bls.n	800108e <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 800108a:	2303      	movs	r3, #3
 800108c:	e23e      	b.n	800150c <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800108e:	4b11      	ldr	r3, [pc, #68]	; (80010d4 <HAL_RCC_OscConfig+0x290>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f003 0302 	and.w	r3, r3, #2
 8001096:	2b00      	cmp	r3, #0
 8001098:	d0f0      	beq.n	800107c <HAL_RCC_OscConfig+0x238>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800109a:	4b0e      	ldr	r3, [pc, #56]	; (80010d4 <HAL_RCC_OscConfig+0x290>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	695b      	ldr	r3, [r3, #20]
 80010a6:	00db      	lsls	r3, r3, #3
 80010a8:	490a      	ldr	r1, [pc, #40]	; (80010d4 <HAL_RCC_OscConfig+0x290>)
 80010aa:	4313      	orrs	r3, r2
 80010ac:	600b      	str	r3, [r1, #0]
 80010ae:	e01b      	b.n	80010e8 <HAL_RCC_OscConfig+0x2a4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010b0:	4b09      	ldr	r3, [pc, #36]	; (80010d8 <HAL_RCC_OscConfig+0x294>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010b6:	f7ff fad9 	bl	800066c <HAL_GetTick>
 80010ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010bc:	e00e      	b.n	80010dc <HAL_RCC_OscConfig+0x298>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010be:	f7ff fad5 	bl	800066c <HAL_GetTick>
 80010c2:	4602      	mov	r2, r0
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	1ad3      	subs	r3, r2, r3
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	d907      	bls.n	80010dc <HAL_RCC_OscConfig+0x298>
          {
            return HAL_TIMEOUT;
 80010cc:	2303      	movs	r3, #3
 80010ce:	e21d      	b.n	800150c <HAL_RCC_OscConfig+0x6c8>
 80010d0:	080027f0 	.word	0x080027f0
 80010d4:	40021000 	.word	0x40021000
 80010d8:	42420000 	.word	0x42420000
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010dc:	4b7d      	ldr	r3, [pc, #500]	; (80012d4 <HAL_RCC_OscConfig+0x490>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f003 0302 	and.w	r3, r3, #2
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d1ea      	bne.n	80010be <HAL_RCC_OscConfig+0x27a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f003 0308 	and.w	r3, r3, #8
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d040      	beq.n	8001176 <HAL_RCC_OscConfig+0x332>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	699b      	ldr	r3, [r3, #24]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d008      	beq.n	800110e <HAL_RCC_OscConfig+0x2ca>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	699b      	ldr	r3, [r3, #24]
 8001100:	2b01      	cmp	r3, #1
 8001102:	d004      	beq.n	800110e <HAL_RCC_OscConfig+0x2ca>
 8001104:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8001108:	4873      	ldr	r0, [pc, #460]	; (80012d8 <HAL_RCC_OscConfig+0x494>)
 800110a:	f7ff f974 	bl	80003f6 <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	699b      	ldr	r3, [r3, #24]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d019      	beq.n	800114a <HAL_RCC_OscConfig+0x306>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001116:	4b71      	ldr	r3, [pc, #452]	; (80012dc <HAL_RCC_OscConfig+0x498>)
 8001118:	2201      	movs	r2, #1
 800111a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800111c:	f7ff faa6 	bl	800066c <HAL_GetTick>
 8001120:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001122:	e008      	b.n	8001136 <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001124:	f7ff faa2 	bl	800066c <HAL_GetTick>
 8001128:	4602      	mov	r2, r0
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	2b02      	cmp	r3, #2
 8001130:	d901      	bls.n	8001136 <HAL_RCC_OscConfig+0x2f2>
        {
          return HAL_TIMEOUT;
 8001132:	2303      	movs	r3, #3
 8001134:	e1ea      	b.n	800150c <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001136:	4b67      	ldr	r3, [pc, #412]	; (80012d4 <HAL_RCC_OscConfig+0x490>)
 8001138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800113a:	f003 0302 	and.w	r3, r3, #2
 800113e:	2b00      	cmp	r3, #0
 8001140:	d0f0      	beq.n	8001124 <HAL_RCC_OscConfig+0x2e0>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001142:	2001      	movs	r0, #1
 8001144:	f000 fbda 	bl	80018fc <RCC_Delay>
 8001148:	e015      	b.n	8001176 <HAL_RCC_OscConfig+0x332>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800114a:	4b64      	ldr	r3, [pc, #400]	; (80012dc <HAL_RCC_OscConfig+0x498>)
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001150:	f7ff fa8c 	bl	800066c <HAL_GetTick>
 8001154:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001156:	e008      	b.n	800116a <HAL_RCC_OscConfig+0x326>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001158:	f7ff fa88 	bl	800066c <HAL_GetTick>
 800115c:	4602      	mov	r2, r0
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	2b02      	cmp	r3, #2
 8001164:	d901      	bls.n	800116a <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 8001166:	2303      	movs	r3, #3
 8001168:	e1d0      	b.n	800150c <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800116a:	4b5a      	ldr	r3, [pc, #360]	; (80012d4 <HAL_RCC_OscConfig+0x490>)
 800116c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800116e:	f003 0302 	and.w	r3, r3, #2
 8001172:	2b00      	cmp	r3, #0
 8001174:	d1f0      	bne.n	8001158 <HAL_RCC_OscConfig+0x314>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f003 0304 	and.w	r3, r3, #4
 800117e:	2b00      	cmp	r3, #0
 8001180:	f000 80bf 	beq.w	8001302 <HAL_RCC_OscConfig+0x4be>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001184:	2300      	movs	r3, #0
 8001186:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d00c      	beq.n	80011aa <HAL_RCC_OscConfig+0x366>
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	2b01      	cmp	r3, #1
 8001196:	d008      	beq.n	80011aa <HAL_RCC_OscConfig+0x366>
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	2b05      	cmp	r3, #5
 800119e:	d004      	beq.n	80011aa <HAL_RCC_OscConfig+0x366>
 80011a0:	f240 2111 	movw	r1, #529	; 0x211
 80011a4:	484c      	ldr	r0, [pc, #304]	; (80012d8 <HAL_RCC_OscConfig+0x494>)
 80011a6:	f7ff f926 	bl	80003f6 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011aa:	4b4a      	ldr	r3, [pc, #296]	; (80012d4 <HAL_RCC_OscConfig+0x490>)
 80011ac:	69db      	ldr	r3, [r3, #28]
 80011ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d10d      	bne.n	80011d2 <HAL_RCC_OscConfig+0x38e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011b6:	4b47      	ldr	r3, [pc, #284]	; (80012d4 <HAL_RCC_OscConfig+0x490>)
 80011b8:	69db      	ldr	r3, [r3, #28]
 80011ba:	4a46      	ldr	r2, [pc, #280]	; (80012d4 <HAL_RCC_OscConfig+0x490>)
 80011bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011c0:	61d3      	str	r3, [r2, #28]
 80011c2:	4b44      	ldr	r3, [pc, #272]	; (80012d4 <HAL_RCC_OscConfig+0x490>)
 80011c4:	69db      	ldr	r3, [r3, #28]
 80011c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ca:	60bb      	str	r3, [r7, #8]
 80011cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011ce:	2301      	movs	r3, #1
 80011d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011d2:	4b43      	ldr	r3, [pc, #268]	; (80012e0 <HAL_RCC_OscConfig+0x49c>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d118      	bne.n	8001210 <HAL_RCC_OscConfig+0x3cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011de:	4b40      	ldr	r3, [pc, #256]	; (80012e0 <HAL_RCC_OscConfig+0x49c>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a3f      	ldr	r2, [pc, #252]	; (80012e0 <HAL_RCC_OscConfig+0x49c>)
 80011e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011ea:	f7ff fa3f 	bl	800066c <HAL_GetTick>
 80011ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011f0:	e008      	b.n	8001204 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011f2:	f7ff fa3b 	bl	800066c <HAL_GetTick>
 80011f6:	4602      	mov	r2, r0
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	2b64      	cmp	r3, #100	; 0x64
 80011fe:	d901      	bls.n	8001204 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001200:	2303      	movs	r3, #3
 8001202:	e183      	b.n	800150c <HAL_RCC_OscConfig+0x6c8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001204:	4b36      	ldr	r3, [pc, #216]	; (80012e0 <HAL_RCC_OscConfig+0x49c>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800120c:	2b00      	cmp	r3, #0
 800120e:	d0f0      	beq.n	80011f2 <HAL_RCC_OscConfig+0x3ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	2b01      	cmp	r3, #1
 8001216:	d106      	bne.n	8001226 <HAL_RCC_OscConfig+0x3e2>
 8001218:	4b2e      	ldr	r3, [pc, #184]	; (80012d4 <HAL_RCC_OscConfig+0x490>)
 800121a:	6a1b      	ldr	r3, [r3, #32]
 800121c:	4a2d      	ldr	r2, [pc, #180]	; (80012d4 <HAL_RCC_OscConfig+0x490>)
 800121e:	f043 0301 	orr.w	r3, r3, #1
 8001222:	6213      	str	r3, [r2, #32]
 8001224:	e02d      	b.n	8001282 <HAL_RCC_OscConfig+0x43e>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	68db      	ldr	r3, [r3, #12]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d10c      	bne.n	8001248 <HAL_RCC_OscConfig+0x404>
 800122e:	4b29      	ldr	r3, [pc, #164]	; (80012d4 <HAL_RCC_OscConfig+0x490>)
 8001230:	6a1b      	ldr	r3, [r3, #32]
 8001232:	4a28      	ldr	r2, [pc, #160]	; (80012d4 <HAL_RCC_OscConfig+0x490>)
 8001234:	f023 0301 	bic.w	r3, r3, #1
 8001238:	6213      	str	r3, [r2, #32]
 800123a:	4b26      	ldr	r3, [pc, #152]	; (80012d4 <HAL_RCC_OscConfig+0x490>)
 800123c:	6a1b      	ldr	r3, [r3, #32]
 800123e:	4a25      	ldr	r2, [pc, #148]	; (80012d4 <HAL_RCC_OscConfig+0x490>)
 8001240:	f023 0304 	bic.w	r3, r3, #4
 8001244:	6213      	str	r3, [r2, #32]
 8001246:	e01c      	b.n	8001282 <HAL_RCC_OscConfig+0x43e>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	2b05      	cmp	r3, #5
 800124e:	d10c      	bne.n	800126a <HAL_RCC_OscConfig+0x426>
 8001250:	4b20      	ldr	r3, [pc, #128]	; (80012d4 <HAL_RCC_OscConfig+0x490>)
 8001252:	6a1b      	ldr	r3, [r3, #32]
 8001254:	4a1f      	ldr	r2, [pc, #124]	; (80012d4 <HAL_RCC_OscConfig+0x490>)
 8001256:	f043 0304 	orr.w	r3, r3, #4
 800125a:	6213      	str	r3, [r2, #32]
 800125c:	4b1d      	ldr	r3, [pc, #116]	; (80012d4 <HAL_RCC_OscConfig+0x490>)
 800125e:	6a1b      	ldr	r3, [r3, #32]
 8001260:	4a1c      	ldr	r2, [pc, #112]	; (80012d4 <HAL_RCC_OscConfig+0x490>)
 8001262:	f043 0301 	orr.w	r3, r3, #1
 8001266:	6213      	str	r3, [r2, #32]
 8001268:	e00b      	b.n	8001282 <HAL_RCC_OscConfig+0x43e>
 800126a:	4b1a      	ldr	r3, [pc, #104]	; (80012d4 <HAL_RCC_OscConfig+0x490>)
 800126c:	6a1b      	ldr	r3, [r3, #32]
 800126e:	4a19      	ldr	r2, [pc, #100]	; (80012d4 <HAL_RCC_OscConfig+0x490>)
 8001270:	f023 0301 	bic.w	r3, r3, #1
 8001274:	6213      	str	r3, [r2, #32]
 8001276:	4b17      	ldr	r3, [pc, #92]	; (80012d4 <HAL_RCC_OscConfig+0x490>)
 8001278:	6a1b      	ldr	r3, [r3, #32]
 800127a:	4a16      	ldr	r2, [pc, #88]	; (80012d4 <HAL_RCC_OscConfig+0x490>)
 800127c:	f023 0304 	bic.w	r3, r3, #4
 8001280:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	68db      	ldr	r3, [r3, #12]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d015      	beq.n	80012b6 <HAL_RCC_OscConfig+0x472>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800128a:	f7ff f9ef 	bl	800066c <HAL_GetTick>
 800128e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001290:	e00a      	b.n	80012a8 <HAL_RCC_OscConfig+0x464>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001292:	f7ff f9eb 	bl	800066c <HAL_GetTick>
 8001296:	4602      	mov	r2, r0
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	1ad3      	subs	r3, r2, r3
 800129c:	f241 3288 	movw	r2, #5000	; 0x1388
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d901      	bls.n	80012a8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80012a4:	2303      	movs	r3, #3
 80012a6:	e131      	b.n	800150c <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012a8:	4b0a      	ldr	r3, [pc, #40]	; (80012d4 <HAL_RCC_OscConfig+0x490>)
 80012aa:	6a1b      	ldr	r3, [r3, #32]
 80012ac:	f003 0302 	and.w	r3, r3, #2
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d0ee      	beq.n	8001292 <HAL_RCC_OscConfig+0x44e>
 80012b4:	e01c      	b.n	80012f0 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012b6:	f7ff f9d9 	bl	800066c <HAL_GetTick>
 80012ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012bc:	e012      	b.n	80012e4 <HAL_RCC_OscConfig+0x4a0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012be:	f7ff f9d5 	bl	800066c <HAL_GetTick>
 80012c2:	4602      	mov	r2, r0
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d909      	bls.n	80012e4 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 80012d0:	2303      	movs	r3, #3
 80012d2:	e11b      	b.n	800150c <HAL_RCC_OscConfig+0x6c8>
 80012d4:	40021000 	.word	0x40021000
 80012d8:	080027f0 	.word	0x080027f0
 80012dc:	42420480 	.word	0x42420480
 80012e0:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012e4:	4b8b      	ldr	r3, [pc, #556]	; (8001514 <HAL_RCC_OscConfig+0x6d0>)
 80012e6:	6a1b      	ldr	r3, [r3, #32]
 80012e8:	f003 0302 	and.w	r3, r3, #2
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d1e6      	bne.n	80012be <HAL_RCC_OscConfig+0x47a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80012f0:	7dfb      	ldrb	r3, [r7, #23]
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d105      	bne.n	8001302 <HAL_RCC_OscConfig+0x4be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012f6:	4b87      	ldr	r3, [pc, #540]	; (8001514 <HAL_RCC_OscConfig+0x6d0>)
 80012f8:	69db      	ldr	r3, [r3, #28]
 80012fa:	4a86      	ldr	r2, [pc, #536]	; (8001514 <HAL_RCC_OscConfig+0x6d0>)
 80012fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001300:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	69db      	ldr	r3, [r3, #28]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d00c      	beq.n	8001324 <HAL_RCC_OscConfig+0x4e0>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	69db      	ldr	r3, [r3, #28]
 800130e:	2b01      	cmp	r3, #1
 8001310:	d008      	beq.n	8001324 <HAL_RCC_OscConfig+0x4e0>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	69db      	ldr	r3, [r3, #28]
 8001316:	2b02      	cmp	r3, #2
 8001318:	d004      	beq.n	8001324 <HAL_RCC_OscConfig+0x4e0>
 800131a:	f240 21af 	movw	r1, #687	; 0x2af
 800131e:	487e      	ldr	r0, [pc, #504]	; (8001518 <HAL_RCC_OscConfig+0x6d4>)
 8001320:	f7ff f869 	bl	80003f6 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	69db      	ldr	r3, [r3, #28]
 8001328:	2b00      	cmp	r3, #0
 800132a:	f000 80ee 	beq.w	800150a <HAL_RCC_OscConfig+0x6c6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800132e:	4b79      	ldr	r3, [pc, #484]	; (8001514 <HAL_RCC_OscConfig+0x6d0>)
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f003 030c 	and.w	r3, r3, #12
 8001336:	2b08      	cmp	r3, #8
 8001338:	f000 80ce 	beq.w	80014d8 <HAL_RCC_OscConfig+0x694>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	69db      	ldr	r3, [r3, #28]
 8001340:	2b02      	cmp	r3, #2
 8001342:	f040 80b2 	bne.w	80014aa <HAL_RCC_OscConfig+0x666>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6a1b      	ldr	r3, [r3, #32]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d009      	beq.n	8001362 <HAL_RCC_OscConfig+0x51e>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6a1b      	ldr	r3, [r3, #32]
 8001352:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001356:	d004      	beq.n	8001362 <HAL_RCC_OscConfig+0x51e>
 8001358:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 800135c:	486e      	ldr	r0, [pc, #440]	; (8001518 <HAL_RCC_OscConfig+0x6d4>)
 800135e:	f7ff f84a 	bl	80003f6 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001366:	2b00      	cmp	r3, #0
 8001368:	d04a      	beq.n	8001400 <HAL_RCC_OscConfig+0x5bc>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800136e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001372:	d045      	beq.n	8001400 <HAL_RCC_OscConfig+0x5bc>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001378:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800137c:	d040      	beq.n	8001400 <HAL_RCC_OscConfig+0x5bc>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001382:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001386:	d03b      	beq.n	8001400 <HAL_RCC_OscConfig+0x5bc>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800138c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001390:	d036      	beq.n	8001400 <HAL_RCC_OscConfig+0x5bc>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001396:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800139a:	d031      	beq.n	8001400 <HAL_RCC_OscConfig+0x5bc>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a0:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80013a4:	d02c      	beq.n	8001400 <HAL_RCC_OscConfig+0x5bc>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013aa:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80013ae:	d027      	beq.n	8001400 <HAL_RCC_OscConfig+0x5bc>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80013b8:	d022      	beq.n	8001400 <HAL_RCC_OscConfig+0x5bc>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013be:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80013c2:	d01d      	beq.n	8001400 <HAL_RCC_OscConfig+0x5bc>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80013cc:	d018      	beq.n	8001400 <HAL_RCC_OscConfig+0x5bc>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80013d6:	d013      	beq.n	8001400 <HAL_RCC_OscConfig+0x5bc>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013dc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80013e0:	d00e      	beq.n	8001400 <HAL_RCC_OscConfig+0x5bc>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e6:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 80013ea:	d009      	beq.n	8001400 <HAL_RCC_OscConfig+0x5bc>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f0:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 80013f4:	d004      	beq.n	8001400 <HAL_RCC_OscConfig+0x5bc>
 80013f6:	f240 21b9 	movw	r1, #697	; 0x2b9
 80013fa:	4847      	ldr	r0, [pc, #284]	; (8001518 <HAL_RCC_OscConfig+0x6d4>)
 80013fc:	f7fe fffb 	bl	80003f6 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001400:	4b46      	ldr	r3, [pc, #280]	; (800151c <HAL_RCC_OscConfig+0x6d8>)
 8001402:	2200      	movs	r2, #0
 8001404:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001406:	f7ff f931 	bl	800066c <HAL_GetTick>
 800140a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800140c:	e008      	b.n	8001420 <HAL_RCC_OscConfig+0x5dc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800140e:	f7ff f92d 	bl	800066c <HAL_GetTick>
 8001412:	4602      	mov	r2, r0
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	2b02      	cmp	r3, #2
 800141a:	d901      	bls.n	8001420 <HAL_RCC_OscConfig+0x5dc>
          {
            return HAL_TIMEOUT;
 800141c:	2303      	movs	r3, #3
 800141e:	e075      	b.n	800150c <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001420:	4b3c      	ldr	r3, [pc, #240]	; (8001514 <HAL_RCC_OscConfig+0x6d0>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001428:	2b00      	cmp	r3, #0
 800142a:	d1f0      	bne.n	800140e <HAL_RCC_OscConfig+0x5ca>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6a1b      	ldr	r3, [r3, #32]
 8001430:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001434:	d116      	bne.n	8001464 <HAL_RCC_OscConfig+0x620>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d009      	beq.n	8001452 <HAL_RCC_OscConfig+0x60e>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001446:	d004      	beq.n	8001452 <HAL_RCC_OscConfig+0x60e>
 8001448:	f240 21cf 	movw	r1, #719	; 0x2cf
 800144c:	4832      	ldr	r0, [pc, #200]	; (8001518 <HAL_RCC_OscConfig+0x6d4>)
 800144e:	f7fe ffd2 	bl	80003f6 <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001452:	4b30      	ldr	r3, [pc, #192]	; (8001514 <HAL_RCC_OscConfig+0x6d0>)
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	492d      	ldr	r1, [pc, #180]	; (8001514 <HAL_RCC_OscConfig+0x6d0>)
 8001460:	4313      	orrs	r3, r2
 8001462:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001464:	4b2b      	ldr	r3, [pc, #172]	; (8001514 <HAL_RCC_OscConfig+0x6d0>)
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6a19      	ldr	r1, [r3, #32]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001474:	430b      	orrs	r3, r1
 8001476:	4927      	ldr	r1, [pc, #156]	; (8001514 <HAL_RCC_OscConfig+0x6d0>)
 8001478:	4313      	orrs	r3, r2
 800147a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800147c:	4b27      	ldr	r3, [pc, #156]	; (800151c <HAL_RCC_OscConfig+0x6d8>)
 800147e:	2201      	movs	r2, #1
 8001480:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001482:	f7ff f8f3 	bl	800066c <HAL_GetTick>
 8001486:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001488:	e008      	b.n	800149c <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800148a:	f7ff f8ef 	bl	800066c <HAL_GetTick>
 800148e:	4602      	mov	r2, r0
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	2b02      	cmp	r3, #2
 8001496:	d901      	bls.n	800149c <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8001498:	2303      	movs	r3, #3
 800149a:	e037      	b.n	800150c <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800149c:	4b1d      	ldr	r3, [pc, #116]	; (8001514 <HAL_RCC_OscConfig+0x6d0>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d0f0      	beq.n	800148a <HAL_RCC_OscConfig+0x646>
 80014a8:	e02f      	b.n	800150a <HAL_RCC_OscConfig+0x6c6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014aa:	4b1c      	ldr	r3, [pc, #112]	; (800151c <HAL_RCC_OscConfig+0x6d8>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b0:	f7ff f8dc 	bl	800066c <HAL_GetTick>
 80014b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014b6:	e008      	b.n	80014ca <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014b8:	f7ff f8d8 	bl	800066c <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d901      	bls.n	80014ca <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	e020      	b.n	800150c <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014ca:	4b12      	ldr	r3, [pc, #72]	; (8001514 <HAL_RCC_OscConfig+0x6d0>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d1f0      	bne.n	80014b8 <HAL_RCC_OscConfig+0x674>
 80014d6:	e018      	b.n	800150a <HAL_RCC_OscConfig+0x6c6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	69db      	ldr	r3, [r3, #28]
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d101      	bne.n	80014e4 <HAL_RCC_OscConfig+0x6a0>
      {
        return HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	e013      	b.n	800150c <HAL_RCC_OscConfig+0x6c8>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80014e4:	4b0b      	ldr	r3, [pc, #44]	; (8001514 <HAL_RCC_OscConfig+0x6d0>)
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6a1b      	ldr	r3, [r3, #32]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d106      	bne.n	8001506 <HAL_RCC_OscConfig+0x6c2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001502:	429a      	cmp	r2, r3
 8001504:	d001      	beq.n	800150a <HAL_RCC_OscConfig+0x6c6>
        {
          return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e000      	b.n	800150c <HAL_RCC_OscConfig+0x6c8>
        }
      }
    }
  }

  return HAL_OK;
 800150a:	2300      	movs	r3, #0
}
 800150c:	4618      	mov	r0, r3
 800150e:	3718      	adds	r7, #24
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	40021000 	.word	0x40021000
 8001518:	080027f0 	.word	0x080027f0
 800151c:	42420060 	.word	0x42420060

08001520 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d101      	bne.n	8001534 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	e176      	b.n	8001822 <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 0301 	and.w	r3, r3, #1
 800153c:	2b00      	cmp	r3, #0
 800153e:	d116      	bne.n	800156e <HAL_RCC_ClockConfig+0x4e>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 0302 	and.w	r3, r3, #2
 8001548:	2b00      	cmp	r3, #0
 800154a:	d110      	bne.n	800156e <HAL_RCC_ClockConfig+0x4e>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 0304 	and.w	r3, r3, #4
 8001554:	2b00      	cmp	r3, #0
 8001556:	d10a      	bne.n	800156e <HAL_RCC_ClockConfig+0x4e>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 0308 	and.w	r3, r3, #8
 8001560:	2b00      	cmp	r3, #0
 8001562:	d104      	bne.n	800156e <HAL_RCC_ClockConfig+0x4e>
 8001564:	f44f 714e 	mov.w	r1, #824	; 0x338
 8001568:	4874      	ldr	r0, [pc, #464]	; (800173c <HAL_RCC_ClockConfig+0x21c>)
 800156a:	f7fe ff44 	bl	80003f6 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d00a      	beq.n	800158a <HAL_RCC_ClockConfig+0x6a>
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	2b01      	cmp	r3, #1
 8001578:	d007      	beq.n	800158a <HAL_RCC_ClockConfig+0x6a>
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	2b02      	cmp	r3, #2
 800157e:	d004      	beq.n	800158a <HAL_RCC_ClockConfig+0x6a>
 8001580:	f240 3139 	movw	r1, #825	; 0x339
 8001584:	486d      	ldr	r0, [pc, #436]	; (800173c <HAL_RCC_ClockConfig+0x21c>)
 8001586:	f7fe ff36 	bl	80003f6 <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800158a:	4b6d      	ldr	r3, [pc, #436]	; (8001740 <HAL_RCC_ClockConfig+0x220>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0307 	and.w	r3, r3, #7
 8001592:	683a      	ldr	r2, [r7, #0]
 8001594:	429a      	cmp	r2, r3
 8001596:	d910      	bls.n	80015ba <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001598:	4b69      	ldr	r3, [pc, #420]	; (8001740 <HAL_RCC_ClockConfig+0x220>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f023 0207 	bic.w	r2, r3, #7
 80015a0:	4967      	ldr	r1, [pc, #412]	; (8001740 <HAL_RCC_ClockConfig+0x220>)
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015a8:	4b65      	ldr	r3, [pc, #404]	; (8001740 <HAL_RCC_ClockConfig+0x220>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 0307 	and.w	r3, r3, #7
 80015b0:	683a      	ldr	r2, [r7, #0]
 80015b2:	429a      	cmp	r2, r3
 80015b4:	d001      	beq.n	80015ba <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e133      	b.n	8001822 <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 0302 	and.w	r3, r3, #2
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d049      	beq.n	800165a <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 0304 	and.w	r3, r3, #4
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d005      	beq.n	80015de <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015d2:	4b5c      	ldr	r3, [pc, #368]	; (8001744 <HAL_RCC_ClockConfig+0x224>)
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	4a5b      	ldr	r2, [pc, #364]	; (8001744 <HAL_RCC_ClockConfig+0x224>)
 80015d8:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80015dc:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0308 	and.w	r3, r3, #8
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d005      	beq.n	80015f6 <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015ea:	4b56      	ldr	r3, [pc, #344]	; (8001744 <HAL_RCC_ClockConfig+0x224>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	4a55      	ldr	r2, [pc, #340]	; (8001744 <HAL_RCC_ClockConfig+0x224>)
 80015f0:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80015f4:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d024      	beq.n	8001648 <HAL_RCC_ClockConfig+0x128>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	2b80      	cmp	r3, #128	; 0x80
 8001604:	d020      	beq.n	8001648 <HAL_RCC_ClockConfig+0x128>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	2b90      	cmp	r3, #144	; 0x90
 800160c:	d01c      	beq.n	8001648 <HAL_RCC_ClockConfig+0x128>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	2ba0      	cmp	r3, #160	; 0xa0
 8001614:	d018      	beq.n	8001648 <HAL_RCC_ClockConfig+0x128>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	2bb0      	cmp	r3, #176	; 0xb0
 800161c:	d014      	beq.n	8001648 <HAL_RCC_ClockConfig+0x128>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	2bc0      	cmp	r3, #192	; 0xc0
 8001624:	d010      	beq.n	8001648 <HAL_RCC_ClockConfig+0x128>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	2bd0      	cmp	r3, #208	; 0xd0
 800162c:	d00c      	beq.n	8001648 <HAL_RCC_ClockConfig+0x128>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	2be0      	cmp	r3, #224	; 0xe0
 8001634:	d008      	beq.n	8001648 <HAL_RCC_ClockConfig+0x128>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	2bf0      	cmp	r3, #240	; 0xf0
 800163c:	d004      	beq.n	8001648 <HAL_RCC_ClockConfig+0x128>
 800163e:	f240 315f 	movw	r1, #863	; 0x35f
 8001642:	483e      	ldr	r0, [pc, #248]	; (800173c <HAL_RCC_ClockConfig+0x21c>)
 8001644:	f7fe fed7 	bl	80003f6 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001648:	4b3e      	ldr	r3, [pc, #248]	; (8001744 <HAL_RCC_ClockConfig+0x224>)
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	493b      	ldr	r1, [pc, #236]	; (8001744 <HAL_RCC_ClockConfig+0x224>)
 8001656:	4313      	orrs	r3, r2
 8001658:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 0301 	and.w	r3, r3, #1
 8001662:	2b00      	cmp	r3, #0
 8001664:	d051      	beq.n	800170a <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d00c      	beq.n	8001688 <HAL_RCC_ClockConfig+0x168>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	2b01      	cmp	r3, #1
 8001674:	d008      	beq.n	8001688 <HAL_RCC_ClockConfig+0x168>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	2b02      	cmp	r3, #2
 800167c:	d004      	beq.n	8001688 <HAL_RCC_ClockConfig+0x168>
 800167e:	f240 3166 	movw	r1, #870	; 0x366
 8001682:	482e      	ldr	r0, [pc, #184]	; (800173c <HAL_RCC_ClockConfig+0x21c>)
 8001684:	f7fe feb7 	bl	80003f6 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	2b01      	cmp	r3, #1
 800168e:	d107      	bne.n	80016a0 <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001690:	4b2c      	ldr	r3, [pc, #176]	; (8001744 <HAL_RCC_ClockConfig+0x224>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d115      	bne.n	80016c8 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	e0c0      	b.n	8001822 <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d107      	bne.n	80016b8 <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016a8:	4b26      	ldr	r3, [pc, #152]	; (8001744 <HAL_RCC_ClockConfig+0x224>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d109      	bne.n	80016c8 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e0b4      	b.n	8001822 <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016b8:	4b22      	ldr	r3, [pc, #136]	; (8001744 <HAL_RCC_ClockConfig+0x224>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0302 	and.w	r3, r3, #2
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d101      	bne.n	80016c8 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 80016c4:	2301      	movs	r3, #1
 80016c6:	e0ac      	b.n	8001822 <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016c8:	4b1e      	ldr	r3, [pc, #120]	; (8001744 <HAL_RCC_ClockConfig+0x224>)
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f023 0203 	bic.w	r2, r3, #3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	491b      	ldr	r1, [pc, #108]	; (8001744 <HAL_RCC_ClockConfig+0x224>)
 80016d6:	4313      	orrs	r3, r2
 80016d8:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016da:	f7fe ffc7 	bl	800066c <HAL_GetTick>
 80016de:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016e0:	e00a      	b.n	80016f8 <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016e2:	f7fe ffc3 	bl	800066c <HAL_GetTick>
 80016e6:	4602      	mov	r2, r0
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d901      	bls.n	80016f8 <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 80016f4:	2303      	movs	r3, #3
 80016f6:	e094      	b.n	8001822 <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016f8:	4b12      	ldr	r3, [pc, #72]	; (8001744 <HAL_RCC_ClockConfig+0x224>)
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f003 020c 	and.w	r2, r3, #12
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	429a      	cmp	r2, r3
 8001708:	d1eb      	bne.n	80016e2 <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800170a:	4b0d      	ldr	r3, [pc, #52]	; (8001740 <HAL_RCC_ClockConfig+0x220>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0307 	and.w	r3, r3, #7
 8001712:	683a      	ldr	r2, [r7, #0]
 8001714:	429a      	cmp	r2, r3
 8001716:	d217      	bcs.n	8001748 <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001718:	4b09      	ldr	r3, [pc, #36]	; (8001740 <HAL_RCC_ClockConfig+0x220>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f023 0207 	bic.w	r2, r3, #7
 8001720:	4907      	ldr	r1, [pc, #28]	; (8001740 <HAL_RCC_ClockConfig+0x220>)
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	4313      	orrs	r3, r2
 8001726:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001728:	4b05      	ldr	r3, [pc, #20]	; (8001740 <HAL_RCC_ClockConfig+0x220>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0307 	and.w	r3, r3, #7
 8001730:	683a      	ldr	r2, [r7, #0]
 8001732:	429a      	cmp	r2, r3
 8001734:	d008      	beq.n	8001748 <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e073      	b.n	8001822 <HAL_RCC_ClockConfig+0x302>
 800173a:	bf00      	nop
 800173c:	080027f0 	.word	0x080027f0
 8001740:	40022000 	.word	0x40022000
 8001744:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0304 	and.w	r3, r3, #4
 8001750:	2b00      	cmp	r3, #0
 8001752:	d025      	beq.n	80017a0 <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d018      	beq.n	800178e <HAL_RCC_ClockConfig+0x26e>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001764:	d013      	beq.n	800178e <HAL_RCC_ClockConfig+0x26e>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	68db      	ldr	r3, [r3, #12]
 800176a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800176e:	d00e      	beq.n	800178e <HAL_RCC_ClockConfig+0x26e>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8001778:	d009      	beq.n	800178e <HAL_RCC_ClockConfig+0x26e>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	68db      	ldr	r3, [r3, #12]
 800177e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001782:	d004      	beq.n	800178e <HAL_RCC_ClockConfig+0x26e>
 8001784:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 8001788:	4828      	ldr	r0, [pc, #160]	; (800182c <HAL_RCC_ClockConfig+0x30c>)
 800178a:	f7fe fe34 	bl	80003f6 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800178e:	4b28      	ldr	r3, [pc, #160]	; (8001830 <HAL_RCC_ClockConfig+0x310>)
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	68db      	ldr	r3, [r3, #12]
 800179a:	4925      	ldr	r1, [pc, #148]	; (8001830 <HAL_RCC_ClockConfig+0x310>)
 800179c:	4313      	orrs	r3, r2
 800179e:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0308 	and.w	r3, r3, #8
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d026      	beq.n	80017fa <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	691b      	ldr	r3, [r3, #16]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d018      	beq.n	80017e6 <HAL_RCC_ClockConfig+0x2c6>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	691b      	ldr	r3, [r3, #16]
 80017b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017bc:	d013      	beq.n	80017e6 <HAL_RCC_ClockConfig+0x2c6>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	691b      	ldr	r3, [r3, #16]
 80017c2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80017c6:	d00e      	beq.n	80017e6 <HAL_RCC_ClockConfig+0x2c6>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	691b      	ldr	r3, [r3, #16]
 80017cc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80017d0:	d009      	beq.n	80017e6 <HAL_RCC_ClockConfig+0x2c6>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	691b      	ldr	r3, [r3, #16]
 80017d6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80017da:	d004      	beq.n	80017e6 <HAL_RCC_ClockConfig+0x2c6>
 80017dc:	f240 31ab 	movw	r1, #939	; 0x3ab
 80017e0:	4812      	ldr	r0, [pc, #72]	; (800182c <HAL_RCC_ClockConfig+0x30c>)
 80017e2:	f7fe fe08 	bl	80003f6 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80017e6:	4b12      	ldr	r3, [pc, #72]	; (8001830 <HAL_RCC_ClockConfig+0x310>)
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	691b      	ldr	r3, [r3, #16]
 80017f2:	00db      	lsls	r3, r3, #3
 80017f4:	490e      	ldr	r1, [pc, #56]	; (8001830 <HAL_RCC_ClockConfig+0x310>)
 80017f6:	4313      	orrs	r3, r2
 80017f8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80017fa:	f000 f821 	bl	8001840 <HAL_RCC_GetSysClockFreq>
 80017fe:	4602      	mov	r2, r0
 8001800:	4b0b      	ldr	r3, [pc, #44]	; (8001830 <HAL_RCC_ClockConfig+0x310>)
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	091b      	lsrs	r3, r3, #4
 8001806:	f003 030f 	and.w	r3, r3, #15
 800180a:	490a      	ldr	r1, [pc, #40]	; (8001834 <HAL_RCC_ClockConfig+0x314>)
 800180c:	5ccb      	ldrb	r3, [r1, r3]
 800180e:	fa22 f303 	lsr.w	r3, r2, r3
 8001812:	4a09      	ldr	r2, [pc, #36]	; (8001838 <HAL_RCC_ClockConfig+0x318>)
 8001814:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001816:	4b09      	ldr	r3, [pc, #36]	; (800183c <HAL_RCC_ClockConfig+0x31c>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4618      	mov	r0, r3
 800181c:	f7fe fee4 	bl	80005e8 <HAL_InitTick>

  return HAL_OK;
 8001820:	2300      	movs	r3, #0
}
 8001822:	4618      	mov	r0, r3
 8001824:	3710      	adds	r7, #16
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	080027f0 	.word	0x080027f0
 8001830:	40021000 	.word	0x40021000
 8001834:	080028ac 	.word	0x080028ac
 8001838:	20000000 	.word	0x20000000
 800183c:	20000004 	.word	0x20000004

08001840 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001840:	b490      	push	{r4, r7}
 8001842:	b08a      	sub	sp, #40	; 0x28
 8001844:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001846:	4b29      	ldr	r3, [pc, #164]	; (80018ec <HAL_RCC_GetSysClockFreq+0xac>)
 8001848:	1d3c      	adds	r4, r7, #4
 800184a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800184c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001850:	f240 2301 	movw	r3, #513	; 0x201
 8001854:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001856:	2300      	movs	r3, #0
 8001858:	61fb      	str	r3, [r7, #28]
 800185a:	2300      	movs	r3, #0
 800185c:	61bb      	str	r3, [r7, #24]
 800185e:	2300      	movs	r3, #0
 8001860:	627b      	str	r3, [r7, #36]	; 0x24
 8001862:	2300      	movs	r3, #0
 8001864:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001866:	2300      	movs	r3, #0
 8001868:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800186a:	4b21      	ldr	r3, [pc, #132]	; (80018f0 <HAL_RCC_GetSysClockFreq+0xb0>)
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	f003 030c 	and.w	r3, r3, #12
 8001876:	2b04      	cmp	r3, #4
 8001878:	d002      	beq.n	8001880 <HAL_RCC_GetSysClockFreq+0x40>
 800187a:	2b08      	cmp	r3, #8
 800187c:	d003      	beq.n	8001886 <HAL_RCC_GetSysClockFreq+0x46>
 800187e:	e02b      	b.n	80018d8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001880:	4b1c      	ldr	r3, [pc, #112]	; (80018f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001882:	623b      	str	r3, [r7, #32]
      break;
 8001884:	e02b      	b.n	80018de <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	0c9b      	lsrs	r3, r3, #18
 800188a:	f003 030f 	and.w	r3, r3, #15
 800188e:	3328      	adds	r3, #40	; 0x28
 8001890:	443b      	add	r3, r7
 8001892:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001896:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d012      	beq.n	80018c8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80018a2:	4b13      	ldr	r3, [pc, #76]	; (80018f0 <HAL_RCC_GetSysClockFreq+0xb0>)
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	0c5b      	lsrs	r3, r3, #17
 80018a8:	f003 0301 	and.w	r3, r3, #1
 80018ac:	3328      	adds	r3, #40	; 0x28
 80018ae:	443b      	add	r3, r7
 80018b0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80018b4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	4a0e      	ldr	r2, [pc, #56]	; (80018f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80018ba:	fb03 f202 	mul.w	r2, r3, r2
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80018c4:	627b      	str	r3, [r7, #36]	; 0x24
 80018c6:	e004      	b.n	80018d2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	4a0b      	ldr	r2, [pc, #44]	; (80018f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80018cc:	fb02 f303 	mul.w	r3, r2, r3
 80018d0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80018d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d4:	623b      	str	r3, [r7, #32]
      break;
 80018d6:	e002      	b.n	80018de <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80018d8:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80018da:	623b      	str	r3, [r7, #32]
      break;
 80018dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018de:	6a3b      	ldr	r3, [r7, #32]
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3728      	adds	r7, #40	; 0x28
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bc90      	pop	{r4, r7}
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	08002828 	.word	0x08002828
 80018f0:	40021000 	.word	0x40021000
 80018f4:	007a1200 	.word	0x007a1200
 80018f8:	003d0900 	.word	0x003d0900

080018fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b085      	sub	sp, #20
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001904:	4b0a      	ldr	r3, [pc, #40]	; (8001930 <RCC_Delay+0x34>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a0a      	ldr	r2, [pc, #40]	; (8001934 <RCC_Delay+0x38>)
 800190a:	fba2 2303 	umull	r2, r3, r2, r3
 800190e:	0a5b      	lsrs	r3, r3, #9
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	fb02 f303 	mul.w	r3, r2, r3
 8001916:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001918:	bf00      	nop
  }
  while (Delay --);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	1e5a      	subs	r2, r3, #1
 800191e:	60fa      	str	r2, [r7, #12]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d1f9      	bne.n	8001918 <RCC_Delay+0x1c>
}
 8001924:	bf00      	nop
 8001926:	bf00      	nop
 8001928:	3714      	adds	r7, #20
 800192a:	46bd      	mov	sp, r7
 800192c:	bc80      	pop	{r7}
 800192e:	4770      	bx	lr
 8001930:	20000000 	.word	0x20000000
 8001934:	10624dd3 	.word	0x10624dd3

08001938 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d101      	bne.n	800194a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e08e      	b.n	8001a68 <HAL_TIM_PWM_Init+0x130>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a48      	ldr	r2, [pc, #288]	; (8001a70 <HAL_TIM_PWM_Init+0x138>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d00e      	beq.n	8001972 <HAL_TIM_PWM_Init+0x3a>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800195c:	d009      	beq.n	8001972 <HAL_TIM_PWM_Init+0x3a>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a44      	ldr	r2, [pc, #272]	; (8001a74 <HAL_TIM_PWM_Init+0x13c>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d004      	beq.n	8001972 <HAL_TIM_PWM_Init+0x3a>
 8001968:	f240 5113 	movw	r1, #1299	; 0x513
 800196c:	4842      	ldr	r0, [pc, #264]	; (8001a78 <HAL_TIM_PWM_Init+0x140>)
 800196e:	f7fe fd42 	bl	80003f6 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d014      	beq.n	80019a4 <HAL_TIM_PWM_Init+0x6c>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	2b10      	cmp	r3, #16
 8001980:	d010      	beq.n	80019a4 <HAL_TIM_PWM_Init+0x6c>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	2b20      	cmp	r3, #32
 8001988:	d00c      	beq.n	80019a4 <HAL_TIM_PWM_Init+0x6c>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	2b40      	cmp	r3, #64	; 0x40
 8001990:	d008      	beq.n	80019a4 <HAL_TIM_PWM_Init+0x6c>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	2b60      	cmp	r3, #96	; 0x60
 8001998:	d004      	beq.n	80019a4 <HAL_TIM_PWM_Init+0x6c>
 800199a:	f240 5114 	movw	r1, #1300	; 0x514
 800199e:	4836      	ldr	r0, [pc, #216]	; (8001a78 <HAL_TIM_PWM_Init+0x140>)
 80019a0:	f7fe fd29 	bl	80003f6 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	691b      	ldr	r3, [r3, #16]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d00e      	beq.n	80019ca <HAL_TIM_PWM_Init+0x92>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	691b      	ldr	r3, [r3, #16]
 80019b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019b4:	d009      	beq.n	80019ca <HAL_TIM_PWM_Init+0x92>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	691b      	ldr	r3, [r3, #16]
 80019ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019be:	d004      	beq.n	80019ca <HAL_TIM_PWM_Init+0x92>
 80019c0:	f240 5115 	movw	r1, #1301	; 0x515
 80019c4:	482c      	ldr	r0, [pc, #176]	; (8001a78 <HAL_TIM_PWM_Init+0x140>)
 80019c6:	f7fe fd16 	bl	80003f6 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	699b      	ldr	r3, [r3, #24]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d008      	beq.n	80019e4 <HAL_TIM_PWM_Init+0xac>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	699b      	ldr	r3, [r3, #24]
 80019d6:	2b80      	cmp	r3, #128	; 0x80
 80019d8:	d004      	beq.n	80019e4 <HAL_TIM_PWM_Init+0xac>
 80019da:	f240 5116 	movw	r1, #1302	; 0x516
 80019de:	4826      	ldr	r0, [pc, #152]	; (8001a78 <HAL_TIM_PWM_Init+0x140>)
 80019e0:	f7fe fd09 	bl	80003f6 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d106      	bne.n	80019fe <HAL_TIM_PWM_Init+0xc6>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2200      	movs	r2, #0
 80019f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f7fe fd39 	bl	8000470 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2202      	movs	r2, #2
 8001a02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	3304      	adds	r3, #4
 8001a0e:	4619      	mov	r1, r3
 8001a10:	4610      	mov	r0, r2
 8001a12:	f000 fa59 	bl	8001ec8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2201      	movs	r2, #1
 8001a1a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2201      	movs	r2, #1
 8001a22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2201      	movs	r2, #1
 8001a2a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2201      	movs	r2, #1
 8001a32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2201      	movs	r2, #1
 8001a3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2201      	movs	r2, #1
 8001a42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2201      	movs	r2, #1
 8001a4a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2201      	movs	r2, #1
 8001a52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2201      	movs	r2, #1
 8001a5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2201      	movs	r2, #1
 8001a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a66:	2300      	movs	r3, #0
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3708      	adds	r7, #8
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	40012c00 	.word	0x40012c00
 8001a74:	40000400 	.word	0x40000400
 8001a78:	08002838 	.word	0x08002838

08001a7c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a64      	ldr	r2, [pc, #400]	; (8001c1c <HAL_TIM_PWM_Start+0x1a0>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d10b      	bne.n	8001aa8 <HAL_TIM_PWM_Start+0x2c>
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d02f      	beq.n	8001af6 <HAL_TIM_PWM_Start+0x7a>
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	2b04      	cmp	r3, #4
 8001a9a:	d02c      	beq.n	8001af6 <HAL_TIM_PWM_Start+0x7a>
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	2b08      	cmp	r3, #8
 8001aa0:	d029      	beq.n	8001af6 <HAL_TIM_PWM_Start+0x7a>
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	2b0c      	cmp	r3, #12
 8001aa6:	d026      	beq.n	8001af6 <HAL_TIM_PWM_Start+0x7a>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ab0:	d10b      	bne.n	8001aca <HAL_TIM_PWM_Start+0x4e>
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d01e      	beq.n	8001af6 <HAL_TIM_PWM_Start+0x7a>
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	2b04      	cmp	r3, #4
 8001abc:	d01b      	beq.n	8001af6 <HAL_TIM_PWM_Start+0x7a>
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	2b08      	cmp	r3, #8
 8001ac2:	d018      	beq.n	8001af6 <HAL_TIM_PWM_Start+0x7a>
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	2b0c      	cmp	r3, #12
 8001ac8:	d015      	beq.n	8001af6 <HAL_TIM_PWM_Start+0x7a>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a54      	ldr	r2, [pc, #336]	; (8001c20 <HAL_TIM_PWM_Start+0x1a4>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d10b      	bne.n	8001aec <HAL_TIM_PWM_Start+0x70>
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d00d      	beq.n	8001af6 <HAL_TIM_PWM_Start+0x7a>
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	2b04      	cmp	r3, #4
 8001ade:	d00a      	beq.n	8001af6 <HAL_TIM_PWM_Start+0x7a>
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	2b08      	cmp	r3, #8
 8001ae4:	d007      	beq.n	8001af6 <HAL_TIM_PWM_Start+0x7a>
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	2b0c      	cmp	r3, #12
 8001aea:	d004      	beq.n	8001af6 <HAL_TIM_PWM_Start+0x7a>
 8001aec:	f240 5199 	movw	r1, #1433	; 0x599
 8001af0:	484c      	ldr	r0, [pc, #304]	; (8001c24 <HAL_TIM_PWM_Start+0x1a8>)
 8001af2:	f7fe fc80 	bl	80003f6 <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d109      	bne.n	8001b10 <HAL_TIM_PWM_Start+0x94>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	bf14      	ite	ne
 8001b08:	2301      	movne	r3, #1
 8001b0a:	2300      	moveq	r3, #0
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	e022      	b.n	8001b56 <HAL_TIM_PWM_Start+0xda>
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	2b04      	cmp	r3, #4
 8001b14:	d109      	bne.n	8001b2a <HAL_TIM_PWM_Start+0xae>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	bf14      	ite	ne
 8001b22:	2301      	movne	r3, #1
 8001b24:	2300      	moveq	r3, #0
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	e015      	b.n	8001b56 <HAL_TIM_PWM_Start+0xda>
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	2b08      	cmp	r3, #8
 8001b2e:	d109      	bne.n	8001b44 <HAL_TIM_PWM_Start+0xc8>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	bf14      	ite	ne
 8001b3c:	2301      	movne	r3, #1
 8001b3e:	2300      	moveq	r3, #0
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	e008      	b.n	8001b56 <HAL_TIM_PWM_Start+0xda>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	bf14      	ite	ne
 8001b50:	2301      	movne	r3, #1
 8001b52:	2300      	moveq	r3, #0
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <HAL_TIM_PWM_Start+0xe2>
  {
    return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e059      	b.n	8001c12 <HAL_TIM_PWM_Start+0x196>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d104      	bne.n	8001b6e <HAL_TIM_PWM_Start+0xf2>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2202      	movs	r2, #2
 8001b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b6c:	e013      	b.n	8001b96 <HAL_TIM_PWM_Start+0x11a>
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	2b04      	cmp	r3, #4
 8001b72:	d104      	bne.n	8001b7e <HAL_TIM_PWM_Start+0x102>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2202      	movs	r2, #2
 8001b78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b7c:	e00b      	b.n	8001b96 <HAL_TIM_PWM_Start+0x11a>
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	2b08      	cmp	r3, #8
 8001b82:	d104      	bne.n	8001b8e <HAL_TIM_PWM_Start+0x112>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2202      	movs	r2, #2
 8001b88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b8c:	e003      	b.n	8001b96 <HAL_TIM_PWM_Start+0x11a>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2202      	movs	r2, #2
 8001b92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	6839      	ldr	r1, [r7, #0]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f000 fc00 	bl	80023a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a1c      	ldr	r2, [pc, #112]	; (8001c1c <HAL_TIM_PWM_Start+0x1a0>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d107      	bne.n	8001bbe <HAL_TIM_PWM_Start+0x142>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001bbc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a16      	ldr	r2, [pc, #88]	; (8001c1c <HAL_TIM_PWM_Start+0x1a0>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d009      	beq.n	8001bdc <HAL_TIM_PWM_Start+0x160>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bd0:	d004      	beq.n	8001bdc <HAL_TIM_PWM_Start+0x160>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a12      	ldr	r2, [pc, #72]	; (8001c20 <HAL_TIM_PWM_Start+0x1a4>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d111      	bne.n	8001c00 <HAL_TIM_PWM_Start+0x184>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	f003 0307 	and.w	r3, r3, #7
 8001be6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2b06      	cmp	r3, #6
 8001bec:	d010      	beq.n	8001c10 <HAL_TIM_PWM_Start+0x194>
    {
      __HAL_TIM_ENABLE(htim);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f042 0201 	orr.w	r2, r2, #1
 8001bfc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bfe:	e007      	b.n	8001c10 <HAL_TIM_PWM_Start+0x194>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f042 0201 	orr.w	r2, r2, #1
 8001c0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3710      	adds	r7, #16
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	40012c00 	.word	0x40012c00
 8001c20:	40000400 	.word	0x40000400
 8001c24:	08002838 	.word	0x08002838

08001c28 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d010      	beq.n	8001c5c <HAL_TIM_PWM_ConfigChannel+0x34>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2b04      	cmp	r3, #4
 8001c3e:	d00d      	beq.n	8001c5c <HAL_TIM_PWM_ConfigChannel+0x34>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2b08      	cmp	r3, #8
 8001c44:	d00a      	beq.n	8001c5c <HAL_TIM_PWM_ConfigChannel+0x34>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2b0c      	cmp	r3, #12
 8001c4a:	d007      	beq.n	8001c5c <HAL_TIM_PWM_ConfigChannel+0x34>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2b3c      	cmp	r3, #60	; 0x3c
 8001c50:	d004      	beq.n	8001c5c <HAL_TIM_PWM_ConfigChannel+0x34>
 8001c52:	f241 0127 	movw	r1, #4135	; 0x1027
 8001c56:	4899      	ldr	r0, [pc, #612]	; (8001ebc <HAL_TIM_PWM_ConfigChannel+0x294>)
 8001c58:	f7fe fbcd 	bl	80003f6 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	2b60      	cmp	r3, #96	; 0x60
 8001c62:	d008      	beq.n	8001c76 <HAL_TIM_PWM_ConfigChannel+0x4e>
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2b70      	cmp	r3, #112	; 0x70
 8001c6a:	d004      	beq.n	8001c76 <HAL_TIM_PWM_ConfigChannel+0x4e>
 8001c6c:	f241 0128 	movw	r1, #4136	; 0x1028
 8001c70:	4892      	ldr	r0, [pc, #584]	; (8001ebc <HAL_TIM_PWM_ConfigChannel+0x294>)
 8001c72:	f7fe fbc0 	bl	80003f6 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d008      	beq.n	8001c90 <HAL_TIM_PWM_ConfigChannel+0x68>
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d004      	beq.n	8001c90 <HAL_TIM_PWM_ConfigChannel+0x68>
 8001c86:	f241 0129 	movw	r1, #4137	; 0x1029
 8001c8a:	488c      	ldr	r0, [pc, #560]	; (8001ebc <HAL_TIM_PWM_ConfigChannel+0x294>)
 8001c8c:	f7fe fbb3 	bl	80003f6 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	691b      	ldr	r3, [r3, #16]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d008      	beq.n	8001caa <HAL_TIM_PWM_ConfigChannel+0x82>
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	691b      	ldr	r3, [r3, #16]
 8001c9c:	2b04      	cmp	r3, #4
 8001c9e:	d004      	beq.n	8001caa <HAL_TIM_PWM_ConfigChannel+0x82>
 8001ca0:	f241 012a 	movw	r1, #4138	; 0x102a
 8001ca4:	4885      	ldr	r0, [pc, #532]	; (8001ebc <HAL_TIM_PWM_ConfigChannel+0x294>)
 8001ca6:	f7fe fba6 	bl	80003f6 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d101      	bne.n	8001cb8 <HAL_TIM_PWM_ConfigChannel+0x90>
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	e0fd      	b.n	8001eb4 <HAL_TIM_PWM_ConfigChannel+0x28c>
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2b0c      	cmp	r3, #12
 8001cc4:	f200 80f0 	bhi.w	8001ea8 <HAL_TIM_PWM_ConfigChannel+0x280>
 8001cc8:	a201      	add	r2, pc, #4	; (adr r2, 8001cd0 <HAL_TIM_PWM_ConfigChannel+0xa8>)
 8001cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cce:	bf00      	nop
 8001cd0:	08001d05 	.word	0x08001d05
 8001cd4:	08001ea9 	.word	0x08001ea9
 8001cd8:	08001ea9 	.word	0x08001ea9
 8001cdc:	08001ea9 	.word	0x08001ea9
 8001ce0:	08001d6d 	.word	0x08001d6d
 8001ce4:	08001ea9 	.word	0x08001ea9
 8001ce8:	08001ea9 	.word	0x08001ea9
 8001cec:	08001ea9 	.word	0x08001ea9
 8001cf0:	08001dd7 	.word	0x08001dd7
 8001cf4:	08001ea9 	.word	0x08001ea9
 8001cf8:	08001ea9 	.word	0x08001ea9
 8001cfc:	08001ea9 	.word	0x08001ea9
 8001d00:	08001e3f 	.word	0x08001e3f
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a6d      	ldr	r2, [pc, #436]	; (8001ec0 <HAL_TIM_PWM_ConfigChannel+0x298>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d00e      	beq.n	8001d2c <HAL_TIM_PWM_ConfigChannel+0x104>
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d16:	d009      	beq.n	8001d2c <HAL_TIM_PWM_ConfigChannel+0x104>
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a69      	ldr	r2, [pc, #420]	; (8001ec4 <HAL_TIM_PWM_ConfigChannel+0x29c>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d004      	beq.n	8001d2c <HAL_TIM_PWM_ConfigChannel+0x104>
 8001d22:	f241 0134 	movw	r1, #4148	; 0x1034
 8001d26:	4865      	ldr	r0, [pc, #404]	; (8001ebc <HAL_TIM_PWM_ConfigChannel+0x294>)
 8001d28:	f7fe fb65 	bl	80003f6 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	68b9      	ldr	r1, [r7, #8]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f000 f920 	bl	8001f78 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	699a      	ldr	r2, [r3, #24]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f042 0208 	orr.w	r2, r2, #8
 8001d46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	699a      	ldr	r2, [r3, #24]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f022 0204 	bic.w	r2, r2, #4
 8001d56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	6999      	ldr	r1, [r3, #24]
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	691a      	ldr	r2, [r3, #16]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	430a      	orrs	r2, r1
 8001d68:	619a      	str	r2, [r3, #24]
      break;
 8001d6a:	e09e      	b.n	8001eaa <HAL_TIM_PWM_ConfigChannel+0x282>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a53      	ldr	r2, [pc, #332]	; (8001ec0 <HAL_TIM_PWM_ConfigChannel+0x298>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d00e      	beq.n	8001d94 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d7e:	d009      	beq.n	8001d94 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a4f      	ldr	r2, [pc, #316]	; (8001ec4 <HAL_TIM_PWM_ConfigChannel+0x29c>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d004      	beq.n	8001d94 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001d8a:	f241 0145 	movw	r1, #4165	; 0x1045
 8001d8e:	484b      	ldr	r0, [pc, #300]	; (8001ebc <HAL_TIM_PWM_ConfigChannel+0x294>)
 8001d90:	f7fe fb31 	bl	80003f6 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	68b9      	ldr	r1, [r7, #8]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f000 f97c 	bl	8002098 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	699a      	ldr	r2, [r3, #24]
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001dae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	699a      	ldr	r2, [r3, #24]
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	6999      	ldr	r1, [r3, #24]
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	691b      	ldr	r3, [r3, #16]
 8001dca:	021a      	lsls	r2, r3, #8
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	430a      	orrs	r2, r1
 8001dd2:	619a      	str	r2, [r3, #24]
      break;
 8001dd4:	e069      	b.n	8001eaa <HAL_TIM_PWM_ConfigChannel+0x282>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a39      	ldr	r2, [pc, #228]	; (8001ec0 <HAL_TIM_PWM_ConfigChannel+0x298>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d00e      	beq.n	8001dfe <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001de8:	d009      	beq.n	8001dfe <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a35      	ldr	r2, [pc, #212]	; (8001ec4 <HAL_TIM_PWM_ConfigChannel+0x29c>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d004      	beq.n	8001dfe <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8001df4:	f241 0156 	movw	r1, #4182	; 0x1056
 8001df8:	4830      	ldr	r0, [pc, #192]	; (8001ebc <HAL_TIM_PWM_ConfigChannel+0x294>)
 8001dfa:	f7fe fafc 	bl	80003f6 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	68b9      	ldr	r1, [r7, #8]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f000 f9db 	bl	80021c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	69da      	ldr	r2, [r3, #28]
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f042 0208 	orr.w	r2, r2, #8
 8001e18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	69da      	ldr	r2, [r3, #28]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f022 0204 	bic.w	r2, r2, #4
 8001e28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	69d9      	ldr	r1, [r3, #28]
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	691a      	ldr	r2, [r3, #16]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	430a      	orrs	r2, r1
 8001e3a:	61da      	str	r2, [r3, #28]
      break;
 8001e3c:	e035      	b.n	8001eaa <HAL_TIM_PWM_ConfigChannel+0x282>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a1f      	ldr	r2, [pc, #124]	; (8001ec0 <HAL_TIM_PWM_ConfigChannel+0x298>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d00e      	beq.n	8001e66 <HAL_TIM_PWM_ConfigChannel+0x23e>
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e50:	d009      	beq.n	8001e66 <HAL_TIM_PWM_ConfigChannel+0x23e>
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a1b      	ldr	r2, [pc, #108]	; (8001ec4 <HAL_TIM_PWM_ConfigChannel+0x29c>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d004      	beq.n	8001e66 <HAL_TIM_PWM_ConfigChannel+0x23e>
 8001e5c:	f241 0167 	movw	r1, #4199	; 0x1067
 8001e60:	4816      	ldr	r0, [pc, #88]	; (8001ebc <HAL_TIM_PWM_ConfigChannel+0x294>)
 8001e62:	f7fe fac8 	bl	80003f6 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	68b9      	ldr	r1, [r7, #8]
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f000 fa3b 	bl	80022e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	69da      	ldr	r2, [r3, #28]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	69da      	ldr	r2, [r3, #28]
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	69d9      	ldr	r1, [r3, #28]
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	691b      	ldr	r3, [r3, #16]
 8001e9c:	021a      	lsls	r2, r3, #8
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	61da      	str	r2, [r3, #28]
      break;
 8001ea6:	e000      	b.n	8001eaa <HAL_TIM_PWM_ConfigChannel+0x282>
    }

    default:
      break;
 8001ea8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001eb2:	2300      	movs	r3, #0
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3710      	adds	r7, #16
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	08002838 	.word	0x08002838
 8001ec0:	40012c00 	.word	0x40012c00
 8001ec4:	40000400 	.word	0x40000400

08001ec8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4a25      	ldr	r2, [pc, #148]	; (8001f70 <TIM_Base_SetConfig+0xa8>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d007      	beq.n	8001ef0 <TIM_Base_SetConfig+0x28>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ee6:	d003      	beq.n	8001ef0 <TIM_Base_SetConfig+0x28>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4a22      	ldr	r2, [pc, #136]	; (8001f74 <TIM_Base_SetConfig+0xac>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d108      	bne.n	8001f02 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ef6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	68fa      	ldr	r2, [r7, #12]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a1a      	ldr	r2, [pc, #104]	; (8001f70 <TIM_Base_SetConfig+0xa8>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d007      	beq.n	8001f1a <TIM_Base_SetConfig+0x52>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f10:	d003      	beq.n	8001f1a <TIM_Base_SetConfig+0x52>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a17      	ldr	r2, [pc, #92]	; (8001f74 <TIM_Base_SetConfig+0xac>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d108      	bne.n	8001f2c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	68fa      	ldr	r2, [r7, #12]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	695b      	ldr	r3, [r3, #20]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	68fa      	ldr	r2, [r7, #12]
 8001f3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	689a      	ldr	r2, [r3, #8]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	4a07      	ldr	r2, [pc, #28]	; (8001f70 <TIM_Base_SetConfig+0xa8>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d103      	bne.n	8001f60 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	691a      	ldr	r2, [r3, #16]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2201      	movs	r2, #1
 8001f64:	615a      	str	r2, [r3, #20]
}
 8001f66:	bf00      	nop
 8001f68:	3714      	adds	r7, #20
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bc80      	pop	{r7}
 8001f6e:	4770      	bx	lr
 8001f70:	40012c00 	.word	0x40012c00
 8001f74:	40000400 	.word	0x40000400

08001f78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b086      	sub	sp, #24
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6a1b      	ldr	r3, [r3, #32]
 8001f86:	f023 0201 	bic.w	r2, r3, #1
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6a1b      	ldr	r3, [r3, #32]
 8001f92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	699b      	ldr	r3, [r3, #24]
 8001f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	f023 0303 	bic.w	r3, r3, #3
 8001fae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	68fa      	ldr	r2, [r7, #12]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	f023 0302 	bic.w	r3, r3, #2
 8001fc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	697a      	ldr	r2, [r7, #20]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4a30      	ldr	r2, [pc, #192]	; (8002090 <TIM_OC1_SetConfig+0x118>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d119      	bne.n	8002008 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d008      	beq.n	8001fee <TIM_OC1_SetConfig+0x76>
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	2b08      	cmp	r3, #8
 8001fe2:	d004      	beq.n	8001fee <TIM_OC1_SetConfig+0x76>
 8001fe4:	f641 2141 	movw	r1, #6721	; 0x1a41
 8001fe8:	482a      	ldr	r0, [pc, #168]	; (8002094 <TIM_OC1_SetConfig+0x11c>)
 8001fea:	f7fe fa04 	bl	80003f6 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	f023 0308 	bic.w	r3, r3, #8
 8001ff4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	697a      	ldr	r2, [r7, #20]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	f023 0304 	bic.w	r3, r3, #4
 8002006:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	4a21      	ldr	r2, [pc, #132]	; (8002090 <TIM_OC1_SetConfig+0x118>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d12d      	bne.n	800206c <TIM_OC1_SetConfig+0xf4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	699b      	ldr	r3, [r3, #24]
 8002014:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002018:	d008      	beq.n	800202c <TIM_OC1_SetConfig+0xb4>
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	699b      	ldr	r3, [r3, #24]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d004      	beq.n	800202c <TIM_OC1_SetConfig+0xb4>
 8002022:	f641 214e 	movw	r1, #6734	; 0x1a4e
 8002026:	481b      	ldr	r0, [pc, #108]	; (8002094 <TIM_OC1_SetConfig+0x11c>)
 8002028:	f7fe f9e5 	bl	80003f6 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	695b      	ldr	r3, [r3, #20]
 8002030:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002034:	d008      	beq.n	8002048 <TIM_OC1_SetConfig+0xd0>
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	695b      	ldr	r3, [r3, #20]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d004      	beq.n	8002048 <TIM_OC1_SetConfig+0xd0>
 800203e:	f641 214f 	movw	r1, #6735	; 0x1a4f
 8002042:	4814      	ldr	r0, [pc, #80]	; (8002094 <TIM_OC1_SetConfig+0x11c>)
 8002044:	f7fe f9d7 	bl	80003f6 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800204e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002056:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	695b      	ldr	r3, [r3, #20]
 800205c:	693a      	ldr	r2, [r7, #16]
 800205e:	4313      	orrs	r3, r2
 8002060:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	699b      	ldr	r3, [r3, #24]
 8002066:	693a      	ldr	r2, [r7, #16]
 8002068:	4313      	orrs	r3, r2
 800206a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	693a      	ldr	r2, [r7, #16]
 8002070:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	68fa      	ldr	r2, [r7, #12]
 8002076:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685a      	ldr	r2, [r3, #4]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	697a      	ldr	r2, [r7, #20]
 8002084:	621a      	str	r2, [r3, #32]
}
 8002086:	bf00      	nop
 8002088:	3718      	adds	r7, #24
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	40012c00 	.word	0x40012c00
 8002094:	08002838 	.word	0x08002838

08002098 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b086      	sub	sp, #24
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6a1b      	ldr	r3, [r3, #32]
 80020a6:	f023 0210 	bic.w	r2, r3, #16
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6a1b      	ldr	r3, [r3, #32]
 80020b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	699b      	ldr	r3, [r3, #24]
 80020be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	021b      	lsls	r3, r3, #8
 80020d6:	68fa      	ldr	r2, [r7, #12]
 80020d8:	4313      	orrs	r3, r2
 80020da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	f023 0320 	bic.w	r3, r3, #32
 80020e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	011b      	lsls	r3, r3, #4
 80020ea:	697a      	ldr	r2, [r7, #20]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	4a31      	ldr	r2, [pc, #196]	; (80021b8 <TIM_OC2_SetConfig+0x120>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d11a      	bne.n	800212e <TIM_OC2_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d008      	beq.n	8002112 <TIM_OC2_SetConfig+0x7a>
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	2b08      	cmp	r3, #8
 8002106:	d004      	beq.n	8002112 <TIM_OC2_SetConfig+0x7a>
 8002108:	f641 218c 	movw	r1, #6796	; 0x1a8c
 800210c:	482b      	ldr	r0, [pc, #172]	; (80021bc <TIM_OC2_SetConfig+0x124>)
 800210e:	f7fe f972 	bl	80003f6 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002118:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	011b      	lsls	r3, r3, #4
 8002120:	697a      	ldr	r2, [r7, #20]
 8002122:	4313      	orrs	r3, r2
 8002124:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800212c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a21      	ldr	r2, [pc, #132]	; (80021b8 <TIM_OC2_SetConfig+0x120>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d12f      	bne.n	8002196 <TIM_OC2_SetConfig+0xfe>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	699b      	ldr	r3, [r3, #24]
 800213a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800213e:	d008      	beq.n	8002152 <TIM_OC2_SetConfig+0xba>
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	699b      	ldr	r3, [r3, #24]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d004      	beq.n	8002152 <TIM_OC2_SetConfig+0xba>
 8002148:	f641 219a 	movw	r1, #6810	; 0x1a9a
 800214c:	481b      	ldr	r0, [pc, #108]	; (80021bc <TIM_OC2_SetConfig+0x124>)
 800214e:	f7fe f952 	bl	80003f6 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	695b      	ldr	r3, [r3, #20]
 8002156:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800215a:	d008      	beq.n	800216e <TIM_OC2_SetConfig+0xd6>
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	695b      	ldr	r3, [r3, #20]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d004      	beq.n	800216e <TIM_OC2_SetConfig+0xd6>
 8002164:	f641 219b 	movw	r1, #6811	; 0x1a9b
 8002168:	4814      	ldr	r0, [pc, #80]	; (80021bc <TIM_OC2_SetConfig+0x124>)
 800216a:	f7fe f944 	bl	80003f6 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002174:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800217c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	695b      	ldr	r3, [r3, #20]
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	693a      	ldr	r2, [r7, #16]
 8002186:	4313      	orrs	r3, r2
 8002188:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	699b      	ldr	r3, [r3, #24]
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	693a      	ldr	r2, [r7, #16]
 8002192:	4313      	orrs	r3, r2
 8002194:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	693a      	ldr	r2, [r7, #16]
 800219a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	68fa      	ldr	r2, [r7, #12]
 80021a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	685a      	ldr	r2, [r3, #4]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	697a      	ldr	r2, [r7, #20]
 80021ae:	621a      	str	r2, [r3, #32]
}
 80021b0:	bf00      	nop
 80021b2:	3718      	adds	r7, #24
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	40012c00 	.word	0x40012c00
 80021bc:	08002838 	.word	0x08002838

080021c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b086      	sub	sp, #24
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6a1b      	ldr	r3, [r3, #32]
 80021ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6a1b      	ldr	r3, [r3, #32]
 80021da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	69db      	ldr	r3, [r3, #28]
 80021e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f023 0303 	bic.w	r3, r3, #3
 80021f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	68fa      	ldr	r2, [r7, #12]
 80021fe:	4313      	orrs	r3, r2
 8002200:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002208:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	021b      	lsls	r3, r3, #8
 8002210:	697a      	ldr	r2, [r7, #20]
 8002212:	4313      	orrs	r3, r2
 8002214:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a31      	ldr	r2, [pc, #196]	; (80022e0 <TIM_OC3_SetConfig+0x120>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d11a      	bne.n	8002254 <TIM_OC3_SetConfig+0x94>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d008      	beq.n	8002238 <TIM_OC3_SetConfig+0x78>
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	2b08      	cmp	r3, #8
 800222c:	d004      	beq.n	8002238 <TIM_OC3_SetConfig+0x78>
 800222e:	f641 21d7 	movw	r1, #6871	; 0x1ad7
 8002232:	482c      	ldr	r0, [pc, #176]	; (80022e4 <TIM_OC3_SetConfig+0x124>)
 8002234:	f7fe f8df 	bl	80003f6 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800223e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	021b      	lsls	r3, r3, #8
 8002246:	697a      	ldr	r2, [r7, #20]
 8002248:	4313      	orrs	r3, r2
 800224a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002252:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	4a22      	ldr	r2, [pc, #136]	; (80022e0 <TIM_OC3_SetConfig+0x120>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d12f      	bne.n	80022bc <TIM_OC3_SetConfig+0xfc>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	699b      	ldr	r3, [r3, #24]
 8002260:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002264:	d008      	beq.n	8002278 <TIM_OC3_SetConfig+0xb8>
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	699b      	ldr	r3, [r3, #24]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d004      	beq.n	8002278 <TIM_OC3_SetConfig+0xb8>
 800226e:	f641 21e4 	movw	r1, #6884	; 0x1ae4
 8002272:	481c      	ldr	r0, [pc, #112]	; (80022e4 <TIM_OC3_SetConfig+0x124>)
 8002274:	f7fe f8bf 	bl	80003f6 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	695b      	ldr	r3, [r3, #20]
 800227c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002280:	d008      	beq.n	8002294 <TIM_OC3_SetConfig+0xd4>
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	695b      	ldr	r3, [r3, #20]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d004      	beq.n	8002294 <TIM_OC3_SetConfig+0xd4>
 800228a:	f641 21e5 	movw	r1, #6885	; 0x1ae5
 800228e:	4815      	ldr	r0, [pc, #84]	; (80022e4 <TIM_OC3_SetConfig+0x124>)
 8002290:	f7fe f8b1 	bl	80003f6 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800229a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80022a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	695b      	ldr	r3, [r3, #20]
 80022a8:	011b      	lsls	r3, r3, #4
 80022aa:	693a      	ldr	r2, [r7, #16]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	699b      	ldr	r3, [r3, #24]
 80022b4:	011b      	lsls	r3, r3, #4
 80022b6:	693a      	ldr	r2, [r7, #16]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	693a      	ldr	r2, [r7, #16]
 80022c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	68fa      	ldr	r2, [r7, #12]
 80022c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685a      	ldr	r2, [r3, #4]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	697a      	ldr	r2, [r7, #20]
 80022d4:	621a      	str	r2, [r3, #32]
}
 80022d6:	bf00      	nop
 80022d8:	3718      	adds	r7, #24
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	40012c00 	.word	0x40012c00
 80022e4:	08002838 	.word	0x08002838

080022e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b086      	sub	sp, #24
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a1b      	ldr	r3, [r3, #32]
 80022f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6a1b      	ldr	r3, [r3, #32]
 8002302:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	69db      	ldr	r3, [r3, #28]
 800230e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002316:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800231e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	021b      	lsls	r3, r3, #8
 8002326:	68fa      	ldr	r2, [r7, #12]
 8002328:	4313      	orrs	r3, r2
 800232a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002332:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	031b      	lsls	r3, r3, #12
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	4313      	orrs	r3, r2
 800233e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	4a16      	ldr	r2, [pc, #88]	; (800239c <TIM_OC4_SetConfig+0xb4>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d117      	bne.n	8002378 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	695b      	ldr	r3, [r3, #20]
 800234c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002350:	d008      	beq.n	8002364 <TIM_OC4_SetConfig+0x7c>
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	695b      	ldr	r3, [r3, #20]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d004      	beq.n	8002364 <TIM_OC4_SetConfig+0x7c>
 800235a:	f641 3123 	movw	r1, #6947	; 0x1b23
 800235e:	4810      	ldr	r0, [pc, #64]	; (80023a0 <TIM_OC4_SetConfig+0xb8>)
 8002360:	f7fe f849 	bl	80003f6 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800236a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	695b      	ldr	r3, [r3, #20]
 8002370:	019b      	lsls	r3, r3, #6
 8002372:	697a      	ldr	r2, [r7, #20]
 8002374:	4313      	orrs	r3, r2
 8002376:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	697a      	ldr	r2, [r7, #20]
 800237c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	68fa      	ldr	r2, [r7, #12]
 8002382:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685a      	ldr	r2, [r3, #4]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	621a      	str	r2, [r3, #32]
}
 8002392:	bf00      	nop
 8002394:	3718      	adds	r7, #24
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	40012c00 	.word	0x40012c00
 80023a0:	08002838 	.word	0x08002838

080023a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b086      	sub	sp, #24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	4a20      	ldr	r2, [pc, #128]	; (8002434 <TIM_CCxChannelCmd+0x90>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d00c      	beq.n	80023d2 <TIM_CCxChannelCmd+0x2e>
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023be:	d008      	beq.n	80023d2 <TIM_CCxChannelCmd+0x2e>
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	4a1d      	ldr	r2, [pc, #116]	; (8002438 <TIM_CCxChannelCmd+0x94>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d004      	beq.n	80023d2 <TIM_CCxChannelCmd+0x2e>
 80023c8:	f641 5109 	movw	r1, #7433	; 0x1d09
 80023cc:	481b      	ldr	r0, [pc, #108]	; (800243c <TIM_CCxChannelCmd+0x98>)
 80023ce:	f7fe f812 	bl	80003f6 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d010      	beq.n	80023fa <TIM_CCxChannelCmd+0x56>
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	2b04      	cmp	r3, #4
 80023dc:	d00d      	beq.n	80023fa <TIM_CCxChannelCmd+0x56>
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	2b08      	cmp	r3, #8
 80023e2:	d00a      	beq.n	80023fa <TIM_CCxChannelCmd+0x56>
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	2b0c      	cmp	r3, #12
 80023e8:	d007      	beq.n	80023fa <TIM_CCxChannelCmd+0x56>
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	2b3c      	cmp	r3, #60	; 0x3c
 80023ee:	d004      	beq.n	80023fa <TIM_CCxChannelCmd+0x56>
 80023f0:	f641 510a 	movw	r1, #7434	; 0x1d0a
 80023f4:	4811      	ldr	r0, [pc, #68]	; (800243c <TIM_CCxChannelCmd+0x98>)
 80023f6:	f7fd fffe 	bl	80003f6 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	f003 031f 	and.w	r3, r3, #31
 8002400:	2201      	movs	r2, #1
 8002402:	fa02 f303 	lsl.w	r3, r2, r3
 8002406:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	6a1a      	ldr	r2, [r3, #32]
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	43db      	mvns	r3, r3
 8002410:	401a      	ands	r2, r3
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	6a1a      	ldr	r2, [r3, #32]
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	f003 031f 	and.w	r3, r3, #31
 8002420:	6879      	ldr	r1, [r7, #4]
 8002422:	fa01 f303 	lsl.w	r3, r1, r3
 8002426:	431a      	orrs	r2, r3
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	621a      	str	r2, [r3, #32]
}
 800242c:	bf00      	nop
 800242e:	3718      	adds	r7, #24
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	40012c00 	.word	0x40012c00
 8002438:	40000400 	.word	0x40000400
 800243c:	08002838 	.word	0x08002838

08002440 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a48      	ldr	r2, [pc, #288]	; (8002570 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d00e      	beq.n	8002472 <HAL_TIMEx_MasterConfigSynchronization+0x32>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800245c:	d009      	beq.n	8002472 <HAL_TIMEx_MasterConfigSynchronization+0x32>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a44      	ldr	r2, [pc, #272]	; (8002574 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d004      	beq.n	8002472 <HAL_TIMEx_MasterConfigSynchronization+0x32>
 8002468:	f240 7186 	movw	r1, #1926	; 0x786
 800246c:	4842      	ldr	r0, [pc, #264]	; (8002578 <HAL_TIMEx_MasterConfigSynchronization+0x138>)
 800246e:	f7fd ffc2 	bl	80003f6 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d020      	beq.n	80024bc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2b10      	cmp	r3, #16
 8002480:	d01c      	beq.n	80024bc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2b20      	cmp	r3, #32
 8002488:	d018      	beq.n	80024bc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2b30      	cmp	r3, #48	; 0x30
 8002490:	d014      	beq.n	80024bc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2b40      	cmp	r3, #64	; 0x40
 8002498:	d010      	beq.n	80024bc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2b50      	cmp	r3, #80	; 0x50
 80024a0:	d00c      	beq.n	80024bc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2b60      	cmp	r3, #96	; 0x60
 80024a8:	d008      	beq.n	80024bc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	2b70      	cmp	r3, #112	; 0x70
 80024b0:	d004      	beq.n	80024bc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80024b2:	f240 7187 	movw	r1, #1927	; 0x787
 80024b6:	4830      	ldr	r0, [pc, #192]	; (8002578 <HAL_TIMEx_MasterConfigSynchronization+0x138>)
 80024b8:	f7fd ff9d 	bl	80003f6 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	2b80      	cmp	r3, #128	; 0x80
 80024c2:	d008      	beq.n	80024d6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d004      	beq.n	80024d6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80024cc:	f44f 61f1 	mov.w	r1, #1928	; 0x788
 80024d0:	4829      	ldr	r0, [pc, #164]	; (8002578 <HAL_TIMEx_MasterConfigSynchronization+0x138>)
 80024d2:	f7fd ff90 	bl	80003f6 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d101      	bne.n	80024e4 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 80024e0:	2302      	movs	r3, #2
 80024e2:	e041      	b.n	8002568 <HAL_TIMEx_MasterConfigSynchronization+0x128>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2201      	movs	r2, #1
 80024e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2202      	movs	r2, #2
 80024f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800250a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	68fa      	ldr	r2, [r7, #12]
 8002512:	4313      	orrs	r3, r2
 8002514:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	68fa      	ldr	r2, [r7, #12]
 800251c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a13      	ldr	r2, [pc, #76]	; (8002570 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d009      	beq.n	800253c <HAL_TIMEx_MasterConfigSynchronization+0xfc>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002530:	d004      	beq.n	800253c <HAL_TIMEx_MasterConfigSynchronization+0xfc>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a0f      	ldr	r2, [pc, #60]	; (8002574 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d10c      	bne.n	8002556 <HAL_TIMEx_MasterConfigSynchronization+0x116>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002542:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	68ba      	ldr	r2, [r7, #8]
 800254a:	4313      	orrs	r3, r2
 800254c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	68ba      	ldr	r2, [r7, #8]
 8002554:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2201      	movs	r2, #1
 800255a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002566:	2300      	movs	r3, #0
}
 8002568:	4618      	mov	r0, r3
 800256a:	3710      	adds	r7, #16
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	40012c00 	.word	0x40012c00
 8002574:	40000400 	.word	0x40000400
 8002578:	08002870 	.word	0x08002870

0800257c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002586:	2300      	movs	r3, #0
 8002588:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a5c      	ldr	r2, [pc, #368]	; (8002700 <HAL_TIMEx_ConfigBreakDeadTime+0x184>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d004      	beq.n	800259e <HAL_TIMEx_ConfigBreakDeadTime+0x22>
 8002594:	f240 71c3 	movw	r1, #1987	; 0x7c3
 8002598:	485a      	ldr	r0, [pc, #360]	; (8002704 <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 800259a:	f7fd ff2c 	bl	80003f6 <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025a6:	d008      	beq.n	80025ba <HAL_TIMEx_ConfigBreakDeadTime+0x3e>
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d004      	beq.n	80025ba <HAL_TIMEx_ConfigBreakDeadTime+0x3e>
 80025b0:	f240 71c4 	movw	r1, #1988	; 0x7c4
 80025b4:	4853      	ldr	r0, [pc, #332]	; (8002704 <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 80025b6:	f7fd ff1e 	bl	80003f6 <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025c2:	d008      	beq.n	80025d6 <HAL_TIMEx_ConfigBreakDeadTime+0x5a>
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d004      	beq.n	80025d6 <HAL_TIMEx_ConfigBreakDeadTime+0x5a>
 80025cc:	f240 71c5 	movw	r1, #1989	; 0x7c5
 80025d0:	484c      	ldr	r0, [pc, #304]	; (8002704 <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 80025d2:	f7fd ff10 	bl	80003f6 <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d013      	beq.n	8002606 <HAL_TIMEx_ConfigBreakDeadTime+0x8a>
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025e6:	d00e      	beq.n	8002606 <HAL_TIMEx_ConfigBreakDeadTime+0x8a>
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025f0:	d009      	beq.n	8002606 <HAL_TIMEx_ConfigBreakDeadTime+0x8a>
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80025fa:	d004      	beq.n	8002606 <HAL_TIMEx_ConfigBreakDeadTime+0x8a>
 80025fc:	f240 71c6 	movw	r1, #1990	; 0x7c6
 8002600:	4840      	ldr	r0, [pc, #256]	; (8002704 <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 8002602:	f7fd fef8 	bl	80003f6 <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	2bff      	cmp	r3, #255	; 0xff
 800260c:	d904      	bls.n	8002618 <HAL_TIMEx_ConfigBreakDeadTime+0x9c>
 800260e:	f240 71c7 	movw	r1, #1991	; 0x7c7
 8002612:	483c      	ldr	r0, [pc, #240]	; (8002704 <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 8002614:	f7fd feef 	bl	80003f6 <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	691b      	ldr	r3, [r3, #16]
 800261c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002620:	d008      	beq.n	8002634 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d004      	beq.n	8002634 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800262a:	f44f 61f9 	mov.w	r1, #1992	; 0x7c8
 800262e:	4835      	ldr	r0, [pc, #212]	; (8002704 <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 8002630:	f7fd fee1 	bl	80003f6 <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	695b      	ldr	r3, [r3, #20]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d009      	beq.n	8002650 <HAL_TIMEx_ConfigBreakDeadTime+0xd4>
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	695b      	ldr	r3, [r3, #20]
 8002640:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002644:	d004      	beq.n	8002650 <HAL_TIMEx_ConfigBreakDeadTime+0xd4>
 8002646:	f240 71c9 	movw	r1, #1993	; 0x7c9
 800264a:	482e      	ldr	r0, [pc, #184]	; (8002704 <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 800264c:	f7fd fed3 	bl	80003f6 <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	69db      	ldr	r3, [r3, #28]
 8002654:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002658:	d008      	beq.n	800266c <HAL_TIMEx_ConfigBreakDeadTime+0xf0>
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	69db      	ldr	r3, [r3, #28]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d004      	beq.n	800266c <HAL_TIMEx_ConfigBreakDeadTime+0xf0>
 8002662:	f240 71ca 	movw	r1, #1994	; 0x7ca
 8002666:	4827      	ldr	r0, [pc, #156]	; (8002704 <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 8002668:	f7fd fec5 	bl	80003f6 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002672:	2b01      	cmp	r3, #1
 8002674:	d101      	bne.n	800267a <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
 8002676:	2302      	movs	r3, #2
 8002678:	e03d      	b.n	80026f6 <HAL_TIMEx_ConfigBreakDeadTime+0x17a>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2201      	movs	r2, #1
 800267e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	4313      	orrs	r3, r2
 800268e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	4313      	orrs	r3, r2
 800269c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	691b      	ldr	r3, [r3, #16]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	695b      	ldr	r3, [r3, #20]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	69db      	ldr	r3, [r3, #28]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	68fa      	ldr	r2, [r7, #12]
 80026ea:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80026f4:	2300      	movs	r3, #0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3710      	adds	r7, #16
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	40012c00 	.word	0x40012c00
 8002704:	08002870 	.word	0x08002870

08002708 <__libc_init_array>:
 8002708:	b570      	push	{r4, r5, r6, lr}
 800270a:	2600      	movs	r6, #0
 800270c:	4d0c      	ldr	r5, [pc, #48]	; (8002740 <__libc_init_array+0x38>)
 800270e:	4c0d      	ldr	r4, [pc, #52]	; (8002744 <__libc_init_array+0x3c>)
 8002710:	1b64      	subs	r4, r4, r5
 8002712:	10a4      	asrs	r4, r4, #2
 8002714:	42a6      	cmp	r6, r4
 8002716:	d109      	bne.n	800272c <__libc_init_array+0x24>
 8002718:	f000 f822 	bl	8002760 <_init>
 800271c:	2600      	movs	r6, #0
 800271e:	4d0a      	ldr	r5, [pc, #40]	; (8002748 <__libc_init_array+0x40>)
 8002720:	4c0a      	ldr	r4, [pc, #40]	; (800274c <__libc_init_array+0x44>)
 8002722:	1b64      	subs	r4, r4, r5
 8002724:	10a4      	asrs	r4, r4, #2
 8002726:	42a6      	cmp	r6, r4
 8002728:	d105      	bne.n	8002736 <__libc_init_array+0x2e>
 800272a:	bd70      	pop	{r4, r5, r6, pc}
 800272c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002730:	4798      	blx	r3
 8002732:	3601      	adds	r6, #1
 8002734:	e7ee      	b.n	8002714 <__libc_init_array+0xc>
 8002736:	f855 3b04 	ldr.w	r3, [r5], #4
 800273a:	4798      	blx	r3
 800273c:	3601      	adds	r6, #1
 800273e:	e7f2      	b.n	8002726 <__libc_init_array+0x1e>
 8002740:	080028bc 	.word	0x080028bc
 8002744:	080028bc 	.word	0x080028bc
 8002748:	080028bc 	.word	0x080028bc
 800274c:	080028c0 	.word	0x080028c0

08002750 <memset>:
 8002750:	4603      	mov	r3, r0
 8002752:	4402      	add	r2, r0
 8002754:	4293      	cmp	r3, r2
 8002756:	d100      	bne.n	800275a <memset+0xa>
 8002758:	4770      	bx	lr
 800275a:	f803 1b01 	strb.w	r1, [r3], #1
 800275e:	e7f9      	b.n	8002754 <memset+0x4>

08002760 <_init>:
 8002760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002762:	bf00      	nop
 8002764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002766:	bc08      	pop	{r3}
 8002768:	469e      	mov	lr, r3
 800276a:	4770      	bx	lr

0800276c <_fini>:
 800276c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800276e:	bf00      	nop
 8002770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002772:	bc08      	pop	{r3}
 8002774:	469e      	mov	lr, r3
 8002776:	4770      	bx	lr
