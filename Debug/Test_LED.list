
Test_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001738  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08001844  08001844  00011844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080018f4  080018f4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080018f4  080018f4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080018f4  080018f4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080018f4  080018f4  000118f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080018f8  080018f8  000118f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080018fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000054  2000000c  08001908  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000060  08001908  00020060  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000057d4  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001614  00000000  00000000  00025809  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000560  00000000  00000000  00026e20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000498  00000000  00000000  00027380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d77  00000000  00000000  00027818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000074fa  00000000  00000000  0003e58f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000831fd  00000000  00000000  00045a89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c8c86  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000012b8  00000000  00000000  000c8cd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800182c 	.word	0x0800182c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	0800182c 	.word	0x0800182c

0800014c <ADC_Init>:
#include "stm32f1xx_it.h"
#include "GPIO_code.h"

ADC_HandleTypeDef hadc1;

void ADC_Init(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	MX_ADC1_Init();
 8000150:	f000 f808 	bl	8000164 <MX_ADC1_Init>
	HAL_ADC_Start(&hadc1);
 8000154:	4802      	ldr	r0, [pc, #8]	; (8000160 <ADC_Init+0x14>)
 8000156:	f000 fb41 	bl	80007dc <HAL_ADC_Start>
}
 800015a:	bf00      	nop
 800015c:	bd80      	pop	{r7, pc}
 800015e:	bf00      	nop
 8000160:	20000028 	.word	0x20000028

08000164 <MX_ADC1_Init>:



static void MX_ADC1_Init(void){
 8000164:	b580      	push	{r7, lr}
 8000166:	b084      	sub	sp, #16
 8000168:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800016a:	1d3b      	adds	r3, r7, #4
 800016c:	2200      	movs	r2, #0
 800016e:	601a      	str	r2, [r3, #0]
 8000170:	605a      	str	r2, [r3, #4]
 8000172:	609a      	str	r2, [r3, #8]

  hadc1.Instance = ADC1;
 8000174:	4b18      	ldr	r3, [pc, #96]	; (80001d8 <MX_ADC1_Init+0x74>)
 8000176:	4a19      	ldr	r2, [pc, #100]	; (80001dc <MX_ADC1_Init+0x78>)
 8000178:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800017a:	4b17      	ldr	r3, [pc, #92]	; (80001d8 <MX_ADC1_Init+0x74>)
 800017c:	2200      	movs	r2, #0
 800017e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000180:	4b15      	ldr	r3, [pc, #84]	; (80001d8 <MX_ADC1_Init+0x74>)
 8000182:	2200      	movs	r2, #0
 8000184:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000186:	4b14      	ldr	r3, [pc, #80]	; (80001d8 <MX_ADC1_Init+0x74>)
 8000188:	2200      	movs	r2, #0
 800018a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800018c:	4b12      	ldr	r3, [pc, #72]	; (80001d8 <MX_ADC1_Init+0x74>)
 800018e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000192:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000194:	4b10      	ldr	r3, [pc, #64]	; (80001d8 <MX_ADC1_Init+0x74>)
 8000196:	2200      	movs	r2, #0
 8000198:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800019a:	4b0f      	ldr	r3, [pc, #60]	; (80001d8 <MX_ADC1_Init+0x74>)
 800019c:	2201      	movs	r2, #1
 800019e:	611a      	str	r2, [r3, #16]

  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80001a0:	480d      	ldr	r0, [pc, #52]	; (80001d8 <MX_ADC1_Init+0x74>)
 80001a2:	f000 f9a7 	bl	80004f4 <HAL_ADC_Init>
 80001a6:	4603      	mov	r3, r0
 80001a8:	2b00      	cmp	r3, #0
 80001aa:	d001      	beq.n	80001b0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80001ac:	f000 f898 	bl	80002e0 <Error_Handler>
  }

  sConfig.Channel = ADC_CHANNEL_6;
 80001b0:	2306      	movs	r3, #6
 80001b2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80001b4:	2301      	movs	r3, #1
 80001b6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80001b8:	2300      	movs	r3, #0
 80001ba:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001bc:	1d3b      	adds	r3, r7, #4
 80001be:	4619      	mov	r1, r3
 80001c0:	4805      	ldr	r0, [pc, #20]	; (80001d8 <MX_ADC1_Init+0x74>)
 80001c2:	f000 fccf 	bl	8000b64 <HAL_ADC_ConfigChannel>
 80001c6:	4603      	mov	r3, r0
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	d001      	beq.n	80001d0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80001cc:	f000 f888 	bl	80002e0 <Error_Handler>
  }
}
 80001d0:	bf00      	nop
 80001d2:	3710      	adds	r7, #16
 80001d4:	46bd      	mov	sp, r7
 80001d6:	bd80      	pop	{r7, pc}
 80001d8:	20000028 	.word	0x20000028
 80001dc:	40012400 	.word	0x40012400

080001e0 <EXTI15_10_IRQHandler>:
#include "GPIO_code.h"
#include "stm32f1xx_it.h"

int tiks = 0;

void EXTI15_10_IRQHandler(void) {
 80001e0:	b580      	push	{r7, lr}
 80001e2:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80001e4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80001e8:	f001 fae4 	bl	80017b4 <HAL_GPIO_EXTI_IRQHandler>
}
 80001ec:	bf00      	nop
 80001ee:	bd80      	pop	{r7, pc}

080001f0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b082      	sub	sp, #8
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	4603      	mov	r3, r0
 80001f8:	80fb      	strh	r3, [r7, #6]
	if(tiks == 100){
 80001fa:	4b0b      	ldr	r3, [pc, #44]	; (8000228 <HAL_GPIO_EXTI_Callback+0x38>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	2b64      	cmp	r3, #100	; 0x64
 8000200:	d108      	bne.n	8000214 <HAL_GPIO_EXTI_Callback+0x24>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_10);
 8000202:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000206:	4809      	ldr	r0, [pc, #36]	; (800022c <HAL_GPIO_EXTI_Callback+0x3c>)
 8000208:	f001 faac 	bl	8001764 <HAL_GPIO_TogglePin>
		tiks = 0;
 800020c:	4b06      	ldr	r3, [pc, #24]	; (8000228 <HAL_GPIO_EXTI_Callback+0x38>)
 800020e:	2200      	movs	r2, #0
 8000210:	601a      	str	r2, [r3, #0]
	}
	else
		tiks++;
}
 8000212:	e004      	b.n	800021e <HAL_GPIO_EXTI_Callback+0x2e>
		tiks++;
 8000214:	4b04      	ldr	r3, [pc, #16]	; (8000228 <HAL_GPIO_EXTI_Callback+0x38>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	3301      	adds	r3, #1
 800021a:	4a03      	ldr	r2, [pc, #12]	; (8000228 <HAL_GPIO_EXTI_Callback+0x38>)
 800021c:	6013      	str	r3, [r2, #0]
}
 800021e:	bf00      	nop
 8000220:	3708      	adds	r7, #8
 8000222:	46bd      	mov	sp, r7
 8000224:	bd80      	pop	{r7, pc}
 8000226:	bf00      	nop
 8000228:	20000058 	.word	0x20000058
 800022c:	40010800 	.word	0x40010800

08000230 <GPIO_Init>:
void GPIO_Init(void){
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0
	MX_GPIO_Init();
 8000234:	f000 f802 	bl	800023c <MX_GPIO_Init>
}
 8000238:	bf00      	nop
 800023a:	bd80      	pop	{r7, pc}

0800023c <MX_GPIO_Init>:


static void MX_GPIO_Init(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b086      	sub	sp, #24
 8000240:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000242:	f107 0308 	add.w	r3, r7, #8
 8000246:	2200      	movs	r2, #0
 8000248:	601a      	str	r2, [r3, #0]
 800024a:	605a      	str	r2, [r3, #4]
 800024c:	609a      	str	r2, [r3, #8]
 800024e:	60da      	str	r2, [r3, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000250:	4b1f      	ldr	r3, [pc, #124]	; (80002d0 <MX_GPIO_Init+0x94>)
 8000252:	699b      	ldr	r3, [r3, #24]
 8000254:	4a1e      	ldr	r2, [pc, #120]	; (80002d0 <MX_GPIO_Init+0x94>)
 8000256:	f043 0304 	orr.w	r3, r3, #4
 800025a:	6193      	str	r3, [r2, #24]
 800025c:	4b1c      	ldr	r3, [pc, #112]	; (80002d0 <MX_GPIO_Init+0x94>)
 800025e:	699b      	ldr	r3, [r3, #24]
 8000260:	f003 0304 	and.w	r3, r3, #4
 8000264:	607b      	str	r3, [r7, #4]
 8000266:	687b      	ldr	r3, [r7, #4]

  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000268:	f44f 7380 	mov.w	r3, #256	; 0x100
 800026c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;//
 800026e:	4b19      	ldr	r3, [pc, #100]	; (80002d4 <MX_GPIO_Init+0x98>)
 8000270:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000272:	2302      	movs	r3, #2
 8000274:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000276:	2302      	movs	r3, #2
 8000278:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800027a:	f107 0308 	add.w	r3, r7, #8
 800027e:	4619      	mov	r1, r3
 8000280:	4815      	ldr	r0, [pc, #84]	; (80002d8 <MX_GPIO_Init+0x9c>)
 8000282:	f001 f813 	bl	80012ac <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000286:	f44f 7300 	mov.w	r3, #512	; 0x200
 800028a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800028c:	4b13      	ldr	r3, [pc, #76]	; (80002dc <MX_GPIO_Init+0xa0>)
 800028e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000290:	2301      	movs	r3, #1
 8000292:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000294:	2302      	movs	r3, #2
 8000296:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000298:	f107 0308 	add.w	r3, r7, #8
 800029c:	4619      	mov	r1, r3
 800029e:	480e      	ldr	r0, [pc, #56]	; (80002d8 <MX_GPIO_Init+0x9c>)
 80002a0:	f001 f804 	bl	80012ac <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80002a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;//
 80002aa:	2301      	movs	r3, #1
 80002ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ae:	2300      	movs	r3, #0
 80002b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002b2:	2302      	movs	r3, #2
 80002b4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002b6:	f107 0308 	add.w	r3, r7, #8
 80002ba:	4619      	mov	r1, r3
 80002bc:	4806      	ldr	r0, [pc, #24]	; (80002d8 <MX_GPIO_Init+0x9c>)
 80002be:	f000 fff5 	bl	80012ac <HAL_GPIO_Init>

  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80002c2:	2028      	movs	r0, #40	; 0x28
 80002c4:	f000 ffce 	bl	8001264 <HAL_NVIC_EnableIRQ>
}
 80002c8:	bf00      	nop
 80002ca:	3718      	adds	r7, #24
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bd80      	pop	{r7, pc}
 80002d0:	40021000 	.word	0x40021000
 80002d4:	10110000 	.word	0x10110000
 80002d8:	40010800 	.word	0x40010800
 80002dc:	10210000 	.word	0x10210000

080002e0 <Error_Handler>:
	return returnValue = HAL_I2C_Master_Receive(&hi2c1,I2C_ADDRESS_READ, buffer, LenWord, HAL_MAX_DELAY);;
}


void Error_Handler(void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002e4:	b672      	cpsid	i
}
 80002e6:	bf00      	nop
  __disable_irq();
  while (1)
 80002e8:	e7fe      	b.n	80002e8 <Error_Handler+0x8>

080002ea <main>:

//void SystemClock_Config(void);


int main(void)
{
 80002ea:	b580      	push	{r7, lr}
 80002ec:	af00      	add	r7, sp, #0
	//const char word[] = "Hello World!";
	//char buffer[20];
	HAL_Init();
 80002ee:	f000 f89f 	bl	8000430 <HAL_Init>

	//SystemClock_Config();
	GPIO_Init();
 80002f2:	f7ff ff9d 	bl	8000230 <GPIO_Init>
	ADC_Init();
 80002f6:	f7ff ff29 	bl	800014c <ADC_Init>
//		while(1){
//			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_10);
//			HAL_Delay(1000);
//		}
//	}
	while(1);
 80002fa:	e7fe      	b.n	80002fa <main+0x10>

080002fc <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 80002fc:	b480      	push	{r7}
 80002fe:	b083      	sub	sp, #12
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
 8000304:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000306:	bf00      	nop
 8000308:	370c      	adds	r7, #12
 800030a:	46bd      	mov	sp, r7
 800030c:	bc80      	pop	{r7}
 800030e:	4770      	bx	lr

08000310 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000310:	b480      	push	{r7}
 8000312:	b085      	sub	sp, #20
 8000314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000316:	4b15      	ldr	r3, [pc, #84]	; (800036c <HAL_MspInit+0x5c>)
 8000318:	699b      	ldr	r3, [r3, #24]
 800031a:	4a14      	ldr	r2, [pc, #80]	; (800036c <HAL_MspInit+0x5c>)
 800031c:	f043 0301 	orr.w	r3, r3, #1
 8000320:	6193      	str	r3, [r2, #24]
 8000322:	4b12      	ldr	r3, [pc, #72]	; (800036c <HAL_MspInit+0x5c>)
 8000324:	699b      	ldr	r3, [r3, #24]
 8000326:	f003 0301 	and.w	r3, r3, #1
 800032a:	60bb      	str	r3, [r7, #8]
 800032c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800032e:	4b0f      	ldr	r3, [pc, #60]	; (800036c <HAL_MspInit+0x5c>)
 8000330:	69db      	ldr	r3, [r3, #28]
 8000332:	4a0e      	ldr	r2, [pc, #56]	; (800036c <HAL_MspInit+0x5c>)
 8000334:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000338:	61d3      	str	r3, [r2, #28]
 800033a:	4b0c      	ldr	r3, [pc, #48]	; (800036c <HAL_MspInit+0x5c>)
 800033c:	69db      	ldr	r3, [r3, #28]
 800033e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000342:	607b      	str	r3, [r7, #4]
 8000344:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000346:	4b0a      	ldr	r3, [pc, #40]	; (8000370 <HAL_MspInit+0x60>)
 8000348:	685b      	ldr	r3, [r3, #4]
 800034a:	60fb      	str	r3, [r7, #12]
 800034c:	68fb      	ldr	r3, [r7, #12]
 800034e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000352:	60fb      	str	r3, [r7, #12]
 8000354:	68fb      	ldr	r3, [r7, #12]
 8000356:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800035a:	60fb      	str	r3, [r7, #12]
 800035c:	4a04      	ldr	r2, [pc, #16]	; (8000370 <HAL_MspInit+0x60>)
 800035e:	68fb      	ldr	r3, [r7, #12]
 8000360:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000362:	bf00      	nop
 8000364:	3714      	adds	r7, #20
 8000366:	46bd      	mov	sp, r7
 8000368:	bc80      	pop	{r7}
 800036a:	4770      	bx	lr
 800036c:	40021000 	.word	0x40021000
 8000370:	40010000 	.word	0x40010000

08000374 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000378:	e7fe      	b.n	8000378 <NMI_Handler+0x4>

0800037a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800037a:	b480      	push	{r7}
 800037c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800037e:	e7fe      	b.n	800037e <HardFault_Handler+0x4>

08000380 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000384:	e7fe      	b.n	8000384 <MemManage_Handler+0x4>

08000386 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000386:	b480      	push	{r7}
 8000388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800038a:	e7fe      	b.n	800038a <BusFault_Handler+0x4>

0800038c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800038c:	b480      	push	{r7}
 800038e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000390:	e7fe      	b.n	8000390 <UsageFault_Handler+0x4>

08000392 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000392:	b480      	push	{r7}
 8000394:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000396:	bf00      	nop
 8000398:	46bd      	mov	sp, r7
 800039a:	bc80      	pop	{r7}
 800039c:	4770      	bx	lr

0800039e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800039e:	b480      	push	{r7}
 80003a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003a2:	bf00      	nop
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bc80      	pop	{r7}
 80003a8:	4770      	bx	lr

080003aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003aa:	b480      	push	{r7}
 80003ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003ae:	bf00      	nop
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bc80      	pop	{r7}
 80003b4:	4770      	bx	lr

080003b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003b6:	b580      	push	{r7, lr}
 80003b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003ba:	f000 f87f 	bl	80004bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003be:	bf00      	nop
 80003c0:	bd80      	pop	{r7, pc}
	...

080003c4 <ADC1_2_IRQHandler>:

void ADC1_2_IRQHandler(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80003c8:	4802      	ldr	r0, [pc, #8]	; (80003d4 <ADC1_2_IRQHandler+0x10>)
 80003ca:	f000 fac7 	bl	800095c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80003ce:	bf00      	nop
 80003d0:	bd80      	pop	{r7, pc}
 80003d2:	bf00      	nop
 80003d4:	20000028 	.word	0x20000028

080003d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80003d8:	b480      	push	{r7}
 80003da:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003dc:	bf00      	nop
 80003de:	46bd      	mov	sp, r7
 80003e0:	bc80      	pop	{r7}
 80003e2:	4770      	bx	lr

080003e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003e4:	480c      	ldr	r0, [pc, #48]	; (8000418 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80003e6:	490d      	ldr	r1, [pc, #52]	; (800041c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80003e8:	4a0d      	ldr	r2, [pc, #52]	; (8000420 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80003ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003ec:	e002      	b.n	80003f4 <LoopCopyDataInit>

080003ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003f2:	3304      	adds	r3, #4

080003f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003f8:	d3f9      	bcc.n	80003ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003fa:	4a0a      	ldr	r2, [pc, #40]	; (8000424 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80003fc:	4c0a      	ldr	r4, [pc, #40]	; (8000428 <LoopFillZerobss+0x22>)
  movs r3, #0
 80003fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000400:	e001      	b.n	8000406 <LoopFillZerobss>

08000402 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000402:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000404:	3204      	adds	r2, #4

08000406 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000406:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000408:	d3fb      	bcc.n	8000402 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800040a:	f7ff ffe5 	bl	80003d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800040e:	f001 f9e9 	bl	80017e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000412:	f7ff ff6a 	bl	80002ea <main>
  bx lr
 8000416:	4770      	bx	lr
  ldr r0, =_sdata
 8000418:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800041c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000420:	080018fc 	.word	0x080018fc
  ldr r2, =_sbss
 8000424:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000428:	20000060 	.word	0x20000060

0800042c <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800042c:	e7fe      	b.n	800042c <CAN1_RX1_IRQHandler>
	...

08000430 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000434:	4b08      	ldr	r3, [pc, #32]	; (8000458 <HAL_Init+0x28>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	4a07      	ldr	r2, [pc, #28]	; (8000458 <HAL_Init+0x28>)
 800043a:	f043 0310 	orr.w	r3, r3, #16
 800043e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000440:	2003      	movs	r0, #3
 8000442:	f000 fec3 	bl	80011cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000446:	200f      	movs	r0, #15
 8000448:	f000 f808 	bl	800045c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800044c:	f7ff ff60 	bl	8000310 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000450:	2300      	movs	r3, #0
}
 8000452:	4618      	mov	r0, r3
 8000454:	bd80      	pop	{r7, pc}
 8000456:	bf00      	nop
 8000458:	40022000 	.word	0x40022000

0800045c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000464:	4b12      	ldr	r3, [pc, #72]	; (80004b0 <HAL_InitTick+0x54>)
 8000466:	681a      	ldr	r2, [r3, #0]
 8000468:	4b12      	ldr	r3, [pc, #72]	; (80004b4 <HAL_InitTick+0x58>)
 800046a:	781b      	ldrb	r3, [r3, #0]
 800046c:	4619      	mov	r1, r3
 800046e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000472:	fbb3 f3f1 	udiv	r3, r3, r1
 8000476:	fbb2 f3f3 	udiv	r3, r2, r3
 800047a:	4618      	mov	r0, r3
 800047c:	f000 ff0a 	bl	8001294 <HAL_SYSTICK_Config>
 8000480:	4603      	mov	r3, r0
 8000482:	2b00      	cmp	r3, #0
 8000484:	d001      	beq.n	800048a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000486:	2301      	movs	r3, #1
 8000488:	e00e      	b.n	80004a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	2b0f      	cmp	r3, #15
 800048e:	d80a      	bhi.n	80004a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000490:	2200      	movs	r2, #0
 8000492:	6879      	ldr	r1, [r7, #4]
 8000494:	f04f 30ff 	mov.w	r0, #4294967295
 8000498:	f000 feb8 	bl	800120c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800049c:	4a06      	ldr	r2, [pc, #24]	; (80004b8 <HAL_InitTick+0x5c>)
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80004a2:	2300      	movs	r3, #0
 80004a4:	e000      	b.n	80004a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80004a6:	2301      	movs	r3, #1
}
 80004a8:	4618      	mov	r0, r3
 80004aa:	3708      	adds	r7, #8
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	20000000 	.word	0x20000000
 80004b4:	20000008 	.word	0x20000008
 80004b8:	20000004 	.word	0x20000004

080004bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80004c0:	4b05      	ldr	r3, [pc, #20]	; (80004d8 <HAL_IncTick+0x1c>)
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	461a      	mov	r2, r3
 80004c6:	4b05      	ldr	r3, [pc, #20]	; (80004dc <HAL_IncTick+0x20>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	4413      	add	r3, r2
 80004cc:	4a03      	ldr	r2, [pc, #12]	; (80004dc <HAL_IncTick+0x20>)
 80004ce:	6013      	str	r3, [r2, #0]
}
 80004d0:	bf00      	nop
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bc80      	pop	{r7}
 80004d6:	4770      	bx	lr
 80004d8:	20000008 	.word	0x20000008
 80004dc:	2000005c 	.word	0x2000005c

080004e0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
  return uwTick;
 80004e4:	4b02      	ldr	r3, [pc, #8]	; (80004f0 <HAL_GetTick+0x10>)
 80004e6:	681b      	ldr	r3, [r3, #0]
}
 80004e8:	4618      	mov	r0, r3
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bc80      	pop	{r7}
 80004ee:	4770      	bx	lr
 80004f0:	2000005c 	.word	0x2000005c

080004f4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b086      	sub	sp, #24
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80004fc:	2300      	movs	r3, #0
 80004fe:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000500:	2300      	movs	r3, #0
 8000502:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000504:	2300      	movs	r3, #0
 8000506:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000508:	2300      	movs	r3, #0
 800050a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	2b00      	cmp	r3, #0
 8000510:	d101      	bne.n	8000516 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000512:	2301      	movs	r3, #1
 8000514:	e154      	b.n	80007c0 <HAL_ADC_Init+0x2cc>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	4a97      	ldr	r2, [pc, #604]	; (8000778 <HAL_ADC_Init+0x284>)
 800051c:	4293      	cmp	r3, r2
 800051e:	d009      	beq.n	8000534 <HAL_ADC_Init+0x40>
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a95      	ldr	r2, [pc, #596]	; (800077c <HAL_ADC_Init+0x288>)
 8000526:	4293      	cmp	r3, r2
 8000528:	d004      	beq.n	8000534 <HAL_ADC_Init+0x40>
 800052a:	f240 11b3 	movw	r1, #435	; 0x1b3
 800052e:	4894      	ldr	r0, [pc, #592]	; (8000780 <HAL_ADC_Init+0x28c>)
 8000530:	f7ff fee4 	bl	80002fc <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	685b      	ldr	r3, [r3, #4]
 8000538:	2b00      	cmp	r3, #0
 800053a:	d009      	beq.n	8000550 <HAL_ADC_Init+0x5c>
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	685b      	ldr	r3, [r3, #4]
 8000540:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000544:	d004      	beq.n	8000550 <HAL_ADC_Init+0x5c>
 8000546:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 800054a:	488d      	ldr	r0, [pc, #564]	; (8000780 <HAL_ADC_Init+0x28c>)
 800054c:	f7ff fed6 	bl	80002fc <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	689b      	ldr	r3, [r3, #8]
 8000554:	2b00      	cmp	r3, #0
 8000556:	d009      	beq.n	800056c <HAL_ADC_Init+0x78>
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	689b      	ldr	r3, [r3, #8]
 800055c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000560:	d004      	beq.n	800056c <HAL_ADC_Init+0x78>
 8000562:	f240 11b5 	movw	r1, #437	; 0x1b5
 8000566:	4886      	ldr	r0, [pc, #536]	; (8000780 <HAL_ADC_Init+0x28c>)
 8000568:	f7ff fec8 	bl	80002fc <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	7b1b      	ldrb	r3, [r3, #12]
 8000570:	2b00      	cmp	r3, #0
 8000572:	d008      	beq.n	8000586 <HAL_ADC_Init+0x92>
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	7b1b      	ldrb	r3, [r3, #12]
 8000578:	2b01      	cmp	r3, #1
 800057a:	d004      	beq.n	8000586 <HAL_ADC_Init+0x92>
 800057c:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 8000580:	487f      	ldr	r0, [pc, #508]	; (8000780 <HAL_ADC_Init+0x28c>)
 8000582:	f7ff febb 	bl	80002fc <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	69db      	ldr	r3, [r3, #28]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d022      	beq.n	80005d4 <HAL_ADC_Init+0xe0>
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	69db      	ldr	r3, [r3, #28]
 8000592:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000596:	d01d      	beq.n	80005d4 <HAL_ADC_Init+0xe0>
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	69db      	ldr	r3, [r3, #28]
 800059c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80005a0:	d018      	beq.n	80005d4 <HAL_ADC_Init+0xe0>
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	69db      	ldr	r3, [r3, #28]
 80005a6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80005aa:	d013      	beq.n	80005d4 <HAL_ADC_Init+0xe0>
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	69db      	ldr	r3, [r3, #28]
 80005b0:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 80005b4:	d00e      	beq.n	80005d4 <HAL_ADC_Init+0xe0>
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	69db      	ldr	r3, [r3, #28]
 80005ba:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80005be:	d009      	beq.n	80005d4 <HAL_ADC_Init+0xe0>
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	69db      	ldr	r3, [r3, #28]
 80005c4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80005c8:	d004      	beq.n	80005d4 <HAL_ADC_Init+0xe0>
 80005ca:	f240 11b7 	movw	r1, #439	; 0x1b7
 80005ce:	486c      	ldr	r0, [pc, #432]	; (8000780 <HAL_ADC_Init+0x28c>)
 80005d0:	f7ff fe94 	bl	80002fc <assert_failed>
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	689b      	ldr	r3, [r3, #8]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d02a      	beq.n	8000632 <HAL_ADC_Init+0x13e>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	691b      	ldr	r3, [r3, #16]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d003      	beq.n	80005ec <HAL_ADC_Init+0xf8>
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	691b      	ldr	r3, [r3, #16]
 80005e8:	2b10      	cmp	r3, #16
 80005ea:	d904      	bls.n	80005f6 <HAL_ADC_Init+0x102>
 80005ec:	f240 11bb 	movw	r1, #443	; 0x1bb
 80005f0:	4863      	ldr	r0, [pc, #396]	; (8000780 <HAL_ADC_Init+0x28c>)
 80005f2:	f7ff fe83 	bl	80002fc <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	7d1b      	ldrb	r3, [r3, #20]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d008      	beq.n	8000610 <HAL_ADC_Init+0x11c>
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	7d1b      	ldrb	r3, [r3, #20]
 8000602:	2b01      	cmp	r3, #1
 8000604:	d004      	beq.n	8000610 <HAL_ADC_Init+0x11c>
 8000606:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 800060a:	485d      	ldr	r0, [pc, #372]	; (8000780 <HAL_ADC_Init+0x28c>)
 800060c:	f7ff fe76 	bl	80002fc <assert_failed>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	7d1b      	ldrb	r3, [r3, #20]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d00c      	beq.n	8000632 <HAL_ADC_Init+0x13e>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	699b      	ldr	r3, [r3, #24]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d003      	beq.n	8000628 <HAL_ADC_Init+0x134>
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	699b      	ldr	r3, [r3, #24]
 8000624:	2b08      	cmp	r3, #8
 8000626:	d904      	bls.n	8000632 <HAL_ADC_Init+0x13e>
 8000628:	f240 11bf 	movw	r1, #447	; 0x1bf
 800062c:	4854      	ldr	r0, [pc, #336]	; (8000780 <HAL_ADC_Init+0x28c>)
 800062e:	f7ff fe65 	bl	80002fc <assert_failed>
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000636:	2b00      	cmp	r3, #0
 8000638:	d109      	bne.n	800064e <HAL_ADC_Init+0x15a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	2200      	movs	r2, #0
 800063e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	2200      	movs	r2, #0
 8000644:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000648:	6878      	ldr	r0, [r7, #4]
 800064a:	f000 f8bd 	bl	80007c8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800064e:	6878      	ldr	r0, [r7, #4]
 8000650:	f000 fca6 	bl	8000fa0 <ADC_ConversionStop_Disable>
 8000654:	4603      	mov	r3, r0
 8000656:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800065c:	f003 0310 	and.w	r3, r3, #16
 8000660:	2b00      	cmp	r3, #0
 8000662:	f040 80a4 	bne.w	80007ae <HAL_ADC_Init+0x2ba>
 8000666:	7dfb      	ldrb	r3, [r7, #23]
 8000668:	2b00      	cmp	r3, #0
 800066a:	f040 80a0 	bne.w	80007ae <HAL_ADC_Init+0x2ba>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000672:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000676:	f023 0302 	bic.w	r3, r3, #2
 800067a:	f043 0202 	orr.w	r2, r3, #2
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800068a:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	7b1b      	ldrb	r3, [r3, #12]
 8000690:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000692:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000694:	68ba      	ldr	r2, [r7, #8]
 8000696:	4313      	orrs	r3, r2
 8000698:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	689b      	ldr	r3, [r3, #8]
 800069e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80006a2:	d003      	beq.n	80006ac <HAL_ADC_Init+0x1b8>
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	689b      	ldr	r3, [r3, #8]
 80006a8:	2b01      	cmp	r3, #1
 80006aa:	d102      	bne.n	80006b2 <HAL_ADC_Init+0x1be>
 80006ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006b0:	e000      	b.n	80006b4 <HAL_ADC_Init+0x1c0>
 80006b2:	2300      	movs	r3, #0
 80006b4:	693a      	ldr	r2, [r7, #16]
 80006b6:	4313      	orrs	r3, r2
 80006b8:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	7d1b      	ldrb	r3, [r3, #20]
 80006be:	2b01      	cmp	r3, #1
 80006c0:	d119      	bne.n	80006f6 <HAL_ADC_Init+0x202>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	7b1b      	ldrb	r3, [r3, #12]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d109      	bne.n	80006de <HAL_ADC_Init+0x1ea>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	699b      	ldr	r3, [r3, #24]
 80006ce:	3b01      	subs	r3, #1
 80006d0:	035a      	lsls	r2, r3, #13
 80006d2:	693b      	ldr	r3, [r7, #16]
 80006d4:	4313      	orrs	r3, r2
 80006d6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80006da:	613b      	str	r3, [r7, #16]
 80006dc:	e00b      	b.n	80006f6 <HAL_ADC_Init+0x202>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006e2:	f043 0220 	orr.w	r2, r3, #32
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006ee:	f043 0201 	orr.w	r2, r3, #1
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	685b      	ldr	r3, [r3, #4]
 80006fc:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	693a      	ldr	r2, [r7, #16]
 8000706:	430a      	orrs	r2, r1
 8000708:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	689a      	ldr	r2, [r3, #8]
 8000710:	4b1c      	ldr	r3, [pc, #112]	; (8000784 <HAL_ADC_Init+0x290>)
 8000712:	4013      	ands	r3, r2
 8000714:	687a      	ldr	r2, [r7, #4]
 8000716:	6812      	ldr	r2, [r2, #0]
 8000718:	68b9      	ldr	r1, [r7, #8]
 800071a:	430b      	orrs	r3, r1
 800071c:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	689b      	ldr	r3, [r3, #8]
 8000722:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000726:	d003      	beq.n	8000730 <HAL_ADC_Init+0x23c>
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	689b      	ldr	r3, [r3, #8]
 800072c:	2b01      	cmp	r3, #1
 800072e:	d104      	bne.n	800073a <HAL_ADC_Init+0x246>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	691b      	ldr	r3, [r3, #16]
 8000734:	3b01      	subs	r3, #1
 8000736:	051b      	lsls	r3, r3, #20
 8000738:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000740:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	68fa      	ldr	r2, [r7, #12]
 800074a:	430a      	orrs	r2, r1
 800074c:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	689a      	ldr	r2, [r3, #8]
 8000754:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <HAL_ADC_Init+0x294>)
 8000756:	4013      	ands	r3, r2
 8000758:	68ba      	ldr	r2, [r7, #8]
 800075a:	429a      	cmp	r2, r3
 800075c:	d116      	bne.n	800078c <HAL_ADC_Init+0x298>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	2200      	movs	r2, #0
 8000762:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000768:	f023 0303 	bic.w	r3, r3, #3
 800076c:	f043 0201 	orr.w	r2, r3, #1
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000774:	e023      	b.n	80007be <HAL_ADC_Init+0x2ca>
 8000776:	bf00      	nop
 8000778:	40012400 	.word	0x40012400
 800077c:	40012800 	.word	0x40012800
 8000780:	08001844 	.word	0x08001844
 8000784:	ffe1f7fd 	.word	0xffe1f7fd
 8000788:	ff1f0efe 	.word	0xff1f0efe
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000790:	f023 0312 	bic.w	r3, r3, #18
 8000794:	f043 0210 	orr.w	r2, r3, #16
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007a0:	f043 0201 	orr.w	r2, r3, #1
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80007a8:	2301      	movs	r3, #1
 80007aa:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80007ac:	e007      	b.n	80007be <HAL_ADC_Init+0x2ca>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007b2:	f043 0210 	orr.w	r2, r3, #16
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80007ba:	2301      	movs	r3, #1
 80007bc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80007be:	7dfb      	ldrb	r3, [r7, #23]
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	3718      	adds	r7, #24
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}

080007c8 <HAL_ADC_MspInit>:
  * @brief  Initializes the ADC MSP.
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_MspInit must be implemented in the user file.
   */ 
}
 80007d0:	bf00      	nop
 80007d2:	370c      	adds	r7, #12
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bc80      	pop	{r7}
 80007d8:	4770      	bx	lr
	...

080007dc <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80007e4:	2300      	movs	r3, #0
 80007e6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a58      	ldr	r2, [pc, #352]	; (8000950 <HAL_ADC_Start+0x174>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d009      	beq.n	8000806 <HAL_ADC_Start+0x2a>
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4a57      	ldr	r2, [pc, #348]	; (8000954 <HAL_ADC_Start+0x178>)
 80007f8:	4293      	cmp	r3, r2
 80007fa:	d004      	beq.n	8000806 <HAL_ADC_Start+0x2a>
 80007fc:	f240 411b 	movw	r1, #1051	; 0x41b
 8000800:	4855      	ldr	r0, [pc, #340]	; (8000958 <HAL_ADC_Start+0x17c>)
 8000802:	f7ff fd7b 	bl	80002fc <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800080c:	2b01      	cmp	r3, #1
 800080e:	d101      	bne.n	8000814 <HAL_ADC_Start+0x38>
 8000810:	2302      	movs	r3, #2
 8000812:	e098      	b.n	8000946 <HAL_ADC_Start+0x16a>
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	2201      	movs	r2, #1
 8000818:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800081c:	6878      	ldr	r0, [r7, #4]
 800081e:	f000 fb65 	bl	8000eec <ADC_Enable>
 8000822:	4603      	mov	r3, r0
 8000824:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000826:	7bfb      	ldrb	r3, [r7, #15]
 8000828:	2b00      	cmp	r3, #0
 800082a:	f040 8087 	bne.w	800093c <HAL_ADC_Start+0x160>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000832:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000836:	f023 0301 	bic.w	r3, r3, #1
 800083a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	4a43      	ldr	r2, [pc, #268]	; (8000954 <HAL_ADC_Start+0x178>)
 8000848:	4293      	cmp	r3, r2
 800084a:	d105      	bne.n	8000858 <HAL_ADC_Start+0x7c>
 800084c:	4b40      	ldr	r3, [pc, #256]	; (8000950 <HAL_ADC_Start+0x174>)
 800084e:	685b      	ldr	r3, [r3, #4]
 8000850:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000854:	2b00      	cmp	r3, #0
 8000856:	d115      	bne.n	8000884 <HAL_ADC_Start+0xa8>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800085c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	685b      	ldr	r3, [r3, #4]
 800086a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800086e:	2b00      	cmp	r3, #0
 8000870:	d026      	beq.n	80008c0 <HAL_ADC_Start+0xe4>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000876:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800087a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000882:	e01d      	b.n	80008c0 <HAL_ADC_Start+0xe4>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000888:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a2e      	ldr	r2, [pc, #184]	; (8000950 <HAL_ADC_Start+0x174>)
 8000896:	4293      	cmp	r3, r2
 8000898:	d004      	beq.n	80008a4 <HAL_ADC_Start+0xc8>
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	4a2d      	ldr	r2, [pc, #180]	; (8000954 <HAL_ADC_Start+0x178>)
 80008a0:	4293      	cmp	r3, r2
 80008a2:	d10d      	bne.n	80008c0 <HAL_ADC_Start+0xe4>
 80008a4:	4b2a      	ldr	r3, [pc, #168]	; (8000950 <HAL_ADC_Start+0x174>)
 80008a6:	685b      	ldr	r3, [r3, #4]
 80008a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d007      	beq.n	80008c0 <HAL_ADC_Start+0xe4>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008b4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80008b8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d006      	beq.n	80008da <HAL_ADC_Start+0xfe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008d0:	f023 0206 	bic.w	r2, r3, #6
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	62da      	str	r2, [r3, #44]	; 0x2c
 80008d8:	e002      	b.n	80008e0 <HAL_ADC_Start+0x104>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	2200      	movs	r2, #0
 80008de:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	2200      	movs	r2, #0
 80008e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f06f 0202 	mvn.w	r2, #2
 80008f0:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	689b      	ldr	r3, [r3, #8]
 80008f8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80008fc:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000900:	d113      	bne.n	800092a <HAL_ADC_Start+0x14e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000906:	4a13      	ldr	r2, [pc, #76]	; (8000954 <HAL_ADC_Start+0x178>)
 8000908:	4293      	cmp	r3, r2
 800090a:	d105      	bne.n	8000918 <HAL_ADC_Start+0x13c>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800090c:	4b10      	ldr	r3, [pc, #64]	; (8000950 <HAL_ADC_Start+0x174>)
 800090e:	685b      	ldr	r3, [r3, #4]
 8000910:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000914:	2b00      	cmp	r3, #0
 8000916:	d108      	bne.n	800092a <HAL_ADC_Start+0x14e>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	689a      	ldr	r2, [r3, #8]
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000926:	609a      	str	r2, [r3, #8]
 8000928:	e00c      	b.n	8000944 <HAL_ADC_Start+0x168>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	689a      	ldr	r2, [r3, #8]
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000938:	609a      	str	r2, [r3, #8]
 800093a:	e003      	b.n	8000944 <HAL_ADC_Start+0x168>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	2200      	movs	r2, #0
 8000940:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000944:	7bfb      	ldrb	r3, [r7, #15]
}
 8000946:	4618      	mov	r0, r3
 8000948:	3710      	adds	r7, #16
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40012400 	.word	0x40012400
 8000954:	40012800 	.word	0x40012800
 8000958:	08001844 	.word	0x08001844

0800095c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a72      	ldr	r2, [pc, #456]	; (8000b34 <HAL_ADC_IRQHandler+0x1d8>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d009      	beq.n	8000982 <HAL_ADC_IRQHandler+0x26>
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4a71      	ldr	r2, [pc, #452]	; (8000b38 <HAL_ADC_IRQHandler+0x1dc>)
 8000974:	4293      	cmp	r3, r2
 8000976:	d004      	beq.n	8000982 <HAL_ADC_IRQHandler+0x26>
 8000978:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800097c:	486f      	ldr	r0, [pc, #444]	; (8000b3c <HAL_ADC_IRQHandler+0x1e0>)
 800097e:	f7ff fcbd 	bl	80002fc <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	7b1b      	ldrb	r3, [r3, #12]
 8000986:	2b00      	cmp	r3, #0
 8000988:	d008      	beq.n	800099c <HAL_ADC_IRQHandler+0x40>
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	7b1b      	ldrb	r3, [r3, #12]
 800098e:	2b01      	cmp	r3, #1
 8000990:	d004      	beq.n	800099c <HAL_ADC_IRQHandler+0x40>
 8000992:	f240 7101 	movw	r1, #1793	; 0x701
 8000996:	4869      	ldr	r0, [pc, #420]	; (8000b3c <HAL_ADC_IRQHandler+0x1e0>)
 8000998:	f7ff fcb0 	bl	80002fc <assert_failed>
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	691b      	ldr	r3, [r3, #16]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d003      	beq.n	80009ac <HAL_ADC_IRQHandler+0x50>
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	691b      	ldr	r3, [r3, #16]
 80009a8:	2b10      	cmp	r3, #16
 80009aa:	d904      	bls.n	80009b6 <HAL_ADC_IRQHandler+0x5a>
 80009ac:	f240 7102 	movw	r1, #1794	; 0x702
 80009b0:	4862      	ldr	r0, [pc, #392]	; (8000b3c <HAL_ADC_IRQHandler+0x1e0>)
 80009b2:	f7ff fca3 	bl	80002fc <assert_failed>
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	685b      	ldr	r3, [r3, #4]
 80009bc:	f003 0320 	and.w	r3, r3, #32
 80009c0:	2b20      	cmp	r3, #32
 80009c2:	d140      	bne.n	8000a46 <HAL_ADC_IRQHandler+0xea>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	f003 0302 	and.w	r3, r3, #2
 80009ce:	2b02      	cmp	r3, #2
 80009d0:	d139      	bne.n	8000a46 <HAL_ADC_IRQHandler+0xea>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009d6:	f003 0310 	and.w	r3, r3, #16
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d105      	bne.n	80009ea <HAL_ADC_IRQHandler+0x8e>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009e2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	689b      	ldr	r3, [r3, #8]
 80009f0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80009f4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80009f8:	d11d      	bne.n	8000a36 <HAL_ADC_IRQHandler+0xda>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d119      	bne.n	8000a36 <HAL_ADC_IRQHandler+0xda>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	685a      	ldr	r2, [r3, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f022 0220 	bic.w	r2, r2, #32
 8000a10:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d105      	bne.n	8000a36 <HAL_ADC_IRQHandler+0xda>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a2e:	f043 0201 	orr.w	r2, r3, #1
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8000a36:	6878      	ldr	r0, [r7, #4]
 8000a38:	f000 f882 	bl	8000b40 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	f06f 0212 	mvn.w	r2, #18
 8000a44:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	685b      	ldr	r3, [r3, #4]
 8000a4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a50:	2b80      	cmp	r3, #128	; 0x80
 8000a52:	d14f      	bne.n	8000af4 <HAL_ADC_IRQHandler+0x198>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	f003 0304 	and.w	r3, r3, #4
 8000a5e:	2b04      	cmp	r3, #4
 8000a60:	d148      	bne.n	8000af4 <HAL_ADC_IRQHandler+0x198>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a66:	f003 0310 	and.w	r3, r3, #16
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d105      	bne.n	8000a7a <HAL_ADC_IRQHandler+0x11e>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a72:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	689b      	ldr	r3, [r3, #8]
 8000a80:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8000a84:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8000a88:	d012      	beq.n	8000ab0 <HAL_ADC_IRQHandler+0x154>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	685b      	ldr	r3, [r3, #4]
 8000a90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d125      	bne.n	8000ae4 <HAL_ADC_IRQHandler+0x188>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	689b      	ldr	r3, [r3, #8]
 8000a9e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000aa2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000aa6:	d11d      	bne.n	8000ae4 <HAL_ADC_IRQHandler+0x188>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d119      	bne.n	8000ae4 <HAL_ADC_IRQHandler+0x188>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	685a      	ldr	r2, [r3, #4]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000abe:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ac4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d105      	bne.n	8000ae4 <HAL_ADC_IRQHandler+0x188>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000adc:	f043 0201 	orr.w	r2, r3, #1
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000ae4:	6878      	ldr	r0, [r7, #4]
 8000ae6:	f000 fa9c 	bl	8001022 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	f06f 020c 	mvn.w	r2, #12
 8000af2:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	685b      	ldr	r3, [r3, #4]
 8000afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000afe:	2b40      	cmp	r3, #64	; 0x40
 8000b00:	d114      	bne.n	8000b2c <HAL_ADC_IRQHandler+0x1d0>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f003 0301 	and.w	r3, r3, #1
 8000b0c:	2b01      	cmp	r3, #1
 8000b0e:	d10d      	bne.n	8000b2c <HAL_ADC_IRQHandler+0x1d0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b14:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f000 f818 	bl	8000b52 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	f06f 0201 	mvn.w	r2, #1
 8000b2a:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8000b2c:	bf00      	nop
 8000b2e:	3708      	adds	r7, #8
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	40012400 	.word	0x40012400
 8000b38:	40012800 	.word	0x40012800
 8000b3c:	08001844 	.word	0x08001844

08000b40 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000b48:	bf00      	nop
 8000b4a:	370c      	adds	r7, #12
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bc80      	pop	{r7}
 8000b50:	4770      	bx	lr

08000b52 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000b52:	b480      	push	{r7}
 8000b54:	b083      	sub	sp, #12
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8000b5a:	bf00      	nop
 8000b5c:	370c      	adds	r7, #12
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bc80      	pop	{r7}
 8000b62:	4770      	bx	lr

08000b64 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
 8000b6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000b72:	2300      	movs	r3, #0
 8000b74:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4a88      	ldr	r2, [pc, #544]	; (8000d9c <HAL_ADC_ConfigChannel+0x238>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d009      	beq.n	8000b94 <HAL_ADC_ConfigChannel+0x30>
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a86      	ldr	r2, [pc, #536]	; (8000da0 <HAL_ADC_ConfigChannel+0x23c>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d004      	beq.n	8000b94 <HAL_ADC_ConfigChannel+0x30>
 8000b8a:	f240 71dd 	movw	r1, #2013	; 0x7dd
 8000b8e:	4885      	ldr	r0, [pc, #532]	; (8000da4 <HAL_ADC_ConfigChannel+0x240>)
 8000b90:	f7ff fbb4 	bl	80002fc <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d048      	beq.n	8000c2e <HAL_ADC_ConfigChannel+0xca>
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	2b01      	cmp	r3, #1
 8000ba2:	d044      	beq.n	8000c2e <HAL_ADC_ConfigChannel+0xca>
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	2b02      	cmp	r3, #2
 8000baa:	d040      	beq.n	8000c2e <HAL_ADC_ConfigChannel+0xca>
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	2b03      	cmp	r3, #3
 8000bb2:	d03c      	beq.n	8000c2e <HAL_ADC_ConfigChannel+0xca>
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	2b04      	cmp	r3, #4
 8000bba:	d038      	beq.n	8000c2e <HAL_ADC_ConfigChannel+0xca>
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	2b05      	cmp	r3, #5
 8000bc2:	d034      	beq.n	8000c2e <HAL_ADC_ConfigChannel+0xca>
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	2b06      	cmp	r3, #6
 8000bca:	d030      	beq.n	8000c2e <HAL_ADC_ConfigChannel+0xca>
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	2b07      	cmp	r3, #7
 8000bd2:	d02c      	beq.n	8000c2e <HAL_ADC_ConfigChannel+0xca>
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	2b08      	cmp	r3, #8
 8000bda:	d028      	beq.n	8000c2e <HAL_ADC_ConfigChannel+0xca>
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	2b09      	cmp	r3, #9
 8000be2:	d024      	beq.n	8000c2e <HAL_ADC_ConfigChannel+0xca>
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	2b0a      	cmp	r3, #10
 8000bea:	d020      	beq.n	8000c2e <HAL_ADC_ConfigChannel+0xca>
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	2b0b      	cmp	r3, #11
 8000bf2:	d01c      	beq.n	8000c2e <HAL_ADC_ConfigChannel+0xca>
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	2b0c      	cmp	r3, #12
 8000bfa:	d018      	beq.n	8000c2e <HAL_ADC_ConfigChannel+0xca>
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	2b0d      	cmp	r3, #13
 8000c02:	d014      	beq.n	8000c2e <HAL_ADC_ConfigChannel+0xca>
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	2b0e      	cmp	r3, #14
 8000c0a:	d010      	beq.n	8000c2e <HAL_ADC_ConfigChannel+0xca>
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	2b0f      	cmp	r3, #15
 8000c12:	d00c      	beq.n	8000c2e <HAL_ADC_ConfigChannel+0xca>
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	2b10      	cmp	r3, #16
 8000c1a:	d008      	beq.n	8000c2e <HAL_ADC_ConfigChannel+0xca>
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	2b11      	cmp	r3, #17
 8000c22:	d004      	beq.n	8000c2e <HAL_ADC_ConfigChannel+0xca>
 8000c24:	f240 71de 	movw	r1, #2014	; 0x7de
 8000c28:	485e      	ldr	r0, [pc, #376]	; (8000da4 <HAL_ADC_ConfigChannel+0x240>)
 8000c2a:	f7ff fb67 	bl	80002fc <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	2b01      	cmp	r3, #1
 8000c34:	d040      	beq.n	8000cb8 <HAL_ADC_ConfigChannel+0x154>
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	2b02      	cmp	r3, #2
 8000c3c:	d03c      	beq.n	8000cb8 <HAL_ADC_ConfigChannel+0x154>
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	2b03      	cmp	r3, #3
 8000c44:	d038      	beq.n	8000cb8 <HAL_ADC_ConfigChannel+0x154>
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	2b04      	cmp	r3, #4
 8000c4c:	d034      	beq.n	8000cb8 <HAL_ADC_ConfigChannel+0x154>
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	2b05      	cmp	r3, #5
 8000c54:	d030      	beq.n	8000cb8 <HAL_ADC_ConfigChannel+0x154>
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	2b06      	cmp	r3, #6
 8000c5c:	d02c      	beq.n	8000cb8 <HAL_ADC_ConfigChannel+0x154>
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	2b07      	cmp	r3, #7
 8000c64:	d028      	beq.n	8000cb8 <HAL_ADC_ConfigChannel+0x154>
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	2b08      	cmp	r3, #8
 8000c6c:	d024      	beq.n	8000cb8 <HAL_ADC_ConfigChannel+0x154>
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	2b09      	cmp	r3, #9
 8000c74:	d020      	beq.n	8000cb8 <HAL_ADC_ConfigChannel+0x154>
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	2b0a      	cmp	r3, #10
 8000c7c:	d01c      	beq.n	8000cb8 <HAL_ADC_ConfigChannel+0x154>
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	2b0b      	cmp	r3, #11
 8000c84:	d018      	beq.n	8000cb8 <HAL_ADC_ConfigChannel+0x154>
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	2b0c      	cmp	r3, #12
 8000c8c:	d014      	beq.n	8000cb8 <HAL_ADC_ConfigChannel+0x154>
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	2b0d      	cmp	r3, #13
 8000c94:	d010      	beq.n	8000cb8 <HAL_ADC_ConfigChannel+0x154>
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	2b0e      	cmp	r3, #14
 8000c9c:	d00c      	beq.n	8000cb8 <HAL_ADC_ConfigChannel+0x154>
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	2b0f      	cmp	r3, #15
 8000ca4:	d008      	beq.n	8000cb8 <HAL_ADC_ConfigChannel+0x154>
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	2b10      	cmp	r3, #16
 8000cac:	d004      	beq.n	8000cb8 <HAL_ADC_ConfigChannel+0x154>
 8000cae:	f240 71df 	movw	r1, #2015	; 0x7df
 8000cb2:	483c      	ldr	r0, [pc, #240]	; (8000da4 <HAL_ADC_ConfigChannel+0x240>)
 8000cb4:	f7ff fb22 	bl	80002fc <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	689b      	ldr	r3, [r3, #8]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d020      	beq.n	8000d02 <HAL_ADC_ConfigChannel+0x19e>
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	689b      	ldr	r3, [r3, #8]
 8000cc4:	2b01      	cmp	r3, #1
 8000cc6:	d01c      	beq.n	8000d02 <HAL_ADC_ConfigChannel+0x19e>
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	689b      	ldr	r3, [r3, #8]
 8000ccc:	2b02      	cmp	r3, #2
 8000cce:	d018      	beq.n	8000d02 <HAL_ADC_ConfigChannel+0x19e>
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	689b      	ldr	r3, [r3, #8]
 8000cd4:	2b03      	cmp	r3, #3
 8000cd6:	d014      	beq.n	8000d02 <HAL_ADC_ConfigChannel+0x19e>
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	689b      	ldr	r3, [r3, #8]
 8000cdc:	2b04      	cmp	r3, #4
 8000cde:	d010      	beq.n	8000d02 <HAL_ADC_ConfigChannel+0x19e>
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	689b      	ldr	r3, [r3, #8]
 8000ce4:	2b05      	cmp	r3, #5
 8000ce6:	d00c      	beq.n	8000d02 <HAL_ADC_ConfigChannel+0x19e>
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	689b      	ldr	r3, [r3, #8]
 8000cec:	2b06      	cmp	r3, #6
 8000cee:	d008      	beq.n	8000d02 <HAL_ADC_ConfigChannel+0x19e>
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	689b      	ldr	r3, [r3, #8]
 8000cf4:	2b07      	cmp	r3, #7
 8000cf6:	d004      	beq.n	8000d02 <HAL_ADC_ConfigChannel+0x19e>
 8000cf8:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 8000cfc:	4829      	ldr	r0, [pc, #164]	; (8000da4 <HAL_ADC_ConfigChannel+0x240>)
 8000cfe:	f7ff fafd 	bl	80002fc <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d101      	bne.n	8000d10 <HAL_ADC_ConfigChannel+0x1ac>
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	e0e2      	b.n	8000ed6 <HAL_ADC_ConfigChannel+0x372>
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2201      	movs	r2, #1
 8000d14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	2b06      	cmp	r3, #6
 8000d1e:	d81c      	bhi.n	8000d5a <HAL_ADC_ConfigChannel+0x1f6>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	685a      	ldr	r2, [r3, #4]
 8000d2a:	4613      	mov	r3, r2
 8000d2c:	009b      	lsls	r3, r3, #2
 8000d2e:	4413      	add	r3, r2
 8000d30:	3b05      	subs	r3, #5
 8000d32:	221f      	movs	r2, #31
 8000d34:	fa02 f303 	lsl.w	r3, r2, r3
 8000d38:	43db      	mvns	r3, r3
 8000d3a:	4019      	ands	r1, r3
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	6818      	ldr	r0, [r3, #0]
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	685a      	ldr	r2, [r3, #4]
 8000d44:	4613      	mov	r3, r2
 8000d46:	009b      	lsls	r3, r3, #2
 8000d48:	4413      	add	r3, r2
 8000d4a:	3b05      	subs	r3, #5
 8000d4c:	fa00 f203 	lsl.w	r2, r0, r3
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	430a      	orrs	r2, r1
 8000d56:	635a      	str	r2, [r3, #52]	; 0x34
 8000d58:	e042      	b.n	8000de0 <HAL_ADC_ConfigChannel+0x27c>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	2b0c      	cmp	r3, #12
 8000d60:	d822      	bhi.n	8000da8 <HAL_ADC_ConfigChannel+0x244>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	685a      	ldr	r2, [r3, #4]
 8000d6c:	4613      	mov	r3, r2
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	4413      	add	r3, r2
 8000d72:	3b23      	subs	r3, #35	; 0x23
 8000d74:	221f      	movs	r2, #31
 8000d76:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7a:	43db      	mvns	r3, r3
 8000d7c:	4019      	ands	r1, r3
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	6818      	ldr	r0, [r3, #0]
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	685a      	ldr	r2, [r3, #4]
 8000d86:	4613      	mov	r3, r2
 8000d88:	009b      	lsls	r3, r3, #2
 8000d8a:	4413      	add	r3, r2
 8000d8c:	3b23      	subs	r3, #35	; 0x23
 8000d8e:	fa00 f203 	lsl.w	r2, r0, r3
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	430a      	orrs	r2, r1
 8000d98:	631a      	str	r2, [r3, #48]	; 0x30
 8000d9a:	e021      	b.n	8000de0 <HAL_ADC_ConfigChannel+0x27c>
 8000d9c:	40012400 	.word	0x40012400
 8000da0:	40012800 	.word	0x40012800
 8000da4:	08001844 	.word	0x08001844
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	685a      	ldr	r2, [r3, #4]
 8000db2:	4613      	mov	r3, r2
 8000db4:	009b      	lsls	r3, r3, #2
 8000db6:	4413      	add	r3, r2
 8000db8:	3b41      	subs	r3, #65	; 0x41
 8000dba:	221f      	movs	r2, #31
 8000dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc0:	43db      	mvns	r3, r3
 8000dc2:	4019      	ands	r1, r3
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	6818      	ldr	r0, [r3, #0]
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	685a      	ldr	r2, [r3, #4]
 8000dcc:	4613      	mov	r3, r2
 8000dce:	009b      	lsls	r3, r3, #2
 8000dd0:	4413      	add	r3, r2
 8000dd2:	3b41      	subs	r3, #65	; 0x41
 8000dd4:	fa00 f203 	lsl.w	r2, r0, r3
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	430a      	orrs	r2, r1
 8000dde:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	2b09      	cmp	r3, #9
 8000de6:	d91c      	bls.n	8000e22 <HAL_ADC_ConfigChannel+0x2be>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	68d9      	ldr	r1, [r3, #12]
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	4613      	mov	r3, r2
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	4413      	add	r3, r2
 8000df8:	3b1e      	subs	r3, #30
 8000dfa:	2207      	movs	r2, #7
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	43db      	mvns	r3, r3
 8000e02:	4019      	ands	r1, r3
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	6898      	ldr	r0, [r3, #8]
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	4613      	mov	r3, r2
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	4413      	add	r3, r2
 8000e12:	3b1e      	subs	r3, #30
 8000e14:	fa00 f203 	lsl.w	r2, r0, r3
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	430a      	orrs	r2, r1
 8000e1e:	60da      	str	r2, [r3, #12]
 8000e20:	e019      	b.n	8000e56 <HAL_ADC_ConfigChannel+0x2f2>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	6919      	ldr	r1, [r3, #16]
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	4613      	mov	r3, r2
 8000e2e:	005b      	lsls	r3, r3, #1
 8000e30:	4413      	add	r3, r2
 8000e32:	2207      	movs	r2, #7
 8000e34:	fa02 f303 	lsl.w	r3, r2, r3
 8000e38:	43db      	mvns	r3, r3
 8000e3a:	4019      	ands	r1, r3
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	6898      	ldr	r0, [r3, #8]
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	4613      	mov	r3, r2
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	4413      	add	r3, r2
 8000e4a:	fa00 f203 	lsl.w	r2, r0, r3
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	430a      	orrs	r2, r1
 8000e54:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	2b10      	cmp	r3, #16
 8000e5c:	d003      	beq.n	8000e66 <HAL_ADC_ConfigChannel+0x302>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000e62:	2b11      	cmp	r3, #17
 8000e64:	d132      	bne.n	8000ecc <HAL_ADC_ConfigChannel+0x368>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a1d      	ldr	r2, [pc, #116]	; (8000ee0 <HAL_ADC_ConfigChannel+0x37c>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d125      	bne.n	8000ebc <HAL_ADC_ConfigChannel+0x358>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	689b      	ldr	r3, [r3, #8]
 8000e76:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d126      	bne.n	8000ecc <HAL_ADC_ConfigChannel+0x368>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	689a      	ldr	r2, [r3, #8]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000e8c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	2b10      	cmp	r3, #16
 8000e94:	d11a      	bne.n	8000ecc <HAL_ADC_ConfigChannel+0x368>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000e96:	4b13      	ldr	r3, [pc, #76]	; (8000ee4 <HAL_ADC_ConfigChannel+0x380>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a13      	ldr	r2, [pc, #76]	; (8000ee8 <HAL_ADC_ConfigChannel+0x384>)
 8000e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8000ea0:	0c9a      	lsrs	r2, r3, #18
 8000ea2:	4613      	mov	r3, r2
 8000ea4:	009b      	lsls	r3, r3, #2
 8000ea6:	4413      	add	r3, r2
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000eac:	e002      	b.n	8000eb4 <HAL_ADC_ConfigChannel+0x350>
          {
            wait_loop_index--;
 8000eae:	68bb      	ldr	r3, [r7, #8]
 8000eb0:	3b01      	subs	r3, #1
 8000eb2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d1f9      	bne.n	8000eae <HAL_ADC_ConfigChannel+0x34a>
 8000eba:	e007      	b.n	8000ecc <HAL_ADC_ConfigChannel+0x368>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ec0:	f043 0220 	orr.w	r2, r3, #32
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2200      	movs	r2, #0
 8000ed0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3710      	adds	r7, #16
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	40012400 	.word	0x40012400
 8000ee4:	20000000 	.word	0x20000000
 8000ee8:	431bde83 	.word	0x431bde83

08000eec <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	689b      	ldr	r3, [r3, #8]
 8000f02:	f003 0301 	and.w	r3, r3, #1
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d040      	beq.n	8000f8c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	689a      	ldr	r2, [r3, #8]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f042 0201 	orr.w	r2, r2, #1
 8000f18:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000f1a:	4b1f      	ldr	r3, [pc, #124]	; (8000f98 <ADC_Enable+0xac>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a1f      	ldr	r2, [pc, #124]	; (8000f9c <ADC_Enable+0xb0>)
 8000f20:	fba2 2303 	umull	r2, r3, r2, r3
 8000f24:	0c9b      	lsrs	r3, r3, #18
 8000f26:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000f28:	e002      	b.n	8000f30 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000f2a:	68bb      	ldr	r3, [r7, #8]
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d1f9      	bne.n	8000f2a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000f36:	f7ff fad3 	bl	80004e0 <HAL_GetTick>
 8000f3a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000f3c:	e01f      	b.n	8000f7e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000f3e:	f7ff facf 	bl	80004e0 <HAL_GetTick>
 8000f42:	4602      	mov	r2, r0
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	1ad3      	subs	r3, r2, r3
 8000f48:	2b02      	cmp	r3, #2
 8000f4a:	d918      	bls.n	8000f7e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	689b      	ldr	r3, [r3, #8]
 8000f52:	f003 0301 	and.w	r3, r3, #1
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d011      	beq.n	8000f7e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f5e:	f043 0210 	orr.w	r2, r3, #16
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f6a:	f043 0201 	orr.w	r2, r3, #1
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2200      	movs	r2, #0
 8000f76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e007      	b.n	8000f8e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	689b      	ldr	r3, [r3, #8]
 8000f84:	f003 0301 	and.w	r3, r3, #1
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d1d8      	bne.n	8000f3e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000f8c:	2300      	movs	r3, #0
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3710      	adds	r7, #16
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	20000000 	.word	0x20000000
 8000f9c:	431bde83 	.word	0x431bde83

08000fa0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	689b      	ldr	r3, [r3, #8]
 8000fb2:	f003 0301 	and.w	r3, r3, #1
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d12e      	bne.n	8001018 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	689a      	ldr	r2, [r3, #8]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f022 0201 	bic.w	r2, r2, #1
 8000fc8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000fca:	f7ff fa89 	bl	80004e0 <HAL_GetTick>
 8000fce:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000fd0:	e01b      	b.n	800100a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000fd2:	f7ff fa85 	bl	80004e0 <HAL_GetTick>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	1ad3      	subs	r3, r2, r3
 8000fdc:	2b02      	cmp	r3, #2
 8000fde:	d914      	bls.n	800100a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	689b      	ldr	r3, [r3, #8]
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d10d      	bne.n	800100a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ff2:	f043 0210 	orr.w	r2, r3, #16
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ffe:	f043 0201 	orr.w	r2, r3, #1
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	e007      	b.n	800101a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	689b      	ldr	r3, [r3, #8]
 8001010:	f003 0301 	and.w	r3, r3, #1
 8001014:	2b01      	cmp	r3, #1
 8001016:	d0dc      	beq.n	8000fd2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001018:	2300      	movs	r3, #0
}
 800101a:	4618      	mov	r0, r3
 800101c:	3710      	adds	r7, #16
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001022:	b480      	push	{r7}
 8001024:	b083      	sub	sp, #12
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800102a:	bf00      	nop
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	bc80      	pop	{r7}
 8001032:	4770      	bx	lr

08001034 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001034:	b480      	push	{r7}
 8001036:	b085      	sub	sp, #20
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	f003 0307 	and.w	r3, r3, #7
 8001042:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001044:	4b0c      	ldr	r3, [pc, #48]	; (8001078 <__NVIC_SetPriorityGrouping+0x44>)
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800104a:	68ba      	ldr	r2, [r7, #8]
 800104c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001050:	4013      	ands	r3, r2
 8001052:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800105c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001060:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001064:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001066:	4a04      	ldr	r2, [pc, #16]	; (8001078 <__NVIC_SetPriorityGrouping+0x44>)
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	60d3      	str	r3, [r2, #12]
}
 800106c:	bf00      	nop
 800106e:	3714      	adds	r7, #20
 8001070:	46bd      	mov	sp, r7
 8001072:	bc80      	pop	{r7}
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001080:	4b04      	ldr	r3, [pc, #16]	; (8001094 <__NVIC_GetPriorityGrouping+0x18>)
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	0a1b      	lsrs	r3, r3, #8
 8001086:	f003 0307 	and.w	r3, r3, #7
}
 800108a:	4618      	mov	r0, r3
 800108c:	46bd      	mov	sp, r7
 800108e:	bc80      	pop	{r7}
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	e000ed00 	.word	0xe000ed00

08001098 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	db0b      	blt.n	80010c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	f003 021f 	and.w	r2, r3, #31
 80010b0:	4906      	ldr	r1, [pc, #24]	; (80010cc <__NVIC_EnableIRQ+0x34>)
 80010b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b6:	095b      	lsrs	r3, r3, #5
 80010b8:	2001      	movs	r0, #1
 80010ba:	fa00 f202 	lsl.w	r2, r0, r2
 80010be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010c2:	bf00      	nop
 80010c4:	370c      	adds	r7, #12
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bc80      	pop	{r7}
 80010ca:	4770      	bx	lr
 80010cc:	e000e100 	.word	0xe000e100

080010d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	6039      	str	r1, [r7, #0]
 80010da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	db0a      	blt.n	80010fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	b2da      	uxtb	r2, r3
 80010e8:	490c      	ldr	r1, [pc, #48]	; (800111c <__NVIC_SetPriority+0x4c>)
 80010ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ee:	0112      	lsls	r2, r2, #4
 80010f0:	b2d2      	uxtb	r2, r2
 80010f2:	440b      	add	r3, r1
 80010f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010f8:	e00a      	b.n	8001110 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	b2da      	uxtb	r2, r3
 80010fe:	4908      	ldr	r1, [pc, #32]	; (8001120 <__NVIC_SetPriority+0x50>)
 8001100:	79fb      	ldrb	r3, [r7, #7]
 8001102:	f003 030f 	and.w	r3, r3, #15
 8001106:	3b04      	subs	r3, #4
 8001108:	0112      	lsls	r2, r2, #4
 800110a:	b2d2      	uxtb	r2, r2
 800110c:	440b      	add	r3, r1
 800110e:	761a      	strb	r2, [r3, #24]
}
 8001110:	bf00      	nop
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	bc80      	pop	{r7}
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	e000e100 	.word	0xe000e100
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001124:	b480      	push	{r7}
 8001126:	b089      	sub	sp, #36	; 0x24
 8001128:	af00      	add	r7, sp, #0
 800112a:	60f8      	str	r0, [r7, #12]
 800112c:	60b9      	str	r1, [r7, #8]
 800112e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	f003 0307 	and.w	r3, r3, #7
 8001136:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	f1c3 0307 	rsb	r3, r3, #7
 800113e:	2b04      	cmp	r3, #4
 8001140:	bf28      	it	cs
 8001142:	2304      	movcs	r3, #4
 8001144:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	3304      	adds	r3, #4
 800114a:	2b06      	cmp	r3, #6
 800114c:	d902      	bls.n	8001154 <NVIC_EncodePriority+0x30>
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	3b03      	subs	r3, #3
 8001152:	e000      	b.n	8001156 <NVIC_EncodePriority+0x32>
 8001154:	2300      	movs	r3, #0
 8001156:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001158:	f04f 32ff 	mov.w	r2, #4294967295
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	43da      	mvns	r2, r3
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	401a      	ands	r2, r3
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800116c:	f04f 31ff 	mov.w	r1, #4294967295
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	fa01 f303 	lsl.w	r3, r1, r3
 8001176:	43d9      	mvns	r1, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800117c:	4313      	orrs	r3, r2
         );
}
 800117e:	4618      	mov	r0, r3
 8001180:	3724      	adds	r7, #36	; 0x24
 8001182:	46bd      	mov	sp, r7
 8001184:	bc80      	pop	{r7}
 8001186:	4770      	bx	lr

08001188 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	3b01      	subs	r3, #1
 8001194:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001198:	d301      	bcc.n	800119e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800119a:	2301      	movs	r3, #1
 800119c:	e00f      	b.n	80011be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800119e:	4a0a      	ldr	r2, [pc, #40]	; (80011c8 <SysTick_Config+0x40>)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	3b01      	subs	r3, #1
 80011a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011a6:	210f      	movs	r1, #15
 80011a8:	f04f 30ff 	mov.w	r0, #4294967295
 80011ac:	f7ff ff90 	bl	80010d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011b0:	4b05      	ldr	r3, [pc, #20]	; (80011c8 <SysTick_Config+0x40>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011b6:	4b04      	ldr	r3, [pc, #16]	; (80011c8 <SysTick_Config+0x40>)
 80011b8:	2207      	movs	r2, #7
 80011ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011bc:	2300      	movs	r3, #0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	e000e010 	.word	0xe000e010

080011cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2b07      	cmp	r3, #7
 80011d8:	d00f      	beq.n	80011fa <HAL_NVIC_SetPriorityGrouping+0x2e>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2b06      	cmp	r3, #6
 80011de:	d00c      	beq.n	80011fa <HAL_NVIC_SetPriorityGrouping+0x2e>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2b05      	cmp	r3, #5
 80011e4:	d009      	beq.n	80011fa <HAL_NVIC_SetPriorityGrouping+0x2e>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2b04      	cmp	r3, #4
 80011ea:	d006      	beq.n	80011fa <HAL_NVIC_SetPriorityGrouping+0x2e>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2b03      	cmp	r3, #3
 80011f0:	d003      	beq.n	80011fa <HAL_NVIC_SetPriorityGrouping+0x2e>
 80011f2:	2192      	movs	r1, #146	; 0x92
 80011f4:	4804      	ldr	r0, [pc, #16]	; (8001208 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80011f6:	f7ff f881 	bl	80002fc <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f7ff ff1a 	bl	8001034 <__NVIC_SetPriorityGrouping>
}
 8001200:	bf00      	nop
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	0800187c 	.word	0x0800187c

0800120c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800120c:	b580      	push	{r7, lr}
 800120e:	b086      	sub	sp, #24
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	607a      	str	r2, [r7, #4]
 8001218:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800121a:	2300      	movs	r3, #0
 800121c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2b0f      	cmp	r3, #15
 8001222:	d903      	bls.n	800122c <HAL_NVIC_SetPriority+0x20>
 8001224:	21aa      	movs	r1, #170	; 0xaa
 8001226:	480e      	ldr	r0, [pc, #56]	; (8001260 <HAL_NVIC_SetPriority+0x54>)
 8001228:	f7ff f868 	bl	80002fc <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	2b0f      	cmp	r3, #15
 8001230:	d903      	bls.n	800123a <HAL_NVIC_SetPriority+0x2e>
 8001232:	21ab      	movs	r1, #171	; 0xab
 8001234:	480a      	ldr	r0, [pc, #40]	; (8001260 <HAL_NVIC_SetPriority+0x54>)
 8001236:	f7ff f861 	bl	80002fc <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800123a:	f7ff ff1f 	bl	800107c <__NVIC_GetPriorityGrouping>
 800123e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001240:	687a      	ldr	r2, [r7, #4]
 8001242:	68b9      	ldr	r1, [r7, #8]
 8001244:	6978      	ldr	r0, [r7, #20]
 8001246:	f7ff ff6d 	bl	8001124 <NVIC_EncodePriority>
 800124a:	4602      	mov	r2, r0
 800124c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001250:	4611      	mov	r1, r2
 8001252:	4618      	mov	r0, r3
 8001254:	f7ff ff3c 	bl	80010d0 <__NVIC_SetPriority>
}
 8001258:	bf00      	nop
 800125a:	3718      	adds	r7, #24
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	0800187c 	.word	0x0800187c

08001264 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800126e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001272:	2b00      	cmp	r3, #0
 8001274:	da03      	bge.n	800127e <HAL_NVIC_EnableIRQ+0x1a>
 8001276:	21be      	movs	r1, #190	; 0xbe
 8001278:	4805      	ldr	r0, [pc, #20]	; (8001290 <HAL_NVIC_EnableIRQ+0x2c>)
 800127a:	f7ff f83f 	bl	80002fc <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800127e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff ff08 	bl	8001098 <__NVIC_EnableIRQ>
}
 8001288:	bf00      	nop
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	0800187c 	.word	0x0800187c

08001294 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f7ff ff73 	bl	8001188 <SysTick_Config>
 80012a2:	4603      	mov	r3, r0
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}

080012ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b08a      	sub	sp, #40	; 0x28
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012b6:	2300      	movs	r3, #0
 80012b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80012ba:	2300      	movs	r3, #0
 80012bc:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a92      	ldr	r2, [pc, #584]	; (800150c <HAL_GPIO_Init+0x260>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d00f      	beq.n	80012e6 <HAL_GPIO_Init+0x3a>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a91      	ldr	r2, [pc, #580]	; (8001510 <HAL_GPIO_Init+0x264>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d00b      	beq.n	80012e6 <HAL_GPIO_Init+0x3a>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a90      	ldr	r2, [pc, #576]	; (8001514 <HAL_GPIO_Init+0x268>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d007      	beq.n	80012e6 <HAL_GPIO_Init+0x3a>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a8f      	ldr	r2, [pc, #572]	; (8001518 <HAL_GPIO_Init+0x26c>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d003      	beq.n	80012e6 <HAL_GPIO_Init+0x3a>
 80012de:	21bd      	movs	r1, #189	; 0xbd
 80012e0:	488e      	ldr	r0, [pc, #568]	; (800151c <HAL_GPIO_Init+0x270>)
 80012e2:	f7ff f80b 	bl	80002fc <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d005      	beq.n	80012fc <HAL_GPIO_Init+0x50>
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	0c1b      	lsrs	r3, r3, #16
 80012f6:	041b      	lsls	r3, r3, #16
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d003      	beq.n	8001304 <HAL_GPIO_Init+0x58>
 80012fc:	21be      	movs	r1, #190	; 0xbe
 80012fe:	4887      	ldr	r0, [pc, #540]	; (800151c <HAL_GPIO_Init+0x270>)
 8001300:	f7fe fffc 	bl	80002fc <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	2b00      	cmp	r3, #0
 800130a:	f000 8210 	beq.w	800172e <HAL_GPIO_Init+0x482>
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	2b01      	cmp	r3, #1
 8001314:	f000 820b 	beq.w	800172e <HAL_GPIO_Init+0x482>
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	2b11      	cmp	r3, #17
 800131e:	f000 8206 	beq.w	800172e <HAL_GPIO_Init+0x482>
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	2b02      	cmp	r3, #2
 8001328:	f000 8201 	beq.w	800172e <HAL_GPIO_Init+0x482>
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	2b12      	cmp	r3, #18
 8001332:	f000 81fc 	beq.w	800172e <HAL_GPIO_Init+0x482>
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	4a79      	ldr	r2, [pc, #484]	; (8001520 <HAL_GPIO_Init+0x274>)
 800133c:	4293      	cmp	r3, r2
 800133e:	f000 81f6 	beq.w	800172e <HAL_GPIO_Init+0x482>
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	4a77      	ldr	r2, [pc, #476]	; (8001524 <HAL_GPIO_Init+0x278>)
 8001348:	4293      	cmp	r3, r2
 800134a:	f000 81f0 	beq.w	800172e <HAL_GPIO_Init+0x482>
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	4a75      	ldr	r2, [pc, #468]	; (8001528 <HAL_GPIO_Init+0x27c>)
 8001354:	4293      	cmp	r3, r2
 8001356:	f000 81ea 	beq.w	800172e <HAL_GPIO_Init+0x482>
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	4a73      	ldr	r2, [pc, #460]	; (800152c <HAL_GPIO_Init+0x280>)
 8001360:	4293      	cmp	r3, r2
 8001362:	f000 81e4 	beq.w	800172e <HAL_GPIO_Init+0x482>
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	4a71      	ldr	r2, [pc, #452]	; (8001530 <HAL_GPIO_Init+0x284>)
 800136c:	4293      	cmp	r3, r2
 800136e:	f000 81de 	beq.w	800172e <HAL_GPIO_Init+0x482>
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	4a6f      	ldr	r2, [pc, #444]	; (8001534 <HAL_GPIO_Init+0x288>)
 8001378:	4293      	cmp	r3, r2
 800137a:	f000 81d8 	beq.w	800172e <HAL_GPIO_Init+0x482>
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	2b03      	cmp	r3, #3
 8001384:	f000 81d3 	beq.w	800172e <HAL_GPIO_Init+0x482>
 8001388:	21bf      	movs	r1, #191	; 0xbf
 800138a:	4864      	ldr	r0, [pc, #400]	; (800151c <HAL_GPIO_Init+0x270>)
 800138c:	f7fe ffb6 	bl	80002fc <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001390:	e1cd      	b.n	800172e <HAL_GPIO_Init+0x482>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001392:	2201      	movs	r2, #1
 8001394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	69fa      	ldr	r2, [r7, #28]
 80013a2:	4013      	ands	r3, r2
 80013a4:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80013a6:	69ba      	ldr	r2, [r7, #24]
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	429a      	cmp	r2, r3
 80013ac:	f040 81bc 	bne.w	8001728 <HAL_GPIO_Init+0x47c>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	4a56      	ldr	r2, [pc, #344]	; (800150c <HAL_GPIO_Init+0x260>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d00f      	beq.n	80013d8 <HAL_GPIO_Init+0x12c>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	4a55      	ldr	r2, [pc, #340]	; (8001510 <HAL_GPIO_Init+0x264>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d00b      	beq.n	80013d8 <HAL_GPIO_Init+0x12c>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	4a54      	ldr	r2, [pc, #336]	; (8001514 <HAL_GPIO_Init+0x268>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d007      	beq.n	80013d8 <HAL_GPIO_Init+0x12c>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	4a53      	ldr	r2, [pc, #332]	; (8001518 <HAL_GPIO_Init+0x26c>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d003      	beq.n	80013d8 <HAL_GPIO_Init+0x12c>
 80013d0:	21cd      	movs	r1, #205	; 0xcd
 80013d2:	4852      	ldr	r0, [pc, #328]	; (800151c <HAL_GPIO_Init+0x270>)
 80013d4:	f7fe ff92 	bl	80002fc <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	4a55      	ldr	r2, [pc, #340]	; (8001534 <HAL_GPIO_Init+0x288>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	f000 80bf 	beq.w	8001562 <HAL_GPIO_Init+0x2b6>
 80013e4:	4a53      	ldr	r2, [pc, #332]	; (8001534 <HAL_GPIO_Init+0x288>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	f200 80e5 	bhi.w	80015b6 <HAL_GPIO_Init+0x30a>
 80013ec:	4a4e      	ldr	r2, [pc, #312]	; (8001528 <HAL_GPIO_Init+0x27c>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	f000 80b7 	beq.w	8001562 <HAL_GPIO_Init+0x2b6>
 80013f4:	4a4c      	ldr	r2, [pc, #304]	; (8001528 <HAL_GPIO_Init+0x27c>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	f200 80dd 	bhi.w	80015b6 <HAL_GPIO_Init+0x30a>
 80013fc:	4a4c      	ldr	r2, [pc, #304]	; (8001530 <HAL_GPIO_Init+0x284>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	f000 80af 	beq.w	8001562 <HAL_GPIO_Init+0x2b6>
 8001404:	4a4a      	ldr	r2, [pc, #296]	; (8001530 <HAL_GPIO_Init+0x284>)
 8001406:	4293      	cmp	r3, r2
 8001408:	f200 80d5 	bhi.w	80015b6 <HAL_GPIO_Init+0x30a>
 800140c:	4a45      	ldr	r2, [pc, #276]	; (8001524 <HAL_GPIO_Init+0x278>)
 800140e:	4293      	cmp	r3, r2
 8001410:	f000 80a7 	beq.w	8001562 <HAL_GPIO_Init+0x2b6>
 8001414:	4a43      	ldr	r2, [pc, #268]	; (8001524 <HAL_GPIO_Init+0x278>)
 8001416:	4293      	cmp	r3, r2
 8001418:	f200 80cd 	bhi.w	80015b6 <HAL_GPIO_Init+0x30a>
 800141c:	4a43      	ldr	r2, [pc, #268]	; (800152c <HAL_GPIO_Init+0x280>)
 800141e:	4293      	cmp	r3, r2
 8001420:	f000 809f 	beq.w	8001562 <HAL_GPIO_Init+0x2b6>
 8001424:	4a41      	ldr	r2, [pc, #260]	; (800152c <HAL_GPIO_Init+0x280>)
 8001426:	4293      	cmp	r3, r2
 8001428:	f200 80c5 	bhi.w	80015b6 <HAL_GPIO_Init+0x30a>
 800142c:	2b12      	cmp	r3, #18
 800142e:	d82b      	bhi.n	8001488 <HAL_GPIO_Init+0x1dc>
 8001430:	2b12      	cmp	r3, #18
 8001432:	f200 80c0 	bhi.w	80015b6 <HAL_GPIO_Init+0x30a>
 8001436:	a201      	add	r2, pc, #4	; (adr r2, 800143c <HAL_GPIO_Init+0x190>)
 8001438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800143c:	08001563 	.word	0x08001563
 8001440:	08001491 	.word	0x08001491
 8001444:	080014e3 	.word	0x080014e3
 8001448:	080015b1 	.word	0x080015b1
 800144c:	080015b7 	.word	0x080015b7
 8001450:	080015b7 	.word	0x080015b7
 8001454:	080015b7 	.word	0x080015b7
 8001458:	080015b7 	.word	0x080015b7
 800145c:	080015b7 	.word	0x080015b7
 8001460:	080015b7 	.word	0x080015b7
 8001464:	080015b7 	.word	0x080015b7
 8001468:	080015b7 	.word	0x080015b7
 800146c:	080015b7 	.word	0x080015b7
 8001470:	080015b7 	.word	0x080015b7
 8001474:	080015b7 	.word	0x080015b7
 8001478:	080015b7 	.word	0x080015b7
 800147c:	080015b7 	.word	0x080015b7
 8001480:	080014b9 	.word	0x080014b9
 8001484:	08001539 	.word	0x08001539
 8001488:	4a25      	ldr	r2, [pc, #148]	; (8001520 <HAL_GPIO_Init+0x274>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d069      	beq.n	8001562 <HAL_GPIO_Init+0x2b6>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800148e:	e092      	b.n	80015b6 <HAL_GPIO_Init+0x30a>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	2b02      	cmp	r3, #2
 8001496:	d00b      	beq.n	80014b0 <HAL_GPIO_Init+0x204>
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	2b01      	cmp	r3, #1
 800149e:	d007      	beq.n	80014b0 <HAL_GPIO_Init+0x204>
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	2b03      	cmp	r3, #3
 80014a6:	d003      	beq.n	80014b0 <HAL_GPIO_Init+0x204>
 80014a8:	21d5      	movs	r1, #213	; 0xd5
 80014aa:	481c      	ldr	r0, [pc, #112]	; (800151c <HAL_GPIO_Init+0x270>)
 80014ac:	f7fe ff26 	bl	80002fc <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	623b      	str	r3, [r7, #32]
          break;
 80014b6:	e07f      	b.n	80015b8 <HAL_GPIO_Init+0x30c>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d00b      	beq.n	80014d8 <HAL_GPIO_Init+0x22c>
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d007      	beq.n	80014d8 <HAL_GPIO_Init+0x22c>
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	2b03      	cmp	r3, #3
 80014ce:	d003      	beq.n	80014d8 <HAL_GPIO_Init+0x22c>
 80014d0:	21dc      	movs	r1, #220	; 0xdc
 80014d2:	4812      	ldr	r0, [pc, #72]	; (800151c <HAL_GPIO_Init+0x270>)
 80014d4:	f7fe ff12 	bl	80002fc <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	3304      	adds	r3, #4
 80014de:	623b      	str	r3, [r7, #32]
          break;
 80014e0:	e06a      	b.n	80015b8 <HAL_GPIO_Init+0x30c>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	68db      	ldr	r3, [r3, #12]
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d00b      	beq.n	8001502 <HAL_GPIO_Init+0x256>
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	68db      	ldr	r3, [r3, #12]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d007      	beq.n	8001502 <HAL_GPIO_Init+0x256>
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	68db      	ldr	r3, [r3, #12]
 80014f6:	2b03      	cmp	r3, #3
 80014f8:	d003      	beq.n	8001502 <HAL_GPIO_Init+0x256>
 80014fa:	21e3      	movs	r1, #227	; 0xe3
 80014fc:	4807      	ldr	r0, [pc, #28]	; (800151c <HAL_GPIO_Init+0x270>)
 80014fe:	f7fe fefd 	bl	80002fc <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	68db      	ldr	r3, [r3, #12]
 8001506:	3308      	adds	r3, #8
 8001508:	623b      	str	r3, [r7, #32]
          break;
 800150a:	e055      	b.n	80015b8 <HAL_GPIO_Init+0x30c>
 800150c:	40010800 	.word	0x40010800
 8001510:	40010c00 	.word	0x40010c00
 8001514:	40011000 	.word	0x40011000
 8001518:	40011400 	.word	0x40011400
 800151c:	080018b8 	.word	0x080018b8
 8001520:	10110000 	.word	0x10110000
 8001524:	10210000 	.word	0x10210000
 8001528:	10310000 	.word	0x10310000
 800152c:	10120000 	.word	0x10120000
 8001530:	10220000 	.word	0x10220000
 8001534:	10320000 	.word	0x10320000
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	2b02      	cmp	r3, #2
 800153e:	d00b      	beq.n	8001558 <HAL_GPIO_Init+0x2ac>
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	2b01      	cmp	r3, #1
 8001546:	d007      	beq.n	8001558 <HAL_GPIO_Init+0x2ac>
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	2b03      	cmp	r3, #3
 800154e:	d003      	beq.n	8001558 <HAL_GPIO_Init+0x2ac>
 8001550:	21ea      	movs	r1, #234	; 0xea
 8001552:	487d      	ldr	r0, [pc, #500]	; (8001748 <HAL_GPIO_Init+0x49c>)
 8001554:	f7fe fed2 	bl	80002fc <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	330c      	adds	r3, #12
 800155e:	623b      	str	r3, [r7, #32]
          break;
 8001560:	e02a      	b.n	80015b8 <HAL_GPIO_Init+0x30c>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d00b      	beq.n	8001582 <HAL_GPIO_Init+0x2d6>
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	2b01      	cmp	r3, #1
 8001570:	d007      	beq.n	8001582 <HAL_GPIO_Init+0x2d6>
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	2b02      	cmp	r3, #2
 8001578:	d003      	beq.n	8001582 <HAL_GPIO_Init+0x2d6>
 800157a:	21f7      	movs	r1, #247	; 0xf7
 800157c:	4872      	ldr	r0, [pc, #456]	; (8001748 <HAL_GPIO_Init+0x49c>)
 800157e:	f7fe febd 	bl	80002fc <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d102      	bne.n	8001590 <HAL_GPIO_Init+0x2e4>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800158a:	2304      	movs	r3, #4
 800158c:	623b      	str	r3, [r7, #32]
          break;
 800158e:	e013      	b.n	80015b8 <HAL_GPIO_Init+0x30c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	2b01      	cmp	r3, #1
 8001596:	d105      	bne.n	80015a4 <HAL_GPIO_Init+0x2f8>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001598:	2308      	movs	r3, #8
 800159a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	69fa      	ldr	r2, [r7, #28]
 80015a0:	611a      	str	r2, [r3, #16]
          break;
 80015a2:	e009      	b.n	80015b8 <HAL_GPIO_Init+0x30c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015a4:	2308      	movs	r3, #8
 80015a6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	69fa      	ldr	r2, [r7, #28]
 80015ac:	615a      	str	r2, [r3, #20]
          break;
 80015ae:	e003      	b.n	80015b8 <HAL_GPIO_Init+0x30c>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80015b0:	2300      	movs	r3, #0
 80015b2:	623b      	str	r3, [r7, #32]
          break;
 80015b4:	e000      	b.n	80015b8 <HAL_GPIO_Init+0x30c>
          break;
 80015b6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015b8:	69bb      	ldr	r3, [r7, #24]
 80015ba:	2bff      	cmp	r3, #255	; 0xff
 80015bc:	d801      	bhi.n	80015c2 <HAL_GPIO_Init+0x316>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	e001      	b.n	80015c6 <HAL_GPIO_Init+0x31a>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	3304      	adds	r3, #4
 80015c6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80015c8:	69bb      	ldr	r3, [r7, #24]
 80015ca:	2bff      	cmp	r3, #255	; 0xff
 80015cc:	d802      	bhi.n	80015d4 <HAL_GPIO_Init+0x328>
 80015ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	e002      	b.n	80015da <HAL_GPIO_Init+0x32e>
 80015d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d6:	3b08      	subs	r3, #8
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	210f      	movs	r1, #15
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	fa01 f303 	lsl.w	r3, r1, r3
 80015e8:	43db      	mvns	r3, r3
 80015ea:	401a      	ands	r2, r3
 80015ec:	6a39      	ldr	r1, [r7, #32]
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	fa01 f303 	lsl.w	r3, r1, r3
 80015f4:	431a      	orrs	r2, r3
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001602:	2b00      	cmp	r3, #0
 8001604:	f000 8090 	beq.w	8001728 <HAL_GPIO_Init+0x47c>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001608:	4b50      	ldr	r3, [pc, #320]	; (800174c <HAL_GPIO_Init+0x4a0>)
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	4a4f      	ldr	r2, [pc, #316]	; (800174c <HAL_GPIO_Init+0x4a0>)
 800160e:	f043 0301 	orr.w	r3, r3, #1
 8001612:	6193      	str	r3, [r2, #24]
 8001614:	4b4d      	ldr	r3, [pc, #308]	; (800174c <HAL_GPIO_Init+0x4a0>)
 8001616:	699b      	ldr	r3, [r3, #24]
 8001618:	f003 0301 	and.w	r3, r3, #1
 800161c:	60bb      	str	r3, [r7, #8]
 800161e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001620:	4a4b      	ldr	r2, [pc, #300]	; (8001750 <HAL_GPIO_Init+0x4a4>)
 8001622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001624:	089b      	lsrs	r3, r3, #2
 8001626:	3302      	adds	r3, #2
 8001628:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800162c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800162e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001630:	f003 0303 	and.w	r3, r3, #3
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	220f      	movs	r2, #15
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	43db      	mvns	r3, r3
 800163e:	68fa      	ldr	r2, [r7, #12]
 8001640:	4013      	ands	r3, r2
 8001642:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	4a43      	ldr	r2, [pc, #268]	; (8001754 <HAL_GPIO_Init+0x4a8>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d00d      	beq.n	8001668 <HAL_GPIO_Init+0x3bc>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	4a42      	ldr	r2, [pc, #264]	; (8001758 <HAL_GPIO_Init+0x4ac>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d007      	beq.n	8001664 <HAL_GPIO_Init+0x3b8>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	4a41      	ldr	r2, [pc, #260]	; (800175c <HAL_GPIO_Init+0x4b0>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d101      	bne.n	8001660 <HAL_GPIO_Init+0x3b4>
 800165c:	2302      	movs	r3, #2
 800165e:	e004      	b.n	800166a <HAL_GPIO_Init+0x3be>
 8001660:	2303      	movs	r3, #3
 8001662:	e002      	b.n	800166a <HAL_GPIO_Init+0x3be>
 8001664:	2301      	movs	r3, #1
 8001666:	e000      	b.n	800166a <HAL_GPIO_Init+0x3be>
 8001668:	2300      	movs	r3, #0
 800166a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800166c:	f002 0203 	and.w	r2, r2, #3
 8001670:	0092      	lsls	r2, r2, #2
 8001672:	4093      	lsls	r3, r2
 8001674:	68fa      	ldr	r2, [r7, #12]
 8001676:	4313      	orrs	r3, r2
 8001678:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800167a:	4935      	ldr	r1, [pc, #212]	; (8001750 <HAL_GPIO_Init+0x4a4>)
 800167c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167e:	089b      	lsrs	r3, r3, #2
 8001680:	3302      	adds	r3, #2
 8001682:	68fa      	ldr	r2, [r7, #12]
 8001684:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001690:	2b00      	cmp	r3, #0
 8001692:	d006      	beq.n	80016a2 <HAL_GPIO_Init+0x3f6>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001694:	4b32      	ldr	r3, [pc, #200]	; (8001760 <HAL_GPIO_Init+0x4b4>)
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	4931      	ldr	r1, [pc, #196]	; (8001760 <HAL_GPIO_Init+0x4b4>)
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	4313      	orrs	r3, r2
 800169e:	600b      	str	r3, [r1, #0]
 80016a0:	e006      	b.n	80016b0 <HAL_GPIO_Init+0x404>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80016a2:	4b2f      	ldr	r3, [pc, #188]	; (8001760 <HAL_GPIO_Init+0x4b4>)
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	43db      	mvns	r3, r3
 80016aa:	492d      	ldr	r1, [pc, #180]	; (8001760 <HAL_GPIO_Init+0x4b4>)
 80016ac:	4013      	ands	r3, r2
 80016ae:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d006      	beq.n	80016ca <HAL_GPIO_Init+0x41e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80016bc:	4b28      	ldr	r3, [pc, #160]	; (8001760 <HAL_GPIO_Init+0x4b4>)
 80016be:	685a      	ldr	r2, [r3, #4]
 80016c0:	4927      	ldr	r1, [pc, #156]	; (8001760 <HAL_GPIO_Init+0x4b4>)
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	604b      	str	r3, [r1, #4]
 80016c8:	e006      	b.n	80016d8 <HAL_GPIO_Init+0x42c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80016ca:	4b25      	ldr	r3, [pc, #148]	; (8001760 <HAL_GPIO_Init+0x4b4>)
 80016cc:	685a      	ldr	r2, [r3, #4]
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	43db      	mvns	r3, r3
 80016d2:	4923      	ldr	r1, [pc, #140]	; (8001760 <HAL_GPIO_Init+0x4b4>)
 80016d4:	4013      	ands	r3, r2
 80016d6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d006      	beq.n	80016f2 <HAL_GPIO_Init+0x446>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80016e4:	4b1e      	ldr	r3, [pc, #120]	; (8001760 <HAL_GPIO_Init+0x4b4>)
 80016e6:	689a      	ldr	r2, [r3, #8]
 80016e8:	491d      	ldr	r1, [pc, #116]	; (8001760 <HAL_GPIO_Init+0x4b4>)
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	608b      	str	r3, [r1, #8]
 80016f0:	e006      	b.n	8001700 <HAL_GPIO_Init+0x454>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016f2:	4b1b      	ldr	r3, [pc, #108]	; (8001760 <HAL_GPIO_Init+0x4b4>)
 80016f4:	689a      	ldr	r2, [r3, #8]
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	43db      	mvns	r3, r3
 80016fa:	4919      	ldr	r1, [pc, #100]	; (8001760 <HAL_GPIO_Init+0x4b4>)
 80016fc:	4013      	ands	r3, r2
 80016fe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001708:	2b00      	cmp	r3, #0
 800170a:	d006      	beq.n	800171a <HAL_GPIO_Init+0x46e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800170c:	4b14      	ldr	r3, [pc, #80]	; (8001760 <HAL_GPIO_Init+0x4b4>)
 800170e:	68da      	ldr	r2, [r3, #12]
 8001710:	4913      	ldr	r1, [pc, #76]	; (8001760 <HAL_GPIO_Init+0x4b4>)
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	4313      	orrs	r3, r2
 8001716:	60cb      	str	r3, [r1, #12]
 8001718:	e006      	b.n	8001728 <HAL_GPIO_Init+0x47c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800171a:	4b11      	ldr	r3, [pc, #68]	; (8001760 <HAL_GPIO_Init+0x4b4>)
 800171c:	68da      	ldr	r2, [r3, #12]
 800171e:	69bb      	ldr	r3, [r7, #24]
 8001720:	43db      	mvns	r3, r3
 8001722:	490f      	ldr	r1, [pc, #60]	; (8001760 <HAL_GPIO_Init+0x4b4>)
 8001724:	4013      	ands	r3, r2
 8001726:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172a:	3301      	adds	r3, #1
 800172c:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001734:	fa22 f303 	lsr.w	r3, r2, r3
 8001738:	2b00      	cmp	r3, #0
 800173a:	f47f ae2a 	bne.w	8001392 <HAL_GPIO_Init+0xe6>
  }
}
 800173e:	bf00      	nop
 8001740:	bf00      	nop
 8001742:	3728      	adds	r7, #40	; 0x28
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	080018b8 	.word	0x080018b8
 800174c:	40021000 	.word	0x40021000
 8001750:	40010000 	.word	0x40010000
 8001754:	40010800 	.word	0x40010800
 8001758:	40010c00 	.word	0x40010c00
 800175c:	40011000 	.word	0x40011000
 8001760:	40010400 	.word	0x40010400

08001764 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	460b      	mov	r3, r1
 800176e:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001770:	887b      	ldrh	r3, [r7, #2]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d004      	beq.n	8001780 <HAL_GPIO_TogglePin+0x1c>
 8001776:	887b      	ldrh	r3, [r7, #2]
 8001778:	0c1b      	lsrs	r3, r3, #16
 800177a:	041b      	lsls	r3, r3, #16
 800177c:	2b00      	cmp	r3, #0
 800177e:	d004      	beq.n	800178a <HAL_GPIO_TogglePin+0x26>
 8001780:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 8001784:	480a      	ldr	r0, [pc, #40]	; (80017b0 <HAL_GPIO_TogglePin+0x4c>)
 8001786:	f7fe fdb9 	bl	80002fc <assert_failed>

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	68db      	ldr	r3, [r3, #12]
 800178e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001790:	887a      	ldrh	r2, [r7, #2]
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	4013      	ands	r3, r2
 8001796:	041a      	lsls	r2, r3, #16
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	43d9      	mvns	r1, r3
 800179c:	887b      	ldrh	r3, [r7, #2]
 800179e:	400b      	ands	r3, r1
 80017a0:	431a      	orrs	r2, r3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	611a      	str	r2, [r3, #16]
}
 80017a6:	bf00      	nop
 80017a8:	3710      	adds	r7, #16
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	080018b8 	.word	0x080018b8

080017b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	4603      	mov	r3, r0
 80017bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80017be:	4b08      	ldr	r3, [pc, #32]	; (80017e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017c0:	695a      	ldr	r2, [r3, #20]
 80017c2:	88fb      	ldrh	r3, [r7, #6]
 80017c4:	4013      	ands	r3, r2
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d006      	beq.n	80017d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017ca:	4a05      	ldr	r2, [pc, #20]	; (80017e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017cc:	88fb      	ldrh	r3, [r7, #6]
 80017ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80017d0:	88fb      	ldrh	r3, [r7, #6]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7fe fd0c 	bl	80001f0 <HAL_GPIO_EXTI_Callback>
  }
}
 80017d8:	bf00      	nop
 80017da:	3708      	adds	r7, #8
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	40010400 	.word	0x40010400

080017e4 <__libc_init_array>:
 80017e4:	b570      	push	{r4, r5, r6, lr}
 80017e6:	2600      	movs	r6, #0
 80017e8:	4d0c      	ldr	r5, [pc, #48]	; (800181c <__libc_init_array+0x38>)
 80017ea:	4c0d      	ldr	r4, [pc, #52]	; (8001820 <__libc_init_array+0x3c>)
 80017ec:	1b64      	subs	r4, r4, r5
 80017ee:	10a4      	asrs	r4, r4, #2
 80017f0:	42a6      	cmp	r6, r4
 80017f2:	d109      	bne.n	8001808 <__libc_init_array+0x24>
 80017f4:	f000 f81a 	bl	800182c <_init>
 80017f8:	2600      	movs	r6, #0
 80017fa:	4d0a      	ldr	r5, [pc, #40]	; (8001824 <__libc_init_array+0x40>)
 80017fc:	4c0a      	ldr	r4, [pc, #40]	; (8001828 <__libc_init_array+0x44>)
 80017fe:	1b64      	subs	r4, r4, r5
 8001800:	10a4      	asrs	r4, r4, #2
 8001802:	42a6      	cmp	r6, r4
 8001804:	d105      	bne.n	8001812 <__libc_init_array+0x2e>
 8001806:	bd70      	pop	{r4, r5, r6, pc}
 8001808:	f855 3b04 	ldr.w	r3, [r5], #4
 800180c:	4798      	blx	r3
 800180e:	3601      	adds	r6, #1
 8001810:	e7ee      	b.n	80017f0 <__libc_init_array+0xc>
 8001812:	f855 3b04 	ldr.w	r3, [r5], #4
 8001816:	4798      	blx	r3
 8001818:	3601      	adds	r6, #1
 800181a:	e7f2      	b.n	8001802 <__libc_init_array+0x1e>
 800181c:	080018f4 	.word	0x080018f4
 8001820:	080018f4 	.word	0x080018f4
 8001824:	080018f4 	.word	0x080018f4
 8001828:	080018f8 	.word	0x080018f8

0800182c <_init>:
 800182c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800182e:	bf00      	nop
 8001830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001832:	bc08      	pop	{r3}
 8001834:	469e      	mov	lr, r3
 8001836:	4770      	bx	lr

08001838 <_fini>:
 8001838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800183a:	bf00      	nop
 800183c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800183e:	bc08      	pop	{r3}
 8001840:	469e      	mov	lr, r3
 8001842:	4770      	bx	lr
